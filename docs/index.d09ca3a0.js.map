{"mappings":"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","sources":["node_modules/@stacks/common/src/constants.ts","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/jsontokens/lib/signer.ts","node_modules/jsontokens/lib/base64Url.ts","node_modules/base64-js/index.js","node_modules/jsontokens/lib/cryptoClients/cryptoClients/index.ts","node_modules/jsontokens/lib/cryptoClients/cryptoClients/secp256k1.ts","node_modules/@noble/hashes/hmac.js","node_modules/@noble/hashes/_assert.js","node_modules/@noble/hashes/utils.js","node_modules/@noble/hashes/cryptoBrowser.js","node_modules/@noble/hashes/sha256.js","node_modules/@noble/hashes/_sha2.js","node_modules/@noble/secp256k1/lib/esm/index.js","node_modules/jsontokens/lib/ecdsaSigFormatter.ts","node_modules/jsontokens/lib/errors.ts","node_modules/jsontokens/lib/cryptoClients/cryptoClients/sha256.ts","node_modules/jsontokens/lib/verifier.ts","node_modules/jsontokens/lib/decode.ts","node_modules/lodash.clonedeep/index.js","node_modules/@parcel/runtime-js/lib/runtime-c3dfbdb66618cbd7.js","node_modules/@parcel/runtime-js/lib/runtime-f6386b6a0b3c6738.js","node_modules/@stacks/connect-ui/dist/esm/index-9d57a6fd.js","node_modules/@parcel/runtime-js/lib/runtime-afaab416e906050a.js","node_modules/@parcel/runtime-js/lib/runtime-05398ec299f6a689.js","node_modules/cross-fetch/dist/browser-polyfill.js","node_modules/@stacks/network/src/fetch.ts","node_modules/@stacks/network/src/network.ts","node_modules/@stacks/common/src/config.ts","node_modules/@stacks/common/src/logger.ts","node_modules/@stacks/common/src/utils.ts","node_modules/@stacks/auth/src/constants.ts","node_modules/@stacks/auth/src/appConfig.ts","node_modules/@stacks/common/src/errors.ts","node_modules/@stacks/auth/src/sessionData.ts","node_modules/@stacks/auth/src/sessionStore.ts","node_modules/jsontokens/lib/index.ts","node_modules/@stacks/encryption/src/keys.ts","node_modules/@stacks/common/src/keys.ts","node_modules/@stacks/common/src/buffer.ts","node_modules/bs58/index.js","node_modules/base-x/src/index.js","node_modules/@noble/hashes/ripemd160.js","node_modules/@stacks/encryption/src/sha2Hash.ts","node_modules/@noble/hashes/sha512.js","node_modules/@noble/hashes/_u64.js","node_modules/@stacks/encryption/src/cryptoUtils.ts","node_modules/@stacks/encryption/src/hashRipemd160.ts","node_modules/@stacks/auth/src/dids.ts","node_modules/@stacks/auth/src/verification.ts","node_modules/@stacks/encryption/src/ec.ts","node_modules/@stacks/common/src/signatures.ts","node_modules/@stacks/encryption/src/aesCipher.ts","node_modules/@stacks/encryption/src/messageSignature.ts","node_modules/@stacks/encryption/src/utils.ts","node_modules/@stacks/auth/src/messages.ts","node_modules/@stacks/encryption/src/encryption.ts","node_modules/@stacks/transactions/src/keys.ts","node_modules/c32check/lib/index.js","node_modules/c32check/lib/encoding.js","node_modules/c32check/lib/checksum.js","node_modules/c32check/lib/address.js","node_modules/c32check/lib/base58check.js","node_modules/@stacks/transactions/src/constants.ts","node_modules/@stacks/transactions/src/common.ts","node_modules/@stacks/transactions/src/clarity/constants.ts","node_modules/@stacks/transactions/src/clarity/types/bufferCV.ts","node_modules/@stacks/transactions/src/postcondition-types.ts","node_modules/@stacks/transactions/src/clarity/types/principalCV.ts","node_modules/@stacks/transactions/src/clarity/types/booleanCV.ts","node_modules/@stacks/transactions/src/clarity/types/intCV.ts","node_modules/@stacks/transactions/src/clarity/types/optionalCV.ts","node_modules/@stacks/transactions/src/clarity/types/responseCV.ts","node_modules/@stacks/transactions/src/clarity/types/tupleCV.ts","node_modules/@stacks/transactions/src/bytesReader.ts","node_modules/@stacks/transactions/src/errors.ts","node_modules/@stacks/transactions/src/clarity/serialize.ts","node_modules/@stacks/transactions/src/payload.ts","node_modules/@stacks/transactions/src/types.ts","node_modules/@stacks/transactions/src/signature.ts","node_modules/@stacks/transactions/src/clarity/types/stringCV.ts","node_modules/@stacks/transactions/src/clarity/deserialize.ts","node_modules/@stacks/transactions/src/clarity/types/listCV.ts","node_modules/@stacks/transactions/src/utils.ts","node_modules/@stacks/profile/src/profileTokens.ts","node_modules/@stacks/auth/src/protocolEchoDetection.ts","node_modules/@stacks/auth/src/userSession.ts","node_modules/@stacks/transactions/src/authorization.ts","node_modules/@stacks/transactions/src/transaction.ts","node_modules/@stacks/connect-ui/dist/esm/loader.js","node_modules/@stacks/connect-ui/loader/index.js","userSession.js","node_modules/@stacks/transactions/src/contract-abi.ts","node_modules/@stacks/transactions/src/postcondition.ts","node_modules/@stacks/transactions/src/builders.ts","Components.js","ContractCalls.js","utils/checksum.ts","utils/encoding.ts","utils/base58check.ts","utils/address.ts","script.js","WalletConnect.js"],"sourcesContent":["export enum ChainID {\n  Testnet = 0x80000000,\n  Mainnet = 0x00000001,\n}\n\nexport enum TransactionVersion {\n  Mainnet = 0x00,\n  Testnet = 0x80,\n}\n\n/**\n * @ignore\n */\nexport const PRIVATE_KEY_COMPRESSED_LENGTH = 33;\n\n/**\n * @ignore\n */\nexport const PRIVATE_KEY_UNCOMPRESSED_LENGTH = 32;\n\n/**\n * @ignore\n */\nexport const BLOCKSTACK_DEFAULT_GAIA_HUB_URL = 'https://hub.blockstack.org';\n","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;",null,null,"'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n",null,null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        _assert_js_1.default.hash(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        _assert_js_1.default.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n","\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nexport { CURVE };\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n",null,null,null,null,null,"/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"es3x8\"))).then(() => parcelRequire('hAY4E'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"hJ497\"))).then(() => parcelRequire('9apoj'));","const NAMESPACE = 'connect-ui';\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Helper method for querying a `meta` tag that contains a nonce value\n * out of a DOM's head.\n *\n * @param doc The DOM containing the `head` to query against\n * @returns The content of the meta tag representing the nonce value, or `undefined` if no tag\n * exists or the tag has no content.\n */\nfunction queryNonceMetaTagContent(doc) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = doc.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) !== null && _c !== void 0 ? _c : undefined;\n}\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    return vnode;\n};\n/**\n * A utility function for creating a virtual DOM node from a tag and some\n * possible text content.\n *\n * @param tag the tag for this element\n * @param text possible text content for the node\n * @returns a newly-minted virtual DOM node\n */\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\n/**\n * Check whether a given node is a Host node or not\n *\n * @param node the virtual DOM node to check\n * @returns whether it's a Host node or not\n */\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getElement = (ref) => (getHostRef(ref).$hostElement$ );\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    var _a;\n    let scopeId = getScopeId(cmpMeta);\n    const style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    // Apply CSP nonce to the style tag if it exists\n                    const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n                    if (nonce != null) {\n                        styleElm.setAttribute('nonce', nonce);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n    if (flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if ((!isProp ) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    if (newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else {\n        // create element\n        elm = newVNode.$elm$ = (doc.createElement(newVNode.$tag$));\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n    }\n    return elm;\n};\n/**\n * Create DOM nodes corresponding to a list of {@link d.Vnode} objects and\n * add them to the DOM in the appropriate place.\n *\n * @param parentElm the DOM node which should be used as a parent for the new\n * DOM nodes\n * @param before a child of the `parentElm` which the new children should be\n * inserted before (optional)\n * @param parentVNode the parent virtual DOM node\n * @param vnodes the new child virtual DOM nodes to produce DOM nodes for\n * @param startIdx the index in the child virtual DOM nodes at which to start\n * creating DOM nodes (inclusive)\n * @param endIdx the index in the child virtual DOM nodes at which to stop\n * creating DOM nodes (inclusive)\n */\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = (parentElm);\n    let childNode;\n    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, before);\n            }\n        }\n    }\n};\n/**\n * Remove the DOM elements corresponding to a list of {@link d.VNode} objects.\n * This can be used to, for instance, clean up after a list of children which\n * should no longer be shown.\n *\n * This function also handles some of Stencil's slot relocation logic.\n *\n * @param vnodes a list of virtual DOM nodes to remove\n * @param startIdx the index at which to start removing nodes (inclusive)\n * @param endIdx the index at which to stop removing nodes (inclusive)\n * @param vnode a VNode\n * @param elm an element\n */\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            patch(oldStartVnode, newEndVnode);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            patch(oldEndVnode, newStartVnode);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false negative and then have to do needless re-rendering\n * (i.e. we'd say two VNodes aren't equal when in fact they should be).\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        return true;\n    }\n    return false;\n};\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const text = newVNode.$text$;\n    if (text === null) {\n        {\n            {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n    }\n    else if (oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\n/**\n * The main entry point for Stencil's virtual DOM-based rendering engine\n *\n * Given a {@link d.HostRef} container and some virtual DOM nodes, this\n * function will handle creating a virtual DOM tree with a single root, patching\n * the current virtual DOM tree onto an old one (if any), dealing with slot\n * relocation, and reflecting attributes.\n *\n * @param hostRef data needed to root and render the virtual DOM tree, such as\n * the DOM node into which it should be rendered.\n * @param renderFnResults the virtual DOM nodes to be rendered\n */\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    let promise;\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    try {\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            if ((flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (cmpMeta.$members$) {\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            endNewInstance();\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        endConnected();\n    }\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        getHostRef(elm);\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    var _a;\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        {\n                            {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        // Apply CSP nonce to the style tag if it exists\n        const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n        if (nonce != null) {\n            visibilityStyle.setAttribute('nonce', nonce);\n        }\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\n/**\n * Assigns the given value to the nonce property on the runtime platform object.\n * During runtime, this value is used to set the nonce attribute on all dynamically created script and style tags.\n * @param nonce The value to be assigned to the platform nonce property.\n * @returns void\n */\nconst setNonce = (nonce) => (plt.$nonce$ = nonce);\nconst hostRefs = /*@__PURE__*/ new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    \n    if (!hmrVersionId || !BUILD.hotModuleReplacement) {\n      const processMod = importedModule => {\n        cmpModules.set(bundleId, importedModule);\n        return importedModule[exportName];\n      }\n      switch(bundleId) {\n        \n        case 'connect-modal':\n          return import(\n            /* webpackMode: \"lazy\" */\n            './connect-modal.entry.js').then(processMod, consoleError);\n      }\n    }\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { bootstrapLazy as b, getElement as g, h, promiseResolve as p, registerInstance as r, setNonce as s };\n","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"hQdJV\"))).then(() => parcelRequire('3gXcl'));","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"5SCbD\\\":\\\"index.d09ca3a0.js\\\",\\\"es3x8\\\":\\\"dom.0f89fc8e.js\\\",\\\"hJ497\\\":\\\"core-js.72cba9dc.js\\\",\\\"hQdJV\\\":\\\"connect-modal.entry.3c912ed2.js\\\"}\"));","(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(typeof self !== 'undefined' ? self : this);\n","import 'cross-fetch/polyfill';\n\n// Define a default request options and allow modification using getters, setters\n// Reference: https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\nconst defaultFetchOpts: RequestInit = {\n  // By default referrer value will be client:origin: above reference link\n  referrerPolicy: 'origin', // Use origin value for referrer policy\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\n};\n\n/**\n * Get fetch options\n * @category Network\n */\nexport const getFetchOptions = () => {\n  return defaultFetchOpts;\n};\n\n/**\n * Sets global fetch options for stacks.js network calls.\n *\n * @example\n * Users can change the default referrer as well as other options when fetch is used internally by stacks.js:\n * ```\n * setFetchOptions({ referrer: 'no-referrer', referrerPolicy: 'no-referrer', ...otherRequestOptions });\n * ```\n * After calling {@link setFetchOptions} all subsequent network calls will use the specified options above.\n *\n * @see MDN Request: https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n * @returns global fetch options after merging with previous options (or defaults)\n * @category Network\n * @related {@link getFetchOptions}\n */\nexport const setFetchOptions = (ops: RequestInit): RequestInit => {\n  return Object.assign(defaultFetchOpts, ops);\n};\n\n/** @internal */\nexport async function fetchWrapper(input: RequestInfo, init?: RequestInit): Promise<Response> {\n  const fetchOpts = {};\n  // Use the provided options in request options along with default or user provided values\n  Object.assign(fetchOpts, init, defaultFetchOpts);\n\n  const fetchResult = await fetch(input, fetchOpts);\n  return fetchResult;\n}\n\nexport type FetchFn = (url: string, init?: RequestInit) => Promise<Response>;\n\nexport interface RequestContext {\n  fetch: FetchFn;\n  url: string;\n  init: RequestInit;\n}\n\nexport interface ResponseContext {\n  fetch: FetchFn;\n  url: string;\n  init: RequestInit;\n  response: Response;\n}\n\nexport interface FetchParams {\n  url: string;\n  init: RequestInit;\n}\n\nexport interface FetchMiddleware {\n  pre?: (context: RequestContext) => PromiseLike<FetchParams | void> | FetchParams | void;\n  post?: (context: ResponseContext) => Promise<Response | void> | Response | void;\n}\nexport interface ApiKeyMiddlewareOpts {\n  /** The middleware / API key header will only be added to requests matching this host. */\n  host?: RegExp | string;\n  /** The http header name used for specifying the API key value. */\n  httpHeader?: string;\n  /** The API key string to specify as an http header value. */\n  apiKey: string;\n}\n\n/** @internal */\nexport function hostMatches(host: string, pattern: string | RegExp) {\n  if (typeof pattern === 'string') return pattern === host;\n  return (pattern as RegExp).exec(host);\n}\n\n/**\n * Creates a new middleware from an API key.\n * @example\n * ```\n * const apiMiddleware = createApiKeyMiddleware(\"example_e8e044a3_41d8b0fe_3dd3988ef302\");\n * const fetchFn = createFetchFn(apiMiddleware);\n * const network = new StacksMainnet({ fetchFn });\n * ```\n * @category Network\n * @related {@link createFetchFn}, {@link StacksNetwork}\n */\nexport function createApiKeyMiddleware({\n  apiKey,\n  host = /(.*)api(.*)\\.stacks\\.co$/i,\n  httpHeader = 'x-api-key',\n}: ApiKeyMiddlewareOpts): FetchMiddleware {\n  return {\n    pre: context => {\n      const reqUrl = new URL(context.url);\n      if (!hostMatches(reqUrl.host, host)) return; // Skip middleware if host does not match pattern\n\n      const headers = new Headers(context.init.headers);\n      headers.set(httpHeader, apiKey);\n      context.init.headers = headers;\n    },\n  };\n}\n\nfunction argsForCreateFetchFn(args: any[]): { fetchLib: FetchFn; middlewares: FetchMiddleware[] } {\n  let fetchLib: FetchFn = fetchWrapper;\n  let middlewares: FetchMiddleware[] = [];\n  if (args.length > 0 && typeof args[0] === 'function') {\n    fetchLib = args.shift();\n  }\n  if (args.length > 0) {\n    middlewares = args; // remaining args\n  }\n  return { fetchLib, middlewares };\n}\n\n/**\n * Creates a new network fetching function, which combines an optional fetch-compatible library with optional middlware.\n * @example\n * ```\n * const customFetch = createFetchFn(someMiddleware)\n * const customFetch = createFetchFn(fetch, someMiddleware)\n * const customFetch = createFetchFn(fetch, middlewareA, middlewareB)\n * ```\n * @category Network\n */\nexport function createFetchFn(fetchLib: FetchFn, ...middleware: FetchMiddleware[]): FetchFn;\nexport function createFetchFn(...middleware: FetchMiddleware[]): FetchFn;\nexport function createFetchFn(...args: any[]): FetchFn {\n  const { fetchLib, middlewares } = argsForCreateFetchFn(args);\n\n  const fetchFn = async (url: string, init?: RequestInit | undefined): Promise<Response> => {\n    let fetchParams = { url, init: init ?? {} };\n\n    for (const middleware of middlewares) {\n      if (typeof middleware.pre === 'function') {\n        const result = await Promise.resolve(\n          middleware.pre({\n            fetch: fetchLib,\n            ...fetchParams,\n          })\n        );\n        fetchParams = result ?? fetchParams;\n      }\n    }\n\n    let response = await fetchLib(fetchParams.url, fetchParams.init);\n\n    for (const middleware of middlewares) {\n      if (typeof middleware.post === 'function') {\n        const result = await Promise.resolve(\n          middleware.post({\n            fetch: fetchLib,\n            url: fetchParams.url,\n            init: fetchParams.init,\n            response: response?.clone() ?? response,\n          })\n        );\n        response = result ?? response;\n      }\n    }\n    return response;\n  };\n  return fetchFn;\n}\n","import { TransactionVersion, ChainID } from '@stacks/common';\nimport { createFetchFn, FetchFn } from './fetch';\n\nexport const HIRO_MAINNET_DEFAULT = 'https://stacks-node-api.mainnet.stacks.co';\nexport const HIRO_TESTNET_DEFAULT = 'https://stacks-node-api.testnet.stacks.co';\nexport const HIRO_MOCKNET_DEFAULT = 'http://localhost:3999';\n\nexport interface NetworkConfig {\n  url: string;\n  fetchFn?: FetchFn;\n}\n\nexport const StacksNetworks = ['mainnet', 'testnet', 'devnet', 'mocknet'] as const;\nexport type StacksNetworkName = (typeof StacksNetworks)[number];\n\n/**\n * @related {@link StacksMainnet}, {@link StacksTestnet}, {@link StacksDevnet}, {@link StacksMocknet}\n */\nexport class StacksNetwork {\n  version = TransactionVersion.Mainnet;\n  chainId = ChainID.Mainnet;\n  bnsLookupUrl = 'https://stacks-node-api.mainnet.stacks.co';\n  broadcastEndpoint = '/v2/transactions';\n  transferFeeEstimateEndpoint = '/v2/fees/transfer';\n  transactionFeeEstimateEndpoint = '/v2/fees/transaction';\n  accountEndpoint = '/v2/accounts';\n  contractAbiEndpoint = '/v2/contracts/interface';\n  readOnlyFunctionCallEndpoint = '/v2/contracts/call-read';\n\n  readonly coreApiUrl: string;\n\n  fetchFn: FetchFn;\n\n  constructor(networkConfig: NetworkConfig) {\n    this.coreApiUrl = networkConfig.url;\n    this.fetchFn = networkConfig.fetchFn ?? createFetchFn();\n  }\n\n  static fromName = (networkName: StacksNetworkName): StacksNetwork => {\n    switch (networkName) {\n      case 'mainnet':\n        return new StacksMainnet();\n      case 'testnet':\n        return new StacksTestnet();\n      case 'devnet':\n        return new StacksDevnet();\n      case 'mocknet':\n        return new StacksMocknet();\n      default:\n        throw new Error(\n          `Invalid network name provided. Must be one of the following: ${StacksNetworks.join(\n            ', '\n          )}`\n        );\n    }\n  };\n\n  static fromNameOrNetwork = (network: StacksNetworkName | StacksNetwork) => {\n    if (typeof network !== 'string' && 'version' in network) {\n      return network;\n    }\n\n    return StacksNetwork.fromName(network);\n  };\n\n  isMainnet = () => this.version === TransactionVersion.Mainnet;\n  getBroadcastApiUrl = () => `${this.coreApiUrl}${this.broadcastEndpoint}`;\n  getTransferFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transferFeeEstimateEndpoint}`;\n  getTransactionFeeEstimateApiUrl = () =>\n    `${this.coreApiUrl}${this.transactionFeeEstimateEndpoint}`;\n  getAccountApiUrl = (address: string) =>\n    `${this.coreApiUrl}${this.accountEndpoint}/${address}?proof=0`;\n  getAccountExtendedBalancesApiUrl = (address: string) =>\n    `${this.coreApiUrl}/extended/v1/address/${address}/balances`;\n  getAbiApiUrl = (address: string, contract: string) =>\n    `${this.coreApiUrl}${this.contractAbiEndpoint}/${address}/${contract}`;\n  getReadOnlyFunctionCallApiUrl = (\n    contractAddress: string,\n    contractName: string,\n    functionName: string\n  ) =>\n    `${this.coreApiUrl}${\n      this.readOnlyFunctionCallEndpoint\n    }/${contractAddress}/${contractName}/${encodeURIComponent(functionName)}`;\n  getInfoUrl = () => `${this.coreApiUrl}/v2/info`;\n  getBlockTimeInfoUrl = () => `${this.coreApiUrl}/extended/v1/info/network_block_times`;\n  getPoxInfoUrl = () => `${this.coreApiUrl}/v2/pox`;\n  getRewardsUrl = (address: string, options?: any) => {\n    let url = `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}`;\n    if (options) {\n      url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n    }\n    return url;\n  };\n  getRewardsTotalUrl = (address: string) =>\n    `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}/total`;\n  getRewardHoldersUrl = (address: string, options?: any) => {\n    let url = `${this.coreApiUrl}/extended/v1/burnchain/reward_slot_holders/${address}`;\n    if (options) {\n      url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n    }\n    return url;\n  };\n  getStackerInfoUrl = (contractAddress: string, contractName: string) =>\n    `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}\n    ${contractAddress}/${contractName}/get-stacker-info`;\n  getDataVarUrl = (contractAddress: string, contractName: string, dataVarName: string) =>\n    `${this.coreApiUrl}/v2/data_var/${contractAddress}/${contractName}/${dataVarName}?proof=0`;\n  getMapEntryUrl = (contractAddress: string, contractName: string, mapName: string) =>\n    `${this.coreApiUrl}/v2/map_entry/${contractAddress}/${contractName}/${mapName}?proof=0`;\n  getNameInfo(fullyQualifiedName: string) {\n    /*\n      TODO: Update to v2 API URL for name lookups\n    */\n    const nameLookupURL = `${this.bnsLookupUrl}/v1/names/${fullyQualifiedName}`;\n    return this.fetchFn(nameLookupURL)\n      .then(resp => {\n        if (resp.status === 404) {\n          throw new Error('Name not found');\n        } else if (resp.status !== 200) {\n          throw new Error(`Bad response status: ${resp.status}`);\n        } else {\n          return resp.json();\n        }\n      })\n      .then(nameInfo => {\n        // the returned address _should_ be in the correct network ---\n        //  blockstackd gets into trouble because it tries to coerce back to mainnet\n        //  and the regtest transaction generation libraries want to use testnet addresses\n        if (nameInfo.address) {\n          return Object.assign({}, nameInfo, { address: nameInfo.address });\n        } else {\n          return nameInfo;\n        }\n      });\n  }\n}\n\n/**\n * A {@link StacksNetwork} with the parameters for the Stacks mainnet.\n * Pass a `url` option to override the default Hiro hosted Stacks node API.\n * Pass a `fetchFn` option to customize the default networking functions.\n * @example\n * ```\n * const network = new StacksMainnet();\n * const network = new StacksMainnet({ url: \"https://stacks-node-api.mainnet.stacks.co\" });\n * const network = new StacksMainnet({ fetch: createFetchFn() });\n * ```\n * @related {@link createFetchFn}, {@link createApiKeyMiddleware}\n */\nexport class StacksMainnet extends StacksNetwork {\n  version = TransactionVersion.Mainnet;\n  chainId = ChainID.Mainnet;\n\n  constructor(opts?: Partial<NetworkConfig>) {\n    super({\n      url: opts?.url ?? HIRO_MAINNET_DEFAULT,\n      fetchFn: opts?.fetchFn,\n    });\n  }\n}\n\n/**\n * A {@link StacksNetwork} with the parameters for the Stacks testnet.\n * Pass a `url` option to override the default Hiro hosted Stacks node API.\n * Pass a `fetchFn` option to customize the default networking functions.\n * @example\n * ```\n * const network = new StacksTestnet();\n * const network = new StacksTestnet({ url: \"https://stacks-node-api.testnet.stacks.co\" });\n * const network = new StacksTestnet({ fetch: createFetchFn() });\n * ```\n * @related {@link createFetchFn}, {@link createApiKeyMiddleware}\n */\nexport class StacksTestnet extends StacksNetwork {\n  version = TransactionVersion.Testnet;\n  chainId = ChainID.Testnet;\n\n  constructor(opts?: Partial<NetworkConfig>) {\n    super({\n      url: opts?.url ?? HIRO_TESTNET_DEFAULT,\n      fetchFn: opts?.fetchFn,\n    });\n  }\n}\n\n/**\n * A {@link StacksNetwork} using the testnet parameters, but `localhost:3999` as the API URL.\n */\nexport class StacksMocknet extends StacksNetwork {\n  version = TransactionVersion.Testnet;\n  chainId = ChainID.Testnet;\n\n  constructor(opts?: Partial<NetworkConfig>) {\n    super({\n      url: opts?.url ?? HIRO_MOCKNET_DEFAULT,\n      fetchFn: opts?.fetchFn,\n    });\n  }\n}\n\n/** Alias for {@link StacksMocknet} */\nexport const StacksDevnet = StacksMocknet;\n","// import { network } from './network'\n\n/**\n * @ignore\n */\nconst config = {\n  // network: network.defaults.MAINNET_DEFAULT,\n  network: {\n    layer1: 'placeholder',\n  },\n  logLevel: 'debug',\n};\n\nexport { config };\n","import { config } from './config';\n\nconst levels = ['debug', 'info', 'warn', 'error', 'none'];\n\nconst levelToInt: { [level: string]: number } = {};\nconst intToLevel: { [int: number]: string } = {};\n\nfor (let index = 0; index < levels.length; index++) {\n  const level = levels[index];\n  levelToInt[level] = index;\n  intToLevel[index] = level;\n}\n\n/**\n * @ignore\n */\nexport class Logger {\n  static error(message: string) {\n    if (!this.shouldLog('error')) return;\n    console.error(this.logMessage('error', message));\n  }\n\n  static warn(message: string) {\n    if (!this.shouldLog('warn')) return;\n    console.warn(this.logMessage('warn', message));\n  }\n\n  static info(message: string) {\n    if (!this.shouldLog('info')) return;\n    console.log(this.logMessage('info', message));\n  }\n\n  static debug(message: string) {\n    if (!this.shouldLog('debug')) return;\n    console.log(this.logMessage('debug', message));\n  }\n\n  static logMessage(level: string, message: string) {\n    return `[${level.toUpperCase()}] ${message}`;\n  }\n\n  static shouldLog(level: string) {\n    const currentLevel = levelToInt[config.logLevel];\n    return currentLevel <= levelToInt[level];\n  }\n}\n","import { Logger } from './logger';\n\n/**\n *  @ignore\n */\nexport const BLOCKSTACK_HANDLER = 'blockstack';\n\n/**\n * Time\n * @private\n * @ignore\n */\nexport function nextYear() {\n  return new Date(new Date().setFullYear(new Date().getFullYear() + 1));\n}\n\n/**\n * Time\n * @private\n * @ignore\n */\nexport function nextMonth() {\n  return new Date(new Date().setMonth(new Date().getMonth() + 1));\n}\n\n/**\n * Time\n * @private\n * @ignore\n */\nexport function nextHour() {\n  return new Date(new Date().setHours(new Date().getHours() + 1));\n}\n\n/**\n * Converts megabytes to bytes. Returns 0 if the input is not a finite number.\n * @ignore\n */\nexport function megabytesToBytes(megabytes: number): number {\n  if (!Number.isFinite(megabytes)) {\n    return 0;\n  }\n  return Math.floor(megabytes * 1024 * 1024);\n}\n\n/**\n * Calculate the AES-CBC ciphertext output byte length a given input length.\n * AES has a fixed block size of 16-bytes regardless key size.\n * @ignore\n */\nexport function getAesCbcOutputLength(inputByteLength: number) {\n  // AES-CBC block mode rounds up to the next block size.\n  const cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;\n  return cipherTextLength;\n}\n\n/**\n * Calculate the base64 encoded string length for a given input length.\n * This is equivalent to the byte length when the string is ASCII or UTF8-8\n * encoded.\n * @param number\n */\nexport function getBase64OutputLength(inputByteLength: number) {\n  const encodedLength = Math.ceil(inputByteLength / 3) * 4;\n  return encodedLength;\n}\n\n/**\n * Query Strings\n * @private\n * @ignore\n */\n\nexport function updateQueryStringParameter(uri: string, key: string, value: string) {\n  const re = new RegExp(`([?&])${key}=.*?(&|$)`, 'i');\n  const separator = uri.indexOf('?') !== -1 ? '&' : '?';\n  if (uri.match(re)) {\n    return uri.replace(re, `$1${key}=${value}$2`);\n  } else {\n    return `${uri}${separator}${key}=${value}`;\n  }\n}\n\n/**\n * Versioning\n * @param {string} v1 - the left half of the version inequality\n * @param {string} v2 - right half of the version inequality\n * @returns {bool} iff v1 >= v2\n * @private\n * @ignore\n */\n\nexport function isLaterVersion(v1: string, v2: string) {\n  if (v1 === undefined || v1 === '') {\n    v1 = '0.0.0';\n  }\n\n  if (v2 === undefined || v1 === '') {\n    v2 = '0.0.0';\n  }\n\n  const v1tuple = v1.split('.').map(x => parseInt(x, 10));\n  const v2tuple = v2.split('.').map(x => parseInt(x, 10));\n\n  for (let index = 0; index < v2.length; index++) {\n    if (index >= v1.length) {\n      v2tuple.push(0);\n    }\n    if (v1tuple[index] < v2tuple[index]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * UUIDs\n * @private\n * @ignore\n */\nexport function makeUUID4() {\n  let d = new Date().getTime();\n  if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n    d += performance.now(); // use high-precision timer if available\n  }\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n\n/**\n * Checks if both urls pass the same origin check & are absolute\n * @param  {[type]}  uri1 first uri to check\n * @param  {[type]}  uri2 second uri to check\n * @return {Boolean} true if they pass the same origin check\n * @private\n * @ignore\n */\nexport function isSameOriginAbsoluteUrl(uri1: string, uri2: string) {\n  try {\n    const parsedUri1 = new URL(uri1);\n    const parsedUri2 = new URL(uri2);\n\n    const port1 =\n      parseInt(parsedUri1.port || '0', 10) | 0 || (parsedUri1.protocol === 'https:' ? 443 : 80);\n    const port2 =\n      parseInt(parsedUri2.port || '0', 10) | 0 || (parsedUri2.protocol === 'https:' ? 443 : 80);\n\n    const match = {\n      scheme: parsedUri1.protocol === parsedUri2.protocol,\n      hostname: parsedUri1.hostname === parsedUri2.hostname,\n      port: port1 === port2,\n      absolute:\n        (uri1.includes('http://') || uri1.includes('https://')) &&\n        (uri2.includes('http://') || uri2.includes('https://')),\n    };\n\n    return match.scheme && match.hostname && match.port && match.absolute;\n  } catch (error) {\n    console.log(error);\n    console.log('Parsing error in same URL origin check');\n    // Parse error\n    return false;\n  }\n}\n\n/**\n * Returns the global scope `Window`, `WorkerGlobalScope`, or `NodeJS.Global` if available in the\n * currently executing environment.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/self\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope\n *\n * This could be switched to `globalThis` once it is standardized and widely available.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\n * @ignore\n */\nexport function getGlobalScope(): Window {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  // This function is meant to be called when accessing APIs that are typically only available in\n  // web-browser/DOM environments, but we also want to support situations where running in Node.js\n  // environment, and a polyfill was added to the Node.js `global` object scope without adding the\n  // `window` global object as well.\n  if (typeof global !== 'undefined') {\n    return global as unknown as Window;\n  }\n  throw new Error(\n    'Unexpected runtime environment - no supported global scope (`window`, `self`, `global`) available'\n  );\n}\n\nfunction getAPIUsageErrorMessage(\n  scopeObject: unknown,\n  apiName: string,\n  usageDesc?: string\n): string {\n  if (usageDesc) {\n    return `Use of '${usageDesc}' requires \\`${apiName}\\` which is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n  } else {\n    return `\\`${apiName}\\` is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n  }\n}\n\ninterface GetGlobalObjectOptions {\n  /**\n   * Throw an error if the object is not found.\n   * @default false\n   */\n  throwIfUnavailable?: boolean;\n  /**\n   * Additional information to include in an error if thrown.\n   */\n  usageDesc?: string;\n  /**\n   * If the object is not found, return an new empty object instead of undefined.\n   * Requires [[throwIfUnavailable]] to be falsey.\n   * @default false\n   */\n  returnEmptyObject?: boolean;\n}\n\n/**\n * Returns an object from the global scope (`Window` or `WorkerGlobalScope`) if it\n * is available within the currently executing environment.\n * When executing within the Node.js runtime these APIs are unavailable and will be\n * `undefined` unless the API is provided via polyfill.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/self\n * @ignore\n */\nexport function getGlobalObject<K extends Extract<keyof Window, string>>(\n  name: K,\n  { throwIfUnavailable, usageDesc, returnEmptyObject }: GetGlobalObjectOptions = {}\n): Window[K] | undefined {\n  let globalScope: Window | undefined = undefined;\n  try {\n    globalScope = getGlobalScope();\n    if (globalScope) {\n      const obj = globalScope[name];\n      if (obj) {\n        return obj;\n      }\n    }\n  } catch (error) {\n    Logger.error(`Error getting object '${name}' from global scope '${globalScope}': ${error}`);\n  }\n  if (throwIfUnavailable) {\n    const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n    Logger.error(errMsg);\n    throw new Error(errMsg);\n  }\n  if (returnEmptyObject) {\n    return {} as any;\n  }\n  return undefined;\n}\n\n/**\n * Returns a specified subset of objects from the global scope (`Window` or `WorkerGlobalScope`)\n * if they are available within the currently executing environment.\n * When executing within the Node.js runtime these APIs are unavailable will be `undefined`\n * unless the API is provided via polyfill.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/self\n * @ignore\n */\nexport function getGlobalObjects<K extends Extract<keyof Window, string>>(\n  names: K[],\n  { throwIfUnavailable, usageDesc, returnEmptyObject }: GetGlobalObjectOptions = {}\n): Pick<Window, K> {\n  let globalScope: Window | undefined;\n  try {\n    globalScope = getGlobalScope();\n  } catch (error) {\n    Logger.error(`Error getting global scope: ${error}`);\n    if (throwIfUnavailable) {\n      const errMsg = getAPIUsageErrorMessage(globalScope, names[0].toString(), usageDesc);\n      Logger.error(errMsg);\n      throw errMsg;\n    } else if (returnEmptyObject) {\n      globalScope = {} as any;\n    }\n  }\n\n  const result: Pick<Window, K> = {} as any;\n  for (let i = 0; i < names.length; i++) {\n    const name = names[i];\n    try {\n      if (globalScope) {\n        const obj = globalScope[name];\n        if (obj) {\n          result[name] = obj;\n        } else if (throwIfUnavailable) {\n          const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n          Logger.error(errMsg);\n          throw new Error(errMsg);\n        } else if (returnEmptyObject) {\n          result[name] = {} as any;\n        }\n      }\n    } catch (error) {\n      if (throwIfUnavailable) {\n        const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n        Logger.error(errMsg);\n        throw new Error(errMsg);\n      }\n    }\n  }\n  return result;\n}\n// After removing bn.js library provide backward compatibility for users passing bn.js instance\ntype BN = import('bn.js'); // Type only import from @types/bn.js\nexport type IntegerType = number | string | bigint | Uint8Array | BN;\n\nexport function intToBytes(value: IntegerType, signed: boolean, byteLength: number): Uint8Array {\n  return bigIntToBytes(intToBigInt(value, signed), byteLength);\n}\n\nexport function intToBigInt(value: IntegerType, signed: boolean): bigint {\n  let parsedValue = value;\n\n  if (typeof parsedValue === 'number') {\n    if (!Number.isInteger(parsedValue)) {\n      throw new RangeError(`Invalid value. Values of type 'number' must be an integer.`);\n    }\n    return BigInt(parsedValue);\n  }\n  if (typeof parsedValue === 'string') {\n    // If hex string then convert to bytes then fall through to the bytes condition\n    if (parsedValue.toLowerCase().startsWith('0x')) {\n      // Trim '0x' hex-prefix\n      let hex = parsedValue.slice(2);\n\n      // Allow odd-length strings like `0xf` -- some libs output these, or even just `0x${num.toString(16)}`\n      hex = hex.padStart(hex.length + (hex.length % 2), '0');\n\n      parsedValue = hexToBytes(hex);\n    } else {\n      try {\n        return BigInt(parsedValue);\n      } catch (error) {\n        if (error instanceof SyntaxError) {\n          throw new RangeError(`Invalid value. String integer '${parsedValue}' is not finite.`);\n        }\n      }\n    }\n  }\n  if (typeof parsedValue === 'bigint') {\n    return parsedValue;\n  }\n  if (parsedValue instanceof Uint8Array) {\n    if (signed) {\n      // Allow byte arrays smaller than 128-bits to be passed.\n      // This allows positive signed ints like `0x08` (8) or negative signed\n      // ints like `0xf8` (-8) to be passed without having to pad to 16 bytes.\n      const bn = fromTwos(\n        BigInt(`0x${bytesToHex(parsedValue)}`),\n        BigInt(parsedValue.byteLength * 8)\n      );\n      return BigInt(bn.toString());\n    } else {\n      return BigInt(`0x${bytesToHex(parsedValue)}`);\n    }\n  }\n  // After removing bn.js library provide backward compatibility for users passing bn.js instance\n  // For backward compatibility with bn.js check if it's a bn.js instance\n  if (\n    parsedValue != null &&\n    typeof parsedValue === 'object' &&\n    parsedValue.constructor.name === 'BN'\n  ) {\n    return BigInt(parsedValue.toString());\n  }\n  throw new TypeError(\n    `Invalid value type. Must be a number, bigint, integer-string, hex-string, or Uint8Array.`\n  );\n}\n\nexport function with0x(value: string): string {\n  return value.startsWith('0x') ? value : `0x${value}`;\n}\n\n/**\n * Converts hex input string to bigint\n * @param hex - hex input string without 0x prefix and in big endian format\n * @example \"6c7cde4d702830c1db34ef7c19e2776f59107afef39084776fc88bc78dbb9656\"\n * @ignore\n */\nexport function hexToBigInt(hex: string): bigint {\n  if (typeof hex !== 'string')\n    throw new TypeError(`hexToBigInt: expected string, got ${typeof hex}`);\n  // Big Endian\n  return BigInt(`0x${hex}`);\n}\n\n/**\n * Converts IntegerType to hex string\n * @ignore\n */\nexport function intToHex(integer: IntegerType, lengthBytes = 8): string {\n  const value = typeof integer === 'bigint' ? integer : intToBigInt(integer, false);\n  return value.toString(16).padStart(lengthBytes * 2, '0');\n}\n\n/**\n * Converts hex string to integer\n * @ignore\n */\nexport function hexToInt(hex: string): number {\n  return parseInt(hex, 16);\n}\n\n/**\n * Converts bigint to byte array\n * @param value bigint value to be converted\n * @param length byte array optional length\n * @return {Uint8Array} byte array\n */\nexport function bigIntToBytes(value: bigint, length: number = 16): Uint8Array {\n  const hex = intToHex(value, length);\n  return hexToBytes(hex);\n}\n\n/**\n * Converts from signed number to two's complement\n * MIN_VALUE = -(1 << (width - 1))\n * MAX_VALUE =  (1 << (width - 1)) - 1\n * @ignore\n */\nexport function toTwos(value: bigint, width: bigint): bigint {\n  if (\n    value < -(BigInt(1) << (width - BigInt(1))) ||\n    (BigInt(1) << (width - BigInt(1))) - BigInt(1) < value\n  ) {\n    throw `Unable to represent integer in width: ${width}`;\n  }\n  if (value >= BigInt(0)) {\n    return BigInt(value);\n  }\n  return value + (BigInt(1) << width);\n}\n\n/**\n * Returns nth bit (right-to-left, zero-indexed)\n */\nfunction nthBit(value: bigint, n: bigint) {\n  return value & (BigInt(1) << n);\n}\n\n/**\n * Converts from two's complement to signed number\n * @ignore\n */\nexport function fromTwos(value: bigint, width: bigint) {\n  if (nthBit(value, width - BigInt(1))) {\n    return value - (BigInt(1) << width);\n  }\n  return value;\n}\n\n// The following methods are based on `@noble/hashes` implementation\n// https://github.com/paulmillr/noble-hashes\n// Copyright (c) 2022 Paul Miller (https://paulmillr.com)\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the “Software”), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\nconst hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n\n/**\n * Converts bytes to the equivalent hex string\n * @example\n * ```\n * bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef])) // 'deadbeef'\n * ```\n */\nexport function bytesToHex(uint8a: Uint8Array): string {\n  // pre-caching improves the speed 6x\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n  for (const u of uint8a) {\n    hex += hexes[u];\n  }\n  return hex;\n}\n\n/**\n * Converts a hex string to the equivalent bytes\n * @example\n * ```\n * hexToBytes('deadbeef') // Uint8Array(4) [ 222, 173, 190, 239 ]\n * ```\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError(`hexToBytes: expected string, got ${typeof hex}`);\n  }\n  const paddedHex = hex.length % 2 ? `0${hex}` : hex; // left pad with a zero if odd length\n  const array = new Uint8Array(paddedHex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = paddedHex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * Converts a UTF-8 string to the equivalent bytes\n * @example\n * ```\n * utf8ToBytes('stacks Ӿ'); // Uint8Array(9) [ 115, 116, 97, 99, 107, 115, 32, 211, 190 ];\n * ```\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  return new TextEncoder().encode(str);\n}\n\n/**\n * Converts bytes to the equivalent UTF-8 string\n * @example\n * ```\n * bytesToUtf8(Uint8Array.from([115, 116, 97, 99, 107, 115, 32, 211, 190])); // 'stacks Ӿ'\n * ```\n */\nexport function bytesToUtf8(arr: Uint8Array): string {\n  return new TextDecoder().decode(arr);\n}\n\n/**\n * Converts an ASCII string to the equivalent bytes\n * @example\n * ```\n * asciiToBytes('stacks $'); // Uint8Array(8) [ 115, 116, 97, 99, 107, 115, 32, 36 ]\n * ```\n */\nexport function asciiToBytes(str: string) {\n  const byteArray = [];\n  for (let i = 0; i < str.length; i++) {\n    byteArray.push(str.charCodeAt(i) & 0xff); // ignore second bytes of UTF-16 character\n  }\n  return new Uint8Array(byteArray);\n}\n\n/**\n * Converts bytes to the equivalent ASCII string\n * @example\n * ```\n * bytesToAscii(Uint8Array.from([115, 116, 97, 99, 107, 115, 32, 36])); // 'stacks $'\n * ```\n */\nexport function bytesToAscii(arr: Uint8Array) {\n  return String.fromCharCode.apply(null, arr as any as number[]);\n}\n\nfunction isNotOctet(octet: number) {\n  return !Number.isInteger(octet) || octet < 0 || octet > 255;\n}\n\n/** @ignore */\nexport function octetsToBytes(numbers: number[]) {\n  if (numbers.some(isNotOctet)) throw new Error('Some values are invalid bytes.');\n  return new Uint8Array(numbers);\n}\n\n/** @ignore */\nexport function toBytes(data: Uint8Array | string): Uint8Array {\n  if (typeof data === 'string') return utf8ToBytes(data);\n  if (data instanceof Uint8Array) return data;\n  throw new TypeError(`Expected input type is (Uint8Array | string) but got (${typeof data})`);\n}\n\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n * @ignore\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (!arrays.every(a => a instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\n\n/** @ignore */\nexport function concatArray(elements: (Uint8Array | number[] | number)[]) {\n  return concatBytes(\n    ...elements.map(e => {\n      if (typeof e === 'number') return octetsToBytes([e]);\n      if (e instanceof Array) return octetsToBytes(e);\n      return e;\n    })\n  );\n}\n\n/**\n * Better `instanceof` check for types in different environments\n * @ignore\n */\nexport function isInstance(object: any, type: any) {\n  return object instanceof type || object?.constructor?.name?.toLowerCase() === type.name;\n}\n","/**\n * @ignore\n */\nexport const BLOCKSTACK_HANDLER = 'blockstack';\n/**\n * @ignore\n */\nexport const BLOCKSTACK_STORAGE_LABEL = 'blockstack';\n/**\n * This constant is used in the [[redirectToSignInWithAuthRequest]]\n */\nexport const DEFAULT_BLOCKSTACK_HOST = 'https://browser.blockstack.org/auth';\n\n/**\n * Default user profile object\n */\nexport const DEFAULT_PROFILE = {\n  '@type': 'Person',\n  '@context': 'http://schema.org',\n};\n\n/**\n * Non-exhaustive list of common permission scopes.\n */\nexport const enum AuthScope {\n  /**\n   * Read and write data to the user's Gaia hub in an app-specific storage bucket.\n   * This is the default scope.\n   */\n  store_write = 'store_write',\n  /**\n   * Publish data so that other users of the app can discover and interact with the user.\n   * The user's files stored on Gaia hub are made visible to others via the `apps` property in the\n   * user’s `profile.json` file.\n   */\n  publish_data = 'publish_data',\n  /**\n   * Request the user's email if available.\n   */\n  email = 'email',\n}\n\n/**\n * @ignore\n */\nexport const DEFAULT_SCOPE = [AuthScope.store_write];\n\n/**\n * @ignore\n */\nexport const BLOCKSTACK_APP_PRIVATE_KEY_LABEL = 'blockstack-transit-private-key';\n\n/**\n * @ignore\n */\nexport const DEFAULT_CORE_NODE = 'https://stacks-node-api.stacks.co';\n/**\n * @ignore\n */\nexport const NAME_LOOKUP_PATH = '/v1/names';\n/**\n * @ignore\n */\nexport const LOCALSTORAGE_SESSION_KEY = 'blockstack-session';\n","import { DEFAULT_SCOPE, DEFAULT_BLOCKSTACK_HOST, AuthScope } from './constants';\nimport { getGlobalObject } from '@stacks/common';\n\n/**\n * Configuration data for the current app.\n *\n * On browser platforms, creating an instance of this\n * class without any arguments will use\n * `window.location.origin` as the app domain.\n * On non-browser platforms, you need to\n * specify an app domain as the second argument.\n *\n */\nexport class AppConfig {\n  /**\n   * Blockstack apps are uniquely identified by their app domain.\n   *\n   */\n  appDomain?: string;\n\n  /**\n   * An array of string representing permissions requested by the app.\n   *\n   */\n  scopes: (AuthScope | string)[];\n\n  /**\n   * Path on app domain to redirect users to after authentication. The\n   * authentication response token will be postpended in a query.\n   *\n   */\n  redirectPath: string;\n\n  /**\n   * Path relative to app domain of app's manifest file.\n   *\n   * This file needs to have CORS headers set so that it can be fetched\n   * from any origin. Typically this means return the header `Access-Control-Allow-Origin: *`.\n   *\n   */\n  manifestPath: string;\n\n  /**\n   * The URL of Blockstack core node to use for this app. If this is\n   * `null`, the core node specified by the user or default core node\n   * will be used.\n   *\n   */\n  coreNode?: string;\n\n  /**\n   * The URL of a web-based Blockstack Authenticator to use in the event\n   * the user doesn't have Blockstack installed on their machine. If this\n   * is not specified, the current default in this library will be used.\n   *\n   */\n  authenticatorURL?: string;\n\n  /**\n   * @param {Array<string>} scopes - permissions this app is requesting\n   * @param {string} appDomain - the app domain\n   * @param {string} redirectPath - path on app domain to redirect users to after authentication\n   * @param {string} manifestPath - path relative to app domain of app's manifest file\n   * @param {string | undefined} coreNode - override the default or user selected core node\n   * @param {string} authenticatorURL - the web-based fall back authenticator\n   * ([[DEFAULT_BLOCKSTACK_HOST]])\n   */\n  constructor(\n    scopes: string[] = DEFAULT_SCOPE.slice(),\n    appDomain: string | undefined = getGlobalObject('location', { returnEmptyObject: true })\n      ?.origin,\n    redirectPath = '',\n    manifestPath = '/manifest.json',\n    coreNode: string | undefined = undefined,\n    authenticatorURL: string = DEFAULT_BLOCKSTACK_HOST\n  ) {\n    this.appDomain = appDomain;\n    this.scopes = scopes;\n    this.redirectPath = redirectPath;\n    this.manifestPath = manifestPath;\n    this.coreNode = coreNode;\n    this.authenticatorURL = authenticatorURL;\n  }\n\n  /**\n   * The location to which the authenticator should\n   * redirect the user.\n   * @returns {string} - URI\n   */\n  redirectURI(): string {\n    return `${this.appDomain}${this.redirectPath}`;\n  }\n\n  /**\n   * The location of the app's manifest file.\n   * @returns {string} - URI\n   */\n  manifestURI(): string {\n    return `${this.appDomain}${this.manifestPath}`;\n  }\n}\n","/**\n * @ignore\n */\nexport const ERROR_CODES = {\n  MISSING_PARAMETER: 'missing_parameter',\n  REMOTE_SERVICE_ERROR: 'remote_service_error',\n  INVALID_STATE: 'invalid_state',\n  NO_SESSION_DATA: 'no_session_data',\n  DOES_NOT_EXIST: 'does_not_exist',\n  FAILED_DECRYPTION_ERROR: 'failed_decryption_error',\n  INVALID_DID_ERROR: 'invalid_did_error',\n  NOT_ENOUGH_FUNDS_ERROR: 'not_enough_error',\n  INVALID_AMOUNT_ERROR: 'invalid_amount_error',\n  LOGIN_FAILED_ERROR: 'login_failed',\n  SIGNATURE_VERIFICATION_ERROR: 'signature_verification_failure',\n  CONFLICT_ERROR: 'conflict_error',\n  NOT_ENOUGH_PROOF_ERROR: 'not_enough_proof_error',\n  BAD_PATH_ERROR: 'bad_path_error',\n  VALIDATION_ERROR: 'validation_error',\n  PAYLOAD_TOO_LARGE_ERROR: 'payload_too_large_error',\n  PRECONDITION_FAILED_ERROR: 'precondition_failed_error',\n  UNKNOWN: 'unknown',\n};\n\nObject.freeze(ERROR_CODES);\n\n/**\n * @ignore\n */\ntype ErrorData = {\n  code: string;\n  parameter?: string;\n  message: string;\n};\n\n/**\n * @ignore\n */\nexport class BlockstackError extends Error {\n  message: string;\n\n  code: string;\n\n  parameter?: string;\n\n  constructor(error: ErrorData) {\n    super();\n    let message = error.message;\n    let bugDetails = `Error Code: ${error.code}`;\n    let stack = this.stack;\n    if (!stack) {\n      try {\n        throw new Error();\n      } catch (e: any) {\n        stack = e.stack;\n      }\n    } else {\n      bugDetails += `Stack Trace:\\n${stack}`;\n    }\n    message += `\\nIf you believe this exception is caused by a bug in stacks.js,\n      please file a bug report: https://github.com/blockstack/stacks.js/issues\\n\\n${bugDetails}`;\n    this.message = message;\n    this.code = error.code;\n    this.parameter = error.parameter ? error.parameter : undefined;\n  }\n\n  toString() {\n    return `${super.toString()}\n    code: ${this.code} param: ${this.parameter ? this.parameter : 'n/a'}`;\n  }\n}\n\n/**\n * @ignore\n */\nexport class InvalidParameterError extends BlockstackError {\n  constructor(parameter: string, message: string = '') {\n    super({ code: ERROR_CODES.MISSING_PARAMETER, message, parameter });\n    this.name = 'MissingParametersError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class MissingParameterError extends BlockstackError {\n  constructor(parameter: string, message: string = '') {\n    super({ code: ERROR_CODES.MISSING_PARAMETER, message, parameter });\n    this.name = 'MissingParametersError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class RemoteServiceError extends BlockstackError {\n  response: Response;\n\n  constructor(response: Response, message: string = '') {\n    super({ code: ERROR_CODES.REMOTE_SERVICE_ERROR, message });\n    this.response = response;\n  }\n}\n\n/**\n * @ignore\n */\nexport class InvalidDIDError extends BlockstackError {\n  constructor(message: string = '') {\n    super({ code: ERROR_CODES.INVALID_DID_ERROR, message });\n    this.name = 'InvalidDIDError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class NotEnoughFundsError extends BlockstackError {\n  leftToFund: number;\n\n  constructor(leftToFund: number) {\n    const message = `Not enough UTXOs to fund. Left to fund: ${leftToFund}`;\n    super({ code: ERROR_CODES.NOT_ENOUGH_FUNDS_ERROR, message });\n    this.leftToFund = leftToFund;\n    this.name = 'NotEnoughFundsError';\n    this.message = message;\n  }\n}\n\n/**\n * @ignore\n */\nexport class InvalidAmountError extends BlockstackError {\n  fees: number;\n\n  specifiedAmount: number;\n\n  constructor(fees: number, specifiedAmount: number) {\n    const message =\n      `Not enough coin to fund fees transaction fees. Fees would be ${fees},` +\n      ` specified spend is  ${specifiedAmount}`;\n    super({ code: ERROR_CODES.INVALID_AMOUNT_ERROR, message });\n    this.specifiedAmount = specifiedAmount;\n    this.fees = fees;\n    this.name = 'InvalidAmountError';\n    this.message = message;\n  }\n}\n\n/**\n * @ignore\n */\nexport class LoginFailedError extends BlockstackError {\n  constructor(reason: string) {\n    const message = `Failed to login: ${reason}`;\n    super({ code: ERROR_CODES.LOGIN_FAILED_ERROR, message });\n    this.message = message;\n    this.name = 'LoginFailedError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class SignatureVerificationError extends BlockstackError {\n  constructor(reason: string) {\n    const message = `Failed to verify signature: ${reason}`;\n    super({ code: ERROR_CODES.SIGNATURE_VERIFICATION_ERROR, message });\n    this.message = message;\n    this.name = 'SignatureVerificationError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class FailedDecryptionError extends BlockstackError {\n  constructor(message: string = 'Unable to decrypt cipher object.') {\n    super({ code: ERROR_CODES.FAILED_DECRYPTION_ERROR, message });\n    this.message = message;\n    this.name = 'FailedDecryptionError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class InvalidStateError extends BlockstackError {\n  constructor(message: string) {\n    super({ code: ERROR_CODES.INVALID_STATE, message });\n    this.message = message;\n    this.name = 'InvalidStateError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class NoSessionDataError extends BlockstackError {\n  constructor(message: string) {\n    super({ code: ERROR_CODES.INVALID_STATE, message });\n    this.message = message;\n    this.name = 'NoSessionDataError';\n  }\n}\n\n/**\n * @ignore\n */\nexport interface GaiaHubErrorResponse {\n  status: number;\n  statusText: string;\n  body?: string | any;\n}\n\nexport interface HubErrorDetails {\n  message?: string;\n  statusCode: number;\n  statusText: string;\n  [prop: string]: any;\n}\n\n/**\n * @ignore\n */\nexport class GaiaHubError extends BlockstackError {\n  hubError?: HubErrorDetails;\n\n  constructor(error: ErrorData, response: GaiaHubErrorResponse) {\n    super(error);\n    if (response) {\n      this.hubError = {\n        statusCode: response.status,\n        statusText: response.statusText,\n      };\n      if (typeof response.body === 'string') {\n        this.hubError.message = response.body;\n      } else if (typeof response.body === 'object') {\n        Object.assign(this.hubError, response.body);\n      }\n    }\n  }\n}\n\n/**\n * @ignore\n */\nexport class DoesNotExist extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.DOES_NOT_EXIST }, response);\n    this.name = 'DoesNotExist';\n  }\n}\n\n/**\n * @ignore\n */\nexport class ConflictError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.CONFLICT_ERROR }, response);\n    this.name = 'ConflictError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class NotEnoughProofError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.NOT_ENOUGH_PROOF_ERROR }, response);\n    this.name = 'NotEnoughProofError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class BadPathError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.BAD_PATH_ERROR }, response);\n    this.name = 'BadPathError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class ValidationError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.VALIDATION_ERROR }, response);\n    this.name = 'ValidationError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class PayloadTooLargeError extends GaiaHubError {\n  /** Can be `null` when an oversized payload is detected client-side. */\n  hubError?: HubErrorDetails;\n\n  maxUploadByteSize: number;\n\n  constructor(message: string, response: GaiaHubErrorResponse | null, maxUploadByteSize: number) {\n    super({ message, code: ERROR_CODES.PAYLOAD_TOO_LARGE_ERROR }, response!);\n    this.name = 'PayloadTooLargeError';\n    this.maxUploadByteSize = maxUploadByteSize;\n  }\n}\n\n/**\n * @ignore\n */\nexport class PreconditionFailedError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.PRECONDITION_FAILED_ERROR }, response);\n    this.name = 'PreconditionFailedError';\n  }\n}\n","import { InvalidStateError } from '@stacks/common';\nimport { UserData } from './userData';\n\nconst SESSION_VERSION = '1.0.0';\n\ntype EtagMap = { [key: string]: string };\n\nexport interface SessionOptions {\n  coreNode?: string;\n  userData?: UserData;\n  transitKey?: string;\n  etags?: EtagMap;\n  localStorageKey?: string;\n  storeOptions?: {\n    localStorageKey?: string;\n  };\n}\n\n/**\n * @ignore\n */\nexport class SessionData {\n  version: string;\n\n  transitKey?: string;\n\n  // using this in place of\n  // window.localStorage.setItem(BLOCKSTACK_STORAGE_LABEL, JSON.stringify(userData))\n  userData?: UserData;\n\n  etags?: EtagMap;\n\n  constructor(options: SessionOptions) {\n    this.version = SESSION_VERSION;\n    this.userData = options.userData;\n    this.transitKey = options.transitKey;\n    this.etags = options.etags ? options.etags : {};\n  }\n\n  // getGaiaHubConfig(): GaiaHubConfig {\n  //   return this.userData && this.userData.gaiaHubConfig\n  // }\n\n  // setGaiaHubConfig(config: GaiaHubConfig): void {\n  //   this.userData.gaiaHubConfig = config\n  // }\n\n  static fromJSON(json: any): SessionData {\n    if (json.version !== SESSION_VERSION) {\n      throw new InvalidStateError(`JSON data version ${json.version} not supported by SessionData`);\n    }\n    const options: SessionOptions = {\n      coreNode: json.coreNode,\n      userData: json.userData,\n      transitKey: json.transitKey,\n      etags: json.etags,\n    };\n    return new SessionData(options);\n  }\n\n  toString(): string {\n    return JSON.stringify(this);\n  }\n}\n","import { SessionData, SessionOptions } from './sessionData';\nimport { LOCALSTORAGE_SESSION_KEY } from './constants';\nimport { NoSessionDataError } from '@stacks/common';\n\n/**\n * An abstract class representing the SessionDataStore interface.\n\n */\nexport class SessionDataStore {\n  constructor(sessionOptions?: SessionOptions) {\n    if (sessionOptions) {\n      const newSessionData = new SessionData(sessionOptions);\n      this.setSessionData(newSessionData);\n    }\n  }\n\n  getSessionData(): SessionData {\n    throw new Error('Abstract class');\n  }\n\n  // TODO: fix, not used?\n  setSessionData(_session: SessionData): boolean {\n    throw new Error('Abstract class');\n  }\n\n  deleteSessionData(): boolean {\n    throw new Error('Abstract class');\n  }\n}\n\n/**\n * Stores session data in the instance of this class.\n * @ignore\n */\nexport class InstanceDataStore extends SessionDataStore {\n  sessionData?: SessionData;\n\n  constructor(sessionOptions?: SessionOptions) {\n    super(sessionOptions);\n    if (!this.sessionData) {\n      this.setSessionData(new SessionData({}));\n    }\n  }\n\n  getSessionData(): SessionData {\n    if (!this.sessionData) {\n      throw new NoSessionDataError('No session data was found.');\n    }\n    return this.sessionData;\n  }\n\n  setSessionData(session: SessionData): boolean {\n    this.sessionData = session;\n    return true;\n  }\n\n  deleteSessionData(): boolean {\n    this.setSessionData(new SessionData({}));\n    return true;\n  }\n}\n\n/**\n * Stores session data in browser a localStorage entry.\n * @ignore\n */\nexport class LocalStorageStore extends SessionDataStore {\n  key: string;\n\n  constructor(sessionOptions?: SessionOptions) {\n    super(sessionOptions);\n    if (\n      sessionOptions &&\n      sessionOptions.storeOptions &&\n      sessionOptions.storeOptions.localStorageKey &&\n      typeof sessionOptions.storeOptions.localStorageKey === 'string'\n    ) {\n      this.key = sessionOptions.storeOptions.localStorageKey;\n    } else {\n      this.key = LOCALSTORAGE_SESSION_KEY;\n    }\n\n    const data = localStorage.getItem(this.key);\n    if (!data) {\n      const sessionData = new SessionData({});\n      this.setSessionData(sessionData);\n    }\n  }\n\n  getSessionData(): SessionData {\n    const data = localStorage.getItem(this.key);\n    if (!data) {\n      throw new NoSessionDataError('No session data was found in localStorage');\n    }\n    const dataJSON = JSON.parse(data);\n    return SessionData.fromJSON(dataJSON);\n  }\n\n  setSessionData(session: SessionData): boolean {\n    localStorage.setItem(this.key, session.toString());\n    return true;\n  }\n\n  deleteSessionData(): boolean {\n    localStorage.removeItem(this.key);\n    this.setSessionData(new SessionData({}));\n    return true;\n  }\n}\n",null,"import { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { getPublicKey as nobleGetPublicKey, signSync, utils } from '@noble/secp256k1';\nimport {\n  bytesToHex,\n  concatBytes,\n  hexToBytes,\n  privateKeyToBytes,\n  PRIVATE_KEY_COMPRESSED_LENGTH,\n  readUInt8,\n} from '@stacks/common';\nimport base58 from 'bs58';\nimport { hashRipemd160 } from './hashRipemd160';\nimport { hashSha256Sync } from './sha2Hash';\n\nconst BITCOIN_PUBKEYHASH = 0x00;\n\n/**\n * To use secp256k1.signSync set utils.hmacSha256Sync to a function using noble-hashes\n * secp256k1.signSync is the counter part of secp256k1.sign (async version)\n * secp256k1.signSync is used within signWithKey in this file\n * secp256k1.signSync is used to maintain the semantics of signWithKey while migrating from elliptic lib\n * utils.hmacSha256Sync docs: https://github.com/paulmillr/noble-secp256k1 readme file\n */\nutils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\n/**\n * @ignore\n */\nexport function makeECPrivateKey() {\n  return bytesToHex(utils.randomPrivateKey());\n}\n\n/**\n * Based on bitcoinjs-lib MIT https://github.com/bitcoinjs/bs58check/blob/12b3e700f355c5c49d0be3f8fc29be6c66e753e9/base.js\n * @ignore\n */\nexport function base58CheckDecode(btcAddress: string): {\n  version: number;\n  hash: Uint8Array;\n} {\n  const bytes = base58.decode(btcAddress);\n  const payload = bytes.slice(0, -4);\n  const checksum = bytes.slice(-4);\n  const newChecksum = sha256(sha256(payload));\n\n  if (\n    (checksum[0] ^ newChecksum[0]) |\n    (checksum[1] ^ newChecksum[1]) |\n    (checksum[2] ^ newChecksum[2]) |\n    (checksum[3] ^ newChecksum[3])\n  ) {\n    throw new Error('Invalid checksum');\n  }\n\n  if (payload.length !== 21) throw new TypeError('Invalid address length');\n\n  const version = readUInt8(payload, 0);\n  const hash = payload.slice(1);\n\n  return { version, hash };\n}\n\n/**\n * @ignore\n */\nexport function base58Encode(hash: Uint8Array) {\n  const checksum = sha256(sha256(hash));\n  return base58.encode(concatBytes(hash, checksum).slice(0, hash.length + 4));\n}\n\n/**\n * @ignore\n */\nexport function base58CheckEncode(version: number, hash: Uint8Array) {\n  return base58Encode(concatBytes(new Uint8Array([version]), hash.slice(0, 20)));\n}\n\n/**\n * @ignore\n */\nexport function publicKeyToBtcAddress(\n  publicKey: string | Uint8Array,\n  version: number = BITCOIN_PUBKEYHASH\n) {\n  const publicKeyBytes = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n  const publicKeyHash160 = hashRipemd160(hashSha256Sync(publicKeyBytes));\n  return base58CheckEncode(version, publicKeyHash160);\n}\n\n/**\n * @ignore\n * @returns a compressed public key\n */\nexport function getPublicKeyFromPrivate(privateKey: string | Uint8Array): string {\n  const privateKeyBytes = privateKeyToBytes(privateKey);\n  // for backwards compatibility we always return a compressed public key, regardless of private key mode\n  return bytesToHex(nobleGetPublicKey(privateKeyBytes.slice(0, 32), true));\n}\n\n/**\n * @ignore\n */\nexport function ecSign(messageHash: Uint8Array, hexPrivateKey: string | Uint8Array) {\n  return signSync(messageHash, privateKeyToBytes(hexPrivateKey).slice(0, 32), {\n    der: false,\n  });\n}\n\n/**\n * @ignore\n */\nexport function isValidPrivateKey(privateKey: string | Uint8Array): boolean {\n  return utils.isValidPrivateKey(privateKeyToBytes(privateKey));\n}\n\n/**\n * @ignore\n */\nexport function compressPrivateKey(privateKey: string | Uint8Array): Uint8Array {\n  const privateKeyBytes = privateKeyToBytes(privateKey);\n\n  return privateKeyBytes.length == PRIVATE_KEY_COMPRESSED_LENGTH\n    ? privateKeyBytes // leave compressed\n    : concatBytes(privateKeyBytes, new Uint8Array([1])); // compress\n}\n","import { hexToBytes } from './utils';\n\n/**\n * @private\n * @ignore\n */\nexport function privateKeyToBytes(privateKey: string | Uint8Array): Uint8Array {\n  const privateKeyBuffer = typeof privateKey === 'string' ? hexToBytes(privateKey) : privateKey;\n\n  if (privateKeyBuffer.length != 32 && privateKeyBuffer.length != 33) {\n    throw new Error(\n      `Improperly formatted private-key. Private-key byte length should be 32 or 33. Length provided: ${privateKeyBuffer.length}`\n    );\n  }\n\n  if (privateKeyBuffer.length == 33 && privateKeyBuffer[32] !== 1) {\n    throw new Error(\n      'Improperly formatted private-key. 33 bytes indicate compressed key, but the last byte must be == 01'\n    );\n  }\n\n  return privateKeyBuffer;\n}\n","/** @ignore */\nexport function equals(a: Uint8Array, b: Uint8Array) {\n  if (a.byteLength !== b.byteLength) return false;\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\n/**\n * @ignore\n * TODO: maybe remove and use string repeat\n */\nexport function alloc(length: number, value: number) {\n  const a = new Uint8Array(length);\n  for (let i = 0; i < length; i++) {\n    a[i] = value;\n  }\n  return a;\n}\n\n/** @ignore */\nexport function readUInt16BE(source: Uint8Array, offset: number): number {\n  return ((source[offset + 0] << 8) | source[offset + 1]) >>> 0;\n}\n\n/** @ignore */\nexport function writeUInt16BE(source: Uint8Array, value: number, offset: number): void {\n  source[offset + 0] = value >>> 8;\n  source[offset + 1] = value >>> 0;\n}\n\n// The following methods are based on `microsoft/vscode` implementation\n// https://github.com/microsoft/vscode/blob/1e6ac12df197fc3e5d1c1bdb25702125cccb135a/src/vs/base/common/buffer.ts\n\n// Copyright (c) 2015 - present Microsoft Corporation\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the “Software”), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n/** @ignore */\nexport function readUInt8(source: Uint8Array, offset: number): number {\n  return source[offset];\n}\n\n/** @ignore */\nexport function writeUInt8(destination: Uint8Array, value: number, offset: number): void {\n  destination[offset] = value;\n}\n\n/** @ignore */\nexport function readUInt16LE(source: Uint8Array, offset: number): number {\n  return ((source[offset + 0] << 0) >>> 0) | ((source[offset + 1] << 8) >>> 0);\n}\n\n/** @ignore */\nexport function writeUInt16LE(destination: Uint8Array, value: number, offset: number): void {\n  destination[offset + 0] = value & 0b1111_1111;\n  value >>>= 8;\n  destination[offset + 1] = value & 0b1111_1111;\n}\n\n/** @ignore */\nexport function readUInt32BE(source: Uint8Array, offset: number): number {\n  return (\n    source[offset] * 2 ** 24 +\n    source[offset + 1] * 2 ** 16 +\n    source[offset + 2] * 2 ** 8 +\n    source[offset + 3]\n  );\n}\n\n/** @ignore */\nexport function writeUInt32BE(destination: Uint8Array, value: number, offset: number): void {\n  destination[offset + 3] = value;\n  value >>>= 8;\n  destination[offset + 2] = value;\n  value >>>= 8;\n  destination[offset + 1] = value;\n  value >>>= 8;\n  destination[offset] = value;\n}\n\n/** @ignore */\nexport function readUInt32LE(source: Uint8Array, offset: number): number {\n  return (\n    ((source[offset + 0] << 0) >>> 0) |\n    ((source[offset + 1] << 8) >>> 0) |\n    ((source[offset + 2] << 16) >>> 0) |\n    ((source[offset + 3] << 24) >>> 0)\n  );\n}\n\n/** @ignore */\nexport function writeUInt32LE(destination: Uint8Array, value: number, offset: number): void {\n  destination[offset + 0] = value & 0b1111_1111;\n  value >>>= 8;\n  destination[offset + 1] = value & 0b1111_1111;\n  value >>>= 8;\n  destination[offset + 2] = value & 0b1111_1111;\n  value >>>= 8;\n  destination[offset + 3] = value & 0b1111_1111;\n}\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ripemd160 = exports.RIPEMD160 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nclass RIPEMD160 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\nexports.RIPEMD160 = RIPEMD160;\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexports.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());\n","import { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { getCryptoLib } from './cryptoUtils';\n\ntype NodeCryptoCreateHash = typeof import('crypto').createHash;\n\nexport interface Sha2Hash {\n  digest(data: Uint8Array, algorithm?: 'sha256' | 'sha512'): Promise<Uint8Array>;\n}\n\nexport class NodeCryptoSha2Hash {\n  createHash: NodeCryptoCreateHash;\n\n  constructor(createHash: NodeCryptoCreateHash) {\n    this.createHash = createHash;\n  }\n\n  async digest(data: Uint8Array, algorithm = 'sha256'): Promise<Uint8Array> {\n    try {\n      const result = this.createHash(algorithm).update(data).digest();\n      return Promise.resolve(result);\n    } catch (error) {\n      console.log(error);\n      console.log(\n        `Error performing ${algorithm} digest with Node.js 'crypto.createHash', falling back to JS implementation.`\n      );\n      return Promise.resolve(algorithm === 'sha256' ? hashSha256Sync(data) : hashSha512Sync(data));\n    }\n  }\n}\n\nexport class WebCryptoSha2Hash implements Sha2Hash {\n  subtleCrypto: SubtleCrypto;\n\n  constructor(subtleCrypto: SubtleCrypto) {\n    this.subtleCrypto = subtleCrypto;\n  }\n\n  async digest(data: Uint8Array, algorithm = 'sha256'): Promise<Uint8Array> {\n    let algo: string;\n    if (algorithm === 'sha256') {\n      algo = 'SHA-256';\n    } else if (algorithm === 'sha512') {\n      algo = 'SHA-512';\n    } else {\n      throw new Error(`Unsupported hash algorithm ${algorithm}`);\n    }\n    try {\n      const hash = await this.subtleCrypto.digest(algo, data);\n      return new Uint8Array(hash);\n    } catch (error) {\n      console.log(error);\n      console.log(\n        `Error performing ${algorithm} digest with WebCrypto, falling back to JS implementation.`\n      );\n      return Promise.resolve(algorithm === 'sha256' ? hashSha256Sync(data) : hashSha512Sync(data));\n    }\n  }\n}\n\nexport async function createSha2Hash(): Promise<Sha2Hash> {\n  const cryptoLib = await getCryptoLib();\n  if (cryptoLib.name === 'subtleCrypto') {\n    return new WebCryptoSha2Hash(cryptoLib.lib);\n  } else {\n    return new NodeCryptoSha2Hash(cryptoLib.lib.createHash);\n  }\n}\n\nexport function hashSha256Sync(data: Uint8Array) {\n  return sha256(data);\n}\n\nexport function hashSha512Sync(data: Uint8Array) {\n  return sha512(data);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA512 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = _u64_js_1.default.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nclass SHA512 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);\n            const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);\n            const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexports.SHA512 = SHA512;\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());\nexports.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_224());\nexports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());\nexports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n","// @ts-ignore\nexport function isSubtleCryptoAvailable(): boolean {\n  return typeof crypto !== 'undefined' && typeof crypto.subtle !== 'undefined';\n}\n\nexport function isNodeCryptoAvailable<T>(\n  withFeature: (nodeCrypto: typeof import('crypto')) => boolean | T\n): false | T;\nexport function isNodeCryptoAvailable<T>(\n  withFeature?: (nodeCrypto: typeof import('crypto')) => boolean | T\n): boolean | T {\n  try {\n    const resolvedResult = require.resolve('crypto');\n    if (!resolvedResult) {\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const cryptoModule = require('crypto') as typeof import('crypto');\n    if (!cryptoModule) {\n      return false;\n    }\n    if (withFeature) {\n      const features = withFeature(cryptoModule);\n      return features;\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const NO_CRYPTO_LIB =\n  'Crypto lib not found. Either the WebCrypto \"crypto.subtle\" or Node.js \"crypto\" module must be available.';\n\nexport type TriplesecDecryptSignature = (\n  arg: { data: Uint8Array; key: Uint8Array },\n  cb: (err: Error | null, buff: Uint8Array | null) => void\n) => void;\n\nexport interface WebCryptoLib {\n  lib: SubtleCrypto;\n  name: 'subtleCrypto';\n}\n\nexport interface NodeCryptoLib {\n  lib: typeof import('crypto');\n  name: 'nodeCrypto';\n}\n\n// Make async for future version which may lazy load.\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getCryptoLib(): Promise<WebCryptoLib | NodeCryptoLib> {\n  if (isSubtleCryptoAvailable()) {\n    return {\n      lib: crypto.subtle,\n      name: 'subtleCrypto',\n    };\n  } else {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const nodeCrypto = require('crypto') as typeof import('crypto');\n      return {\n        lib: nodeCrypto,\n        name: 'nodeCrypto',\n      };\n    } catch (error) {\n      throw new Error(NO_CRYPTO_LIB);\n    }\n  }\n}\n","import { ripemd160 } from '@noble/hashes/ripemd160';\n\nexport function hashRipemd160(data: Uint8Array) {\n  return ripemd160(data);\n}\n","import { InvalidDIDError } from '@stacks/common';\n\n/**\n * @ignore\n */\nexport function makeDIDFromAddress(address: string) {\n  return `did:btc-addr:${address}`;\n}\n\n/**\n * @ignore\n */\nexport function makeDIDFromPublicKey(publicKey: string) {\n  return `did:ecdsa-pub:${publicKey}`;\n}\n\n/**\n * @ignore\n */\nexport function getDIDType(decentralizedID: string) {\n  const didParts = decentralizedID.split(':');\n\n  if (didParts.length !== 3) {\n    throw new InvalidDIDError('Decentralized IDs must have 3 parts');\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new InvalidDIDError('Decentralized IDs must start with \"did\"');\n  }\n\n  return didParts[1].toLowerCase();\n}\n\n/**\n * @ignore\n */\nexport function getAddressFromDID(decentralizedID?: string): string | undefined {\n  if (decentralizedID) {\n    const didType = getDIDType(decentralizedID);\n    if (didType === 'btc-addr') {\n      return decentralizedID.split(':')[2];\n    } else {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n\n/*\nexport function getPublicKeyOrAddressFromDID(decentralizedID) {\n  const didParts = decentralizedID.split(':')\n\n  if (didParts.length !== 3) {\n    throw new InvalidDIDError('Decentralized IDs must have 3 parts')\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new InvalidDIDError('Decentralized IDs must start with \"did\"')\n  }\n\n  if (didParts[1].toLowerCase() === 'ecdsa-pub') {\n    return didParts[2]\n  } else if (didParts[1].toLowerCase() === 'btc-addr') {\n    return didParts[2]\n  } else {\n    throw new InvalidDIDError('Decentralized ID format not supported')\n  }\n}\n*/\n","import { isSameOriginAbsoluteUrl } from '@stacks/common';\nimport { publicKeyToBtcAddress } from '@stacks/encryption';\nimport { decodeToken, TokenVerifier } from 'jsontokens';\nimport { getAddressFromDID } from './dids';\nimport { fetchAppManifest } from './provider';\n\n/**\n * Checks if the ES256k signature on passed `token` match the claimed public key\n * in the payload key `public_keys`.\n *\n * @param  {String} token encoded and signed authentication token\n * @return {Boolean} Returns `true` if the signature matches the claimed public key\n * @throws {Error} if `token` contains multiple public keys\n * @private\n * @ignore\n */\nexport function doSignaturesMatchPublicKeys(token: string): boolean {\n  const payload = decodeToken(token).payload;\n  if (typeof payload === 'string') {\n    throw new Error('Unexpected token payload type of string');\n  }\n  const publicKeys = payload.public_keys as string[];\n  if (publicKeys.length === 1) {\n    const publicKey = publicKeys[0];\n    try {\n      const tokenVerifier = new TokenVerifier('ES256k', publicKey);\n      return tokenVerifier.verify(token);\n    } catch (e) {\n      return false;\n    }\n  } else {\n    throw new Error('Multiple public keys are not supported');\n  }\n}\n\n/**\n * Makes sure that the identity address portion of\n * the decentralized identifier passed in the issuer `iss`\n * key of the token matches the public key\n *\n * @param  {String} token encoded and signed authentication token\n * @return {Boolean} if the identity address and public keys match\n * @throws {Error} if ` token` has multiple public keys\n * @private\n * @ignore\n */\nexport function doPublicKeysMatchIssuer(token: string): boolean {\n  const payload = decodeToken(token).payload;\n  if (typeof payload === 'string') {\n    throw new Error('Unexpected token payload type of string');\n  }\n  const publicKeys = payload.public_keys as string[];\n  const addressFromIssuer = getAddressFromDID(payload.iss);\n\n  if (publicKeys.length === 1) {\n    const addressFromPublicKeys = publicKeyToBtcAddress(publicKeys[0]);\n    if (addressFromPublicKeys === addressFromIssuer) {\n      return true;\n    }\n  } else {\n    throw new Error('Multiple public keys are not supported');\n  }\n\n  return false;\n}\n\n/**\n * Checks if the if the token issuance time and date is after the\n * current time and date.\n *\n * @param  {String}  token encoded and signed authentication token\n * @return {Boolean} `true` if the token was issued after the current time,\n * otherwise returns `false`\n * @private\n * @ignore\n */\nexport function isIssuanceDateValid(token: string) {\n  const payload = decodeToken(token).payload;\n  if (typeof payload === 'string') {\n    throw new Error('Unexpected token payload type of string');\n  }\n  if (payload.iat) {\n    if (typeof payload.iat !== 'number') {\n      return false;\n    }\n    const issuedAt = new Date(payload.iat * 1000); // JWT times are in seconds\n    if (new Date().getTime() < issuedAt.getTime()) {\n      return false;\n    } else {\n      return true;\n    }\n  } else {\n    return true;\n  }\n}\n\n/**\n * Checks if the expiration date of the `token` is before the current time\n * @param  {String}  token encoded and signed authentication token\n * @return {Boolean} `true` if the `token` has not yet expired, `false`\n * if the `token` has expired\n *\n * @private\n * @ignore\n */\nexport function isExpirationDateValid(token: string) {\n  const payload = decodeToken(token).payload;\n  if (typeof payload === 'string') {\n    throw new Error('Unexpected token payload type of string');\n  }\n  if (payload.exp) {\n    if (typeof payload.exp !== 'number') {\n      return false;\n    }\n    const expiresAt = new Date(payload.exp * 1000); // JWT times are in seconds\n    if (new Date().getTime() > expiresAt.getTime()) {\n      return false;\n    } else {\n      return true;\n    }\n  } else {\n    return true;\n  }\n}\n\n/**\n * Makes sure the `manifest_uri` is a same origin absolute URL.\n * @param  {String}  token encoded and signed authentication token\n * @return {Boolean} `true` if valid, otherwise `false`\n * @private\n * @ignore\n */\nexport function isManifestUriValid(token: string) {\n  const payload = decodeToken(token).payload;\n  if (typeof payload === 'string') {\n    throw new Error('Unexpected token payload type of string');\n  }\n  return isSameOriginAbsoluteUrl(payload.domain_name as string, payload.manifest_uri as string);\n}\n\n/**\n * Makes sure the `redirect_uri` is a same origin absolute URL.\n * @param  {String}  token encoded and signed authentication token\n * @return {Boolean} `true` if valid, otherwise `false`\n * @private\n * @ignore\n */\nexport function isRedirectUriValid(token: string) {\n  const payload = decodeToken(token).payload;\n  if (typeof payload === 'string') {\n    throw new Error('Unexpected token payload type of string');\n  }\n  return isSameOriginAbsoluteUrl(payload.domain_name as string, payload.redirect_uri as string);\n}\n\n/**\n * Verify authentication request is valid. This function performs a number\n * of checks on the authentication request token:\n * * Checks that `token` has a valid issuance date & is not expired\n * * Checks that `token` has a valid signature that matches the public key it claims\n * * Checks that both the manifest and redirect URLs are absolute and conform to\n * the same origin policy\n *\n * @param  {String} token encoded and signed authentication request token\n * @return {Promise} that resolves to true if the auth request\n *  is valid and false if it does not. It rejects with a String if the\n *  token is not signed\n * @private\n * @ignore\n */\nexport async function verifyAuthRequest(token: string): Promise<boolean> {\n  if (decodeToken(token).header.alg === 'none') {\n    throw new Error('Token must be signed in order to be verified');\n  }\n  const values = await Promise.all([\n    isExpirationDateValid(token),\n    isIssuanceDateValid(token),\n    doSignaturesMatchPublicKeys(token),\n    doPublicKeysMatchIssuer(token),\n    isManifestUriValid(token),\n    isRedirectUriValid(token),\n  ]);\n  return values.every(val => val);\n}\n\n/**\n * Verify the authentication request is valid and\n * fetch the app manifest file if valid. Otherwise, reject the promise.\n * @param  {String} token encoded and signed authentication request token\n * @return {Promise} that resolves to the app manifest file in JSON format\n * or rejects if the auth request or app manifest file is invalid\n * @private\n * @ignore\n */\nexport async function verifyAuthRequestAndLoadManifest(token: string): Promise<any> {\n  const valid = await verifyAuthRequest(token);\n  if (!valid) {\n    throw new Error('Token is an invalid auth request');\n  }\n  return fetchAppManifest(token);\n}\n\n/**\n * Verify the authentication response is valid.\n * @param {String} token the authentication response token\n * @return {Promise} that resolves to true if auth response\n * is valid and false if it does not\n * @private\n * @ignore\n */\nexport async function verifyAuthResponse(token: string): Promise<boolean> {\n  const conditions = await Promise.all([\n    isExpirationDateValid(token),\n    isIssuanceDateValid(token),\n    doSignaturesMatchPublicKeys(token),\n    doPublicKeysMatchIssuer(token),\n  ]);\n  return conditions.every(val => val);\n}\n","import { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport {\n  getPublicKey,\n  getSharedSecret,\n  Point,\n  Signature,\n  signSync,\n  utils,\n  verify,\n} from '@noble/secp256k1';\nimport {\n  bigIntToBytes,\n  bytesToHex,\n  bytesToUtf8,\n  concatBytes,\n  FailedDecryptionError,\n  hexToBigInt,\n  hexToBytes,\n  parseRecoverableSignatureVrs,\n  signatureRsvToVrs,\n  utf8ToBytes,\n} from '@stacks/common';\nimport { fromByteArray, toByteArray } from 'base64-js';\nimport { createCipher } from './aesCipher';\nimport { getPublicKeyFromPrivate } from './keys';\nimport { encodeMessage, hashMessage } from './messageSignature';\nimport { hashSha256Sync, hashSha512Sync } from './sha2Hash';\nimport { getAesCbcOutputLength, getBase64OutputLength } from './utils';\n\n/**\n * To use secp256k1.signSync set utils.hmacSha256Sync to a function using noble-hashes\n * secp256k1.signSync is the counter part of secp256k1.sign (async version)\n * secp256k1.signSync is used within signECDSA in this file\n * secp256k1.signSync is used to maintain the semantics of signECDSA while migrating from elliptic lib\n * utils.hmacSha256Sync docs: https://github.com/paulmillr/noble-secp256k1 readme file\n */\nutils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\n/**\n * Controls how the encrypted data bytes will be encoded as a string in the JSON payload.\n * Options:\n *    `hex` -- the legacy default, file size increase 100% (2x).\n *    `base64` -- file size increased ~33%.\n * @ignore\n */\nexport type CipherTextEncoding = 'hex' | 'base64';\n\n/**\n * @ignore\n */\nexport type CipherObject = {\n  iv: string;\n  ephemeralPK: string;\n  cipherText: string;\n  /** If undefined then hex encoding is used for the `cipherText` string. */\n  cipherTextEncoding?: CipherTextEncoding;\n  mac: string;\n  wasString: boolean;\n};\n\n/**\n * @ignore\n */\nexport type SignedCipherObject = {\n  /** Hex encoded DER signature (up to 144 chars) */\n  signature: string;\n  /** Hex encoded public key (66 char length) */\n  publicKey: string;\n  /** The stringified json of a `CipherObject` */\n  cipherText: string;\n};\n\n/**\n * @ignore\n */\nexport enum InvalidPublicKeyReason {\n  InvalidFormat = 'InvalidFormat',\n  IsNotPoint = 'IsNotPoint',\n}\n\n/**\n * @ignore\n */\nexport async function aes256CbcEncrypt(\n  iv: Uint8Array,\n  key: Uint8Array,\n  plaintext: Uint8Array\n): Promise<Uint8Array> {\n  const cipher = await createCipher();\n  return await cipher.encrypt('aes-256-cbc', key, iv, plaintext);\n}\n\n/**\n * @ignore\n */\nasync function aes256CbcDecrypt(\n  iv: Uint8Array,\n  key: Uint8Array,\n  ciphertext: Uint8Array\n): Promise<Uint8Array> {\n  const cipher = await createCipher();\n  return await cipher.decrypt('aes-256-cbc', key, iv, ciphertext);\n}\n\n/**\n * @ignore\n */\nexport function hmacSha256(key: Uint8Array, content: Uint8Array): Uint8Array {\n  return hmac(sha256, key, content);\n}\n\n/**\n * @ignore\n */\nfunction equalsConstTime(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  let res = 0;\n  for (let i = 0; i < a.length; i++) {\n    res |= a[i] ^ b[i];\n  }\n  return res === 0;\n}\n\n/**\n * @ignore\n */\nfunction sharedSecretToKeys(sharedSecret: Uint8Array): {\n  encryptionKey: Uint8Array;\n  hmacKey: Uint8Array;\n} {\n  // generate mac and encryption key from shared secret\n  const hashedSecret = hashSha512Sync(sharedSecret);\n  return {\n    encryptionKey: hashedSecret.slice(0, 32),\n    hmacKey: hashedSecret.slice(32),\n  };\n}\n\n/**\n * @ignore\n */\nfunction allHexChars(maybe: string): boolean {\n  return maybe.match(/^[0-9a-f]+$/i) !== null;\n}\n\n/**\n * @ignore\n */\nfunction isValidPublicKey(pub: string): {\n  result: boolean;\n  reason: string | null;\n  reason_data: string | null;\n} {\n  const invalidFormat = {\n    result: false,\n    reason_data: 'Invalid public key format',\n    reason: InvalidPublicKeyReason.InvalidFormat,\n  };\n  const invalidPoint = {\n    result: false,\n    reason_data: 'Public key is not a point',\n    reason: InvalidPublicKeyReason.IsNotPoint,\n  };\n  if (pub.length !== 66 && pub.length !== 130) return invalidFormat;\n\n  const firstByte = pub.slice(0, 2);\n\n  // uncompressed public key\n  if (pub.length === 130 && firstByte !== '04') return invalidFormat;\n\n  // compressed public key\n  if (pub.length === 66 && firstByte !== '02' && firstByte !== '03') return invalidFormat;\n\n  if (!allHexChars(pub)) return invalidFormat;\n\n  try {\n    // Converts public key to Point\n    const point = Point.fromHex(pub);\n\n    // Verify point on curve is valid if it conforms to equation\n    // Validate the public key\n    // Throws: Point is not on elliptic curve if point is not on curve\n    point.assertValidity();\n\n    // Validation passed\n    return {\n      result: true,\n      reason_data: null,\n      reason: null,\n    };\n  } catch (e) {\n    return invalidPoint;\n  }\n}\n\n/**\n * Hex encodes a 32-byte bigint instance.\n * The result string is zero padded and always 64 characters in length.\n * @ignore\n */\nexport function getHexFromBN(bnInput: bigint): string {\n  const hexOut = bnInput.toString(16);\n  if (hexOut.length === 64) {\n    return hexOut;\n  } else if (hexOut.length < 64) {\n    // pad with leading zeros\n    // the padStart function would require node 9\n    const padding = '0'.repeat(64 - hexOut.length);\n    return `${padding}${hexOut}`;\n  } else {\n    throw new Error('Generated a > 32-byte BN for encryption. Failing.');\n  }\n}\n\n/**\n * Converts to zero padded 32 bytes\n * @ignore\n */\nexport function getBytesFromBN(bnInput: bigint): Uint8Array {\n  // todo: remove method?\n  const result = bigIntToBytes(bnInput, 32);\n  if (result.byteLength !== 32) {\n    throw new Error('Failed to generate a 32-byte Uint8Array');\n  }\n  return result;\n}\n\n/**\n * Get details about the JSON envelope size overhead for ciphertext payloads.\n * @ignore\n */\nexport function getCipherObjectWrapper(opts: {\n  wasString: boolean;\n  cipherTextEncoding: CipherTextEncoding;\n}): {\n  /** The stringified JSON string of an empty `CipherObject`. */\n  payloadShell: string;\n  /** Total string length of all the `CipherObject` values that always have constant lengths. */\n  payloadValuesLength: number;\n} {\n  // Placeholder structure of the ciphertext payload, used to determine the\n  // stringified JSON overhead length.\n  const shell: CipherObject = {\n    iv: '',\n    ephemeralPK: '',\n    mac: '',\n    cipherText: '',\n    wasString: !!opts.wasString,\n  };\n  if (opts.cipherTextEncoding === 'base64') {\n    shell.cipherTextEncoding = 'base64';\n  }\n  // Hex encoded 16 bytes.\n  const ivLength = 32;\n  // Hex encoded, compressed EC pubkey of 33 bytes.\n  const ephemeralPKLength = 66;\n  // Hex encoded 32 byte hmac-sha256.\n  const macLength = 64;\n  return {\n    payloadValuesLength: ivLength + ephemeralPKLength + macLength,\n    payloadShell: JSON.stringify(shell),\n  };\n}\n\n/**\n * Get details about the JSON envelope size overhead for signed ciphertext payloads.\n * @param payloadShell - The JSON stringified empty `CipherObject`\n * @ignore\n */\nexport function getSignedCipherObjectWrapper(payloadShell: string): {\n  /** The stringified JSON string of an empty `SignedCipherObject`. */\n  signedPayloadValuesLength: number;\n  /** Total string length of all the `SignedCipherObject` values\n   * that always have constant lengths */\n  signedPayloadShell: string;\n} {\n  // Placeholder structure of the signed ciphertext payload, used to determine the\n  // stringified JSON overhead length.\n  const shell: SignedCipherObject = {\n    signature: '',\n    publicKey: '',\n    cipherText: payloadShell,\n  };\n  // Hex encoded DER signature, up to 72 byte length.\n  const signatureLength = 144;\n  // Hex encoded 33 byte public key.\n  const publicKeyLength = 66;\n  return {\n    signedPayloadValuesLength: signatureLength + publicKeyLength,\n    signedPayloadShell: JSON.stringify(shell),\n  };\n}\n\n/**\n * Fast function that determines the final ASCII string byte length of the\n * JSON stringified ECIES encrypted payload.\n * @ignore\n */\nexport function eciesGetJsonStringLength(opts: {\n  contentLength: number;\n  wasString: boolean;\n  sign: boolean;\n  cipherTextEncoding: CipherTextEncoding;\n}): number {\n  const { payloadShell, payloadValuesLength } = getCipherObjectWrapper(opts);\n\n  // Calculate the AES output length given the input length.\n  const cipherTextLength = getAesCbcOutputLength(opts.contentLength);\n\n  // Get the encoded string length of the cipherText.\n  let encodedCipherTextLength: number;\n  if (!opts.cipherTextEncoding || opts.cipherTextEncoding === 'hex') {\n    encodedCipherTextLength = cipherTextLength * 2;\n  } else if (opts.cipherTextEncoding === 'base64') {\n    encodedCipherTextLength = getBase64OutputLength(cipherTextLength);\n  } else {\n    throw new Error(`Unexpected cipherTextEncoding \"${opts.cipherTextEncoding}\"`);\n  }\n\n  if (!opts.sign) {\n    // Add the length of the JSON envelope, ciphertext length, and length of const values.\n    return payloadShell.length + payloadValuesLength + encodedCipherTextLength;\n  } else {\n    // Get the signed version of the JSON envelope\n    const { signedPayloadShell, signedPayloadValuesLength } =\n      getSignedCipherObjectWrapper(payloadShell);\n    // Add length of the JSON envelope, ciphertext length, and length of the const values.\n    return (\n      signedPayloadShell.length +\n      signedPayloadValuesLength +\n      payloadValuesLength +\n      encodedCipherTextLength\n    );\n  }\n}\n\n// todo: simplify and remove wasstring\n/**\n * Encrypt content to elliptic curve publicKey using ECIES\n * @param publicKey - secp256k1 public key hex string\n * @param content - content to encrypt\n * @return Object containing:\n *  iv (initialization vector, hex encoding),\n *  cipherText (cipher text either hex or base64 encoded),\n *  mac (message authentication code, hex encoded),\n *  ephemeral public key (hex encoded),\n *  wasString (boolean indicating with or not to return a Uint8Array or string on decrypt)\n * @ignore\n */\nexport async function encryptECIES(\n  publicKey: string,\n  content: Uint8Array,\n  wasString: boolean,\n  cipherTextEncoding?: CipherTextEncoding\n): Promise<CipherObject> {\n  const validity = isValidPublicKey(publicKey);\n  if (!validity.result) {\n    throw validity;\n  }\n  const ephemeralPrivateKey = utils.randomPrivateKey();\n  const ephemeralPublicKey = getPublicKey(ephemeralPrivateKey, true);\n  let sharedSecret = getSharedSecret(ephemeralPrivateKey, publicKey, true);\n  // Trim the compressed mode prefix byte\n  sharedSecret = sharedSecret.slice(1);\n  const sharedKeys = sharedSecretToKeys(sharedSecret);\n  const initializationVector = utils.randomBytes(16);\n\n  const cipherText = await aes256CbcEncrypt(\n    initializationVector,\n    sharedKeys.encryptionKey,\n    content\n  );\n\n  const macData = concatBytes(initializationVector, ephemeralPublicKey, cipherText);\n  const mac = hmacSha256(sharedKeys.hmacKey, macData);\n\n  let cipherTextString: string;\n\n  if (!cipherTextEncoding || cipherTextEncoding === 'hex') {\n    cipherTextString = bytesToHex(cipherText);\n  } else if (cipherTextEncoding === 'base64') {\n    cipherTextString = fromByteArray(cipherText);\n  } else {\n    throw new Error(`Unexpected cipherTextEncoding \"${cipherTextEncoding}\"`);\n  }\n\n  const result: CipherObject = {\n    iv: bytesToHex(initializationVector),\n    ephemeralPK: bytesToHex(ephemeralPublicKey),\n    cipherText: cipherTextString,\n    mac: bytesToHex(mac),\n    wasString,\n  };\n  if (cipherTextEncoding && cipherTextEncoding !== 'hex') {\n    result.cipherTextEncoding = cipherTextEncoding;\n  }\n  return result;\n}\n\n/**\n * Decrypt content encrypted using ECIES\n * @param {String} privateKey - secp256k1 private key hex string\n * @param {Object} cipherObject - object to decrypt, should contain:\n *  iv (initialization vector), cipherText (cipher text),\n *  mac (message authentication code), ephemeralPublicKey\n *  wasString (boolean indicating with or not to return bytes or string on decrypt)\n * @return {Uint8Array} plaintext\n * @throws {FailedDecryptionError} if unable to decrypt\n * @ignore\n */\nexport async function decryptECIES(\n  privateKey: string,\n  cipherObject: CipherObject\n): Promise<Uint8Array | string> {\n  if (!cipherObject.ephemeralPK) {\n    throw new FailedDecryptionError(\n      'Unable to get public key from cipher object. ' +\n        'You might be trying to decrypt an unencrypted object.'\n    );\n  }\n  const ephemeralPK = cipherObject.ephemeralPK;\n  let sharedSecret = getSharedSecret(privateKey, ephemeralPK, true);\n  // Trim the compressed mode prefix byte\n  sharedSecret = sharedSecret.slice(1);\n  const sharedKeys = sharedSecretToKeys(sharedSecret);\n  const ivBytes = hexToBytes(cipherObject.iv);\n\n  let cipherTextBytes: Uint8Array;\n\n  if (!cipherObject.cipherTextEncoding || cipherObject.cipherTextEncoding === 'hex') {\n    cipherTextBytes = hexToBytes(cipherObject.cipherText);\n  } else if (cipherObject.cipherTextEncoding === 'base64') {\n    cipherTextBytes = toByteArray(cipherObject.cipherText);\n  } else {\n    throw new Error(`Unexpected cipherTextEncoding \"${cipherObject.cipherText}\"`);\n  }\n\n  const macData = concatBytes(ivBytes, hexToBytes(ephemeralPK), cipherTextBytes);\n  const actualMac = hmacSha256(sharedKeys.hmacKey, macData);\n  const expectedMac = hexToBytes(cipherObject.mac);\n\n  if (!equalsConstTime(expectedMac, actualMac)) {\n    throw new FailedDecryptionError('Decryption failed: failure in MAC check');\n  }\n  const plainText = await aes256CbcDecrypt(ivBytes, sharedKeys.encryptionKey, cipherTextBytes);\n\n  if (cipherObject.wasString) {\n    return bytesToUtf8(plainText);\n  }\n  return plainText;\n}\n\n/**\n * Sign content using ECDSA\n *\n * @param {string} privateKey - secp256k1 private key hex string\n * @param {string | Uint8Array} content - content to sign\n * @return {Object} contains:\n * signature - Hex encoded DER signature\n * public key - Hex encoded private string taken from privateKey\n * @ignore\n */\nexport function signECDSA(\n  privateKey: string,\n  content: string | Uint8Array\n): {\n  publicKey: string;\n  signature: string;\n} {\n  const contentBytes = typeof content === 'string' ? utf8ToBytes(content) : content;\n  const publicKey = getPublicKeyFromPrivate(privateKey);\n  const contentHash = hashSha256Sync(contentBytes);\n  const signature = signSync(contentHash, privateKey);\n\n  return {\n    signature: bytesToHex(signature),\n    publicKey,\n  };\n}\n\n/**\n * Verify content using ECDSA\n * @param {String | Uint8Array} content - Content to verify was signed\n * @param {String} publicKey - secp256k1 private key hex string\n * @param {String} signature - Hex encoded DER signature\n * @return {Boolean} returns true when signature matches publickey + content, false if not\n * @ignore\n */\nexport function verifyECDSA(\n  content: string | Uint8Array,\n  publicKey: string,\n  signature: string\n): boolean {\n  const contentBytes = typeof content === 'string' ? utf8ToBytes(content) : content;\n  const contentHash = hashSha256Sync(contentBytes);\n  // verify() is strict: true by default. High-s signatures are rejected, which mirrors libsecp behavior\n  // Set verify options to strict: false, to support the legacy stacks implementations\n  // Reference: https://github.com/paulmillr/noble-secp256k1/releases/tag/1.4.0\n  return verify(signature, contentHash, publicKey, { strict: false });\n}\n\ninterface VerifyMessageSignatureArgs {\n  signature: string;\n  message: string | Uint8Array;\n  publicKey: string;\n}\n\n/**\n * Verify message signature (VRS format) with recoverable public key\n * @deprecated The Clarity compatible {@link verifyMessageSignatureRsv} is preferred\n */\nexport function verifyMessageSignature({\n  signature,\n  message,\n  publicKey,\n}: VerifyMessageSignatureArgs): boolean {\n  // todo: remove method and pull body to `verifyMessageSignatureRsv`\n  const { r, s } = parseRecoverableSignatureVrs(signature);\n  const sig = new Signature(hexToBigInt(r), hexToBigInt(s));\n  const hashedMsg = typeof message === 'string' ? hashMessage(message) : message;\n  // verify() is strict: true by default. High-s signatures are rejected, which mirrors libsecp behavior\n  // Set verify options to strict: false, to support the legacy stacks implementations\n  // Reference: https://github.com/paulmillr/noble-secp256k1/releases/tag/1.4.0\n  const verificationResult = verify(sig, hashedMsg, publicKey, { strict: false });\n\n  // Additional Check for Legacy Prefix ++++++++++++++++++++++++++++++++++++++++\n  if (verificationResult || typeof message !== 'string') return verificationResult;\n\n  const LEGACY_PREFIX = '\\x18Stacks Message Signing:\\n';\n  const legacyHash = sha256(encodeMessage(message, LEGACY_PREFIX));\n  return verify(sig, legacyHash, publicKey, { strict: false });\n  // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n}\n\n/**\n * Verifies a Clarity compatible signed message using a public key. The\n * `signature` option needs to be in RSV format.\n */\nexport function verifyMessageSignatureRsv({\n  signature,\n  message,\n  publicKey,\n}: VerifyMessageSignatureArgs): boolean {\n  return verifyMessageSignature({\n    signature: signatureRsvToVrs(signature),\n    message,\n    publicKey,\n  });\n}\n","import { hexToInt } from './utils';\n\nconst COORDINATE_BYTES = 32;\n\n/** @ignore */\nexport function parseRecoverableSignatureVrs(signature: string) {\n  // todo: prefer RSV format or add format options of message signing functions\n  if (signature.length < COORDINATE_BYTES * 2 * 2 + 1) {\n    throw new Error('Invalid signature');\n  }\n  const recoveryIdHex = signature.slice(0, 2);\n  const r = signature.slice(2, 2 + COORDINATE_BYTES * 2);\n  const s = signature.slice(2 + COORDINATE_BYTES * 2);\n  return {\n    recoveryId: hexToInt(recoveryIdHex),\n    r,\n    s,\n  };\n}\n\n/** @ignore */\nexport function signatureVrsToRsv(signature: string) {\n  return signature.slice(2) + signature.slice(0, 2);\n}\n\n/** @ignore */\nexport function signatureRsvToVrs(signature: string) {\n  return signature.slice(-2) + signature.slice(0, -2);\n}\n","import { concatBytes } from '@stacks/common';\nimport { getCryptoLib } from './cryptoUtils';\n\ntype NodeCryptoCreateCipher = typeof import('crypto').createCipheriv;\ntype NodeCryptoCreateDecipher = typeof import('crypto').createDecipheriv;\n\nexport type CipherAlgorithm = 'aes-256-cbc' | 'aes-128-cbc';\n\nexport interface AesCipher {\n  encrypt(\n    algorithm: CipherAlgorithm,\n    key: Uint8Array,\n    iv: Uint8Array,\n    data: Uint8Array\n  ): Promise<Uint8Array>;\n\n  decrypt(\n    algorithm: CipherAlgorithm,\n    key: Uint8Array,\n    iv: Uint8Array,\n    data: Uint8Array\n  ): Promise<Uint8Array>;\n}\n\nexport class NodeCryptoAesCipher implements AesCipher {\n  createCipher: NodeCryptoCreateCipher;\n\n  createDecipher: NodeCryptoCreateDecipher;\n\n  constructor(createCipher: NodeCryptoCreateCipher, createDecipher: NodeCryptoCreateDecipher) {\n    this.createCipher = createCipher;\n    this.createDecipher = createDecipher;\n  }\n\n  async encrypt(\n    algorithm: CipherAlgorithm,\n    key: Uint8Array,\n    iv: Uint8Array,\n    data: Uint8Array\n  ): Promise<Uint8Array> {\n    if (algorithm !== 'aes-128-cbc' && algorithm !== 'aes-256-cbc') {\n      throw new Error(`Unsupported cipher algorithm \"${algorithm}\"`);\n    }\n    const cipher = this.createCipher(algorithm, key, iv);\n    const result = new Uint8Array(concatBytes(cipher.update(data), cipher.final()));\n    return Promise.resolve(result);\n  }\n\n  async decrypt(\n    algorithm: CipherAlgorithm,\n    key: Uint8Array,\n    iv: Uint8Array,\n    data: Uint8Array\n  ): Promise<Uint8Array> {\n    if (algorithm !== 'aes-128-cbc' && algorithm !== 'aes-256-cbc') {\n      throw new Error(`Unsupported cipher algorithm \"${algorithm}\"`);\n    }\n    const cipher = this.createDecipher(algorithm, key, iv);\n    const result = new Uint8Array(concatBytes(cipher.update(data), cipher.final()));\n    return Promise.resolve(result);\n  }\n}\n\nexport class WebCryptoAesCipher implements AesCipher {\n  subtleCrypto: SubtleCrypto;\n\n  constructor(subtleCrypto: SubtleCrypto) {\n    this.subtleCrypto = subtleCrypto;\n  }\n\n  async encrypt(\n    algorithm: CipherAlgorithm,\n    key: Uint8Array,\n    iv: Uint8Array,\n    data: Uint8Array\n  ): Promise<Uint8Array> {\n    let algo: string;\n    let length: number;\n    if (algorithm === 'aes-128-cbc') {\n      algo = 'AES-CBC';\n      length = 128;\n    } else if (algorithm === 'aes-256-cbc') {\n      algo = 'AES-CBC';\n      length = 256;\n    } else {\n      throw new Error(`Unsupported cipher algorithm \"${algorithm}\"`);\n    }\n    const cryptoKey = await this.subtleCrypto.importKey('raw', key, { name: algo, length }, false, [\n      'encrypt',\n    ]);\n    const result = await this.subtleCrypto.encrypt({ name: algo, iv }, cryptoKey, data);\n    return new Uint8Array(result);\n  }\n\n  async decrypt(\n    algorithm: CipherAlgorithm,\n    key: Uint8Array,\n    iv: Uint8Array,\n    data: Uint8Array\n  ): Promise<Uint8Array> {\n    let algo: string;\n    let length: number;\n    if (algorithm === 'aes-128-cbc') {\n      algo = 'AES-CBC';\n      length = 128;\n    } else if (algorithm === 'aes-256-cbc') {\n      algo = 'AES-CBC';\n      length = 256;\n    } else {\n      throw new Error(`Unsupported cipher algorithm \"${algorithm}\"`);\n    }\n    const cryptoKey = await this.subtleCrypto.importKey('raw', key, { name: algo, length }, false, [\n      'decrypt',\n    ]);\n    const result = await this.subtleCrypto.decrypt({ name: algo, iv }, cryptoKey, data);\n    return new Uint8Array(result);\n  }\n}\n\nexport async function createCipher(): Promise<AesCipher> {\n  const cryptoLib = await getCryptoLib();\n  if (cryptoLib.name === 'subtleCrypto') {\n    return new WebCryptoAesCipher(cryptoLib.lib);\n  }\n  return new NodeCryptoAesCipher(cryptoLib.lib.createCipheriv, cryptoLib.lib.createDecipheriv);\n}\n","import { sha256 } from '@noble/hashes/sha256';\nimport { concatBytes, utf8ToBytes } from '@stacks/common';\nimport { decode, encode, encodingLength } from './varuint';\n\n// 'Stacks Signed Message:\\n'.length === 23\n// 'Stacks Signed Message:\\n'.length.toString(16) === 17\nconst chainPrefix = '\\x17Stacks Signed Message:\\n';\n\nexport function hashMessage(message: string, prefix: string = chainPrefix): Uint8Array {\n  return sha256(encodeMessage(message, prefix));\n}\n\nexport function encodeMessage(\n  message: string | Uint8Array,\n  prefix: string = chainPrefix\n): Uint8Array {\n  const messageBytes = typeof message == 'string' ? utf8ToBytes(message) : message;\n  const encodedLength = encode(messageBytes.length);\n  return concatBytes(utf8ToBytes(prefix), encodedLength, messageBytes);\n}\n\nexport function decodeMessage(\n  encodedMessage: Uint8Array,\n  prefix: string = chainPrefix\n): Uint8Array {\n  // Remove the chain prefix\n  const prefixByteLength = utf8ToBytes(prefix).byteLength;\n  const messageWithoutChainPrefix = encodedMessage.subarray(prefixByteLength);\n  const decoded = decode(messageWithoutChainPrefix);\n  const varIntLength = encodingLength(decoded);\n  // Remove the varint prefix\n  return messageWithoutChainPrefix.slice(varIntLength);\n}\n","import { Signature, verify } from '@noble/secp256k1';\n\nexport { Signature, verify as verifySignature };\n\n/**\n * Calculate the AES-CBC ciphertext output byte length a given input length.\n * AES has a fixed block size of 16-bytes regardless key size.\n * @ignore\n */\nexport function getAesCbcOutputLength(inputByteLength: number) {\n  // AES-CBC block mode rounds up to the next block size.\n  const cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;\n  return cipherTextLength;\n}\n\n/**\n * Calculate the base64 encoded string length for a given input length.\n * This is equivalent to the byte length when the string is ASCII or UTF8-8\n * encoded.\n * @param number\n */\nexport function getBase64OutputLength(inputByteLength: number) {\n  const encodedLength = Math.ceil(inputByteLength / 3) * 4;\n  return encodedLength;\n}\n\n/**\n *\n * @ignore\n */\nexport function hashCode(string: string) {\n  let hash = 0;\n  if (string.length === 0) return hash;\n  for (let i = 0; i < string.length; i++) {\n    const character = string.charCodeAt(i);\n    hash = (hash << 5) - hash + character;\n    hash &= hash;\n  }\n  return hash & 0x7fffffff;\n}\n","import {\n  bytesToHex,\n  bytesToUtf8,\n  getGlobalObject,\n  hexToBytes,\n  makeUUID4,\n  nextMonth,\n  utf8ToBytes,\n} from '@stacks/common';\nimport {\n  decryptECIES,\n  encryptECIES,\n  makeECPrivateKey,\n  publicKeyToBtcAddress,\n} from '@stacks/encryption';\nimport { SECP256K1Client, TokenSigner } from 'jsontokens';\nimport { AuthScope, DEFAULT_SCOPE } from './constants';\nimport { makeDIDFromAddress } from './dids';\n\nconst VERSION = '1.4.0';\n\ntype AuthMetadata = {\n  email?: string;\n  profileUrl?: string;\n};\n\n/**\n * Generates a ECDSA keypair to\n * use as the ephemeral app transit private key\n * @param {SessionData} session - session object in which key will be stored\n * @return {String} the hex encoded private key\n * @private\n * @ignore\n */\nexport function generateTransitKey() {\n  const transitKey = makeECPrivateKey();\n  return transitKey;\n}\n\n/** @deprecated {@link makeAuthRequest} was renamed to {@link makeAuthRequestToken} */\nexport const makeAuthRequest = makeAuthRequestToken;\n\n/**\n * Generates an authentication request that can be sent to the Blockstack\n * browser for the user to approve sign in. This authentication request can\n * then be used for sign in by passing it to the `redirectToSignInWithAuthRequest`\n * method.\n *\n * *Note: This method should only be used if you want to roll your own authentication\n * flow. Typically you'd use `redirectToSignIn` which takes care of this\n * under the hood.*\n *\n * @param  {String} transitPrivateKey - hex encoded transit private key\n * @param {String} redirectURI - location to redirect user to after sign in approval\n * @param {String} manifestURI - location of this app's manifest file\n * @param {(AuthScope | string)[]} scopes - the permissions this app is requesting\n * @param {String} appDomain - the origin of this app\n * @param {Number} expiresAt - the time at which this request is no longer valid\n * @param {Object} extraParams - Any extra parameters you'd like to pass to the authenticator.\n * Use this to pass options that aren't part of the Blockstack auth spec, but might be supported\n * by special authenticators.\n * @return {String} the authentication request\n */\nexport function makeAuthRequestToken(\n  transitPrivateKey: string,\n  redirectURI?: string,\n  manifestURI?: string,\n  scopes: (AuthScope | string)[] = DEFAULT_SCOPE.slice(),\n  appDomain?: string,\n  expiresAt: number = nextMonth().getTime(),\n  extraParams: any = {}\n): string {\n  const getWindowOrigin = (paramName: string) => {\n    const location = getGlobalObject('location', {\n      throwIfUnavailable: true,\n      usageDesc: `makeAuthRequest([${paramName}=undefined])`,\n    });\n    return location?.origin;\n  };\n\n  if (!redirectURI) {\n    redirectURI = `${getWindowOrigin('redirectURI')}/`;\n  }\n  if (!manifestURI) {\n    manifestURI = `${getWindowOrigin('manifestURI')}/manifest.json`;\n  }\n  if (!appDomain) {\n    appDomain = getWindowOrigin('appDomain');\n  }\n\n  /* Create the payload */\n  const payload = Object.assign({}, extraParams, {\n    jti: makeUUID4(),\n    iat: Math.floor(new Date().getTime() / 1000), // JWT times are in seconds\n    exp: Math.floor(expiresAt / 1000), // JWT times are in seconds\n    iss: null,\n    public_keys: [],\n    domain_name: appDomain,\n    manifest_uri: manifestURI,\n    redirect_uri: redirectURI,\n    version: VERSION,\n    do_not_include_profile: true,\n    supports_hub_url: true,\n    scopes,\n  });\n\n  // Logger.info(`blockstack.js: generating v${VERSION} auth request`)\n\n  /* Convert the private key to a public key to an issuer */\n  const publicKey = SECP256K1Client.derivePublicKey(transitPrivateKey);\n  payload.public_keys = [publicKey];\n  const address = publicKeyToBtcAddress(publicKey);\n  payload.iss = makeDIDFromAddress(address);\n\n  /* Sign and return the token */\n  const tokenSigner = new TokenSigner('ES256k', transitPrivateKey);\n  const token = tokenSigner.sign(payload);\n\n  return token;\n}\n\n/**\n * Encrypts the private key for decryption by the given\n * public key.\n * @param  {String} publicKey  [description]\n * @param  {String} privateKey [description]\n * @return {String} hex encoded ciphertext\n * @private\n * @ignore\n */\nexport async function encryptPrivateKey(publicKey: string, privateKey: string): Promise<string> {\n  const encryptedObj = await encryptECIES(publicKey, utf8ToBytes(privateKey), true);\n  const encryptedJSON = JSON.stringify(encryptedObj);\n  return bytesToHex(utf8ToBytes(encryptedJSON));\n}\n\n/**\n * Decrypts the hex encrypted private key\n * @param  {String} privateKey  the private key corresponding to the public\n * key for which the ciphertext was encrypted\n * @param  {String} hexedEncrypted the ciphertext\n * @return {String}  the decrypted private key\n * @throws {Error} if unable to decrypt\n *\n * @private\n * @ignore\n */\nexport async function decryptPrivateKey(\n  privateKey: string,\n  hexedEncrypted: string\n): Promise<string | null> {\n  const unhexedString = bytesToUtf8(hexToBytes(hexedEncrypted));\n  const encryptedObj = JSON.parse(unhexedString);\n  const decrypted = await decryptECIES(privateKey, encryptedObj);\n  if (typeof decrypted !== 'string') {\n    throw new Error('Unable to correctly decrypt private key');\n  } else {\n    return decrypted;\n  }\n}\n\n/**\n * Generates a signed authentication response token for an app. This\n * token is sent back to apps which use contents to access the\n * resources and data requested by the app.\n *\n * @param  {String} privateKey the identity key of the Blockstack ID generating\n * the authentication response\n * @param  {Object} profile the profile object for the Blockstack ID\n * @param  {AuthMetadata} metadata an object containing metadata sent as part of the authentication\n * response including `email` if requested and available and a URL to the profile\n * @param  {String} coreToken core session token when responding to a legacy auth request\n * or `null` for current direct to gaia authentication requests\n * @param  {String} appPrivateKey the application private key. This private key is\n * unique and specific for every Blockstack ID and application combination.\n * @param  {Number} expiresAt an integer in the same format as\n * `new Date().getTime()`, milliseconds since the Unix epoch\n * @param {String} transitPublicKey the public key provide by the app\n * in its authentication request with which secrets will be encrypted\n * @param {String} hubUrl URL to the write path of the user's Gaia hub\n * @param {String} blockstackAPIUrl URL to the API endpoint to use\n * @param {String} associationToken JWT that binds the app key to the identity key\n * @return {String} signed and encoded authentication response token\n * @private\n * @ignore\n */\nexport async function makeAuthResponse(\n  privateKey: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  profile: {} = {},\n  metadata: AuthMetadata | null,\n  coreToken: string | null = null,\n  appPrivateKey: string | null = null,\n  expiresAt: number = nextMonth().getTime(),\n  transitPublicKey: string | null = null,\n  hubUrl: string | null = null,\n  blockstackAPIUrl: string | null = null,\n  associationToken: string | null = null,\n  appPrivateKeyFromWalletSalt: string | null = null\n): Promise<string> {\n  /* Convert the private key to a public key to an issuer */\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n  const address = publicKeyToBtcAddress(publicKey);\n\n  /* See if we should encrypt with the transit key */\n  let privateKeyPayload = appPrivateKey;\n  let coreTokenPayload = coreToken;\n  let additionalProperties = {};\n  if (appPrivateKey !== undefined && appPrivateKey !== null) {\n    // Logger.info(`blockstack.js: generating v${VERSION} auth response`)\n    if (transitPublicKey !== undefined && transitPublicKey !== null) {\n      privateKeyPayload = await encryptPrivateKey(transitPublicKey, appPrivateKey);\n      if (coreToken !== undefined && coreToken !== null) {\n        coreTokenPayload = await encryptPrivateKey(transitPublicKey, coreToken);\n      }\n    }\n    additionalProperties = {\n      email: metadata?.email ? metadata.email : null,\n      profile_url: metadata?.profileUrl ? metadata.profileUrl : null,\n      hubUrl,\n      blockstackAPIUrl,\n      associationToken,\n      version: VERSION,\n    };\n  } else {\n    // Logger.info('blockstack.js: generating legacy auth response')\n  }\n\n  /* Create the payload */\n  const payload = Object.assign(\n    {},\n    {\n      jti: makeUUID4(),\n      iat: Math.floor(new Date().getTime() / 1000), // JWT times are in seconds\n      exp: Math.floor(expiresAt / 1000), // JWT times are in seconds\n      iss: makeDIDFromAddress(address),\n      private_key: privateKeyPayload,\n      public_keys: [publicKey],\n      appPrivateKeyFromWalletSalt,\n      profile,\n      core_token: coreTokenPayload,\n    },\n    additionalProperties\n  );\n\n  /* Sign and return the token */\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  return tokenSigner.sign(payload);\n}\n","import { utf8ToBytes } from '@stacks/common';\nimport {\n  CipherTextEncoding,\n  decryptECIES,\n  encryptECIES,\n  signECDSA,\n  SignedCipherObject,\n} from './ec';\nimport { getPublicKeyFromPrivate } from './keys';\n\nexport interface EncryptionOptions {\n  /**\n   * If set to `true` the data is signed using ECDSA on SHA256 hashes with the user's\n   * app private key. If a string is specified, it is used as the private key instead\n   * of the user's app private key.\n   * @default false\n   */\n  sign?: boolean | string;\n  /**\n   * String encoding format for the cipherText bytes.\n   * Currently defaults to 'hex' for legacy backwards-compatibility.\n   * Only used if the `encrypt` option is also used.\n   * Note: in the future this should default to 'base64' for the significant\n   * file size reduction.\n   */\n  cipherTextEncoding?: CipherTextEncoding;\n  /**\n   * Specifies if the original unencrypted content is a ASCII or UTF-8 string.\n   * For example stringified JSON.\n   * If true, then when the ciphertext is decrypted, it will be returned as\n   * a `string` type variable, otherwise will be returned as bytes.\n   */\n  wasString?: boolean;\n}\n\n/**\n * Specify encryption options, and whether to sign the ciphertext.\n */\nexport interface EncryptContentOptions extends EncryptionOptions {\n  /**\n   * Encrypt the data with this key.\n   */\n  publicKey?: string;\n  /**\n   * Encrypt the data with the public key corresponding to the supplied private key\n   */\n  privateKey?: string;\n}\n\n/**\n * Encrypts the data provided with the app public key.\n * @param {string | Uint8Array} content - data to encrypt\n * @param {Object} [options=null] - options object\n * @param {String} options.publicKey - the hex string of the ECDSA public\n * key to use for encryption. If not provided, will use user's appPublicKey.\n * @return {String} Stringified ciphertext object\n */\nexport async function encryptContent(\n  content: string | Uint8Array,\n  options?: EncryptContentOptions\n): Promise<string> {\n  const opts = Object.assign({}, options);\n  let privateKey: string | undefined;\n  if (!opts.publicKey) {\n    if (!opts.privateKey) {\n      throw new Error('Either public key or private key must be supplied for encryption.');\n    }\n    opts.publicKey = getPublicKeyFromPrivate(opts.privateKey);\n  }\n  const wasString =\n    typeof opts.wasString === 'boolean' ? opts.wasString : typeof content === 'string';\n  const contentBytes = typeof content === 'string' ? utf8ToBytes(content) : content;\n  const cipherObject = await encryptECIES(\n    opts.publicKey,\n    contentBytes,\n    wasString,\n    opts.cipherTextEncoding\n  );\n  let cipherPayload = JSON.stringify(cipherObject);\n  if (opts.sign) {\n    if (typeof opts.sign === 'string') {\n      privateKey = opts.sign;\n    } else if (!privateKey) {\n      privateKey = opts.privateKey;\n    }\n    const signatureObject = signECDSA(privateKey!, cipherPayload);\n    const signedCipherObject: SignedCipherObject = {\n      signature: signatureObject.signature,\n      publicKey: signatureObject.publicKey,\n      cipherText: cipherPayload,\n    };\n    cipherPayload = JSON.stringify(signedCipherObject);\n  }\n  return cipherPayload;\n}\n\n/**\n * Decrypts data encrypted with `encryptContent` with the\n * transit private key.\n * @param {string | Uint8Array} content - encrypted content.\n * @param {Object} [options=null] - options object\n * @param {string} options.privateKey - the hex string of the ECDSA private\n * key to use for decryption. If not provided, will use user's appPrivateKey.\n * @return {string | Uint8Array} decrypted content.\n */\nexport function decryptContent(\n  content: string,\n  options?: {\n    privateKey?: string;\n  }\n): Promise<string | Uint8Array> {\n  const opts = Object.assign({}, options);\n  if (!opts.privateKey) {\n    throw new Error('Private key is required for decryption.');\n  }\n\n  try {\n    const cipherObject = JSON.parse(content);\n    return decryptECIES(opts.privateKey, cipherObject);\n  } catch (err) {\n    if (err instanceof SyntaxError) {\n      throw new Error(\n        'Failed to parse encrypted content JSON. The content may not ' +\n          'be encrypted. If using getFile, try passing { decrypt: false }.'\n      );\n    } else {\n      throw err;\n    }\n  }\n}\n","import { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport {\n  getPublicKey as nobleGetPublicKey,\n  Point,\n  Signature,\n  signSync,\n  utils,\n} from '@noble/secp256k1';\nimport {\n  bytesToHex,\n  concatArray,\n  hexToBigInt,\n  hexToBytes,\n  intToHex,\n  parseRecoverableSignatureVrs,\n  privateKeyToBytes,\n  PRIVATE_KEY_COMPRESSED_LENGTH,\n  signatureRsvToVrs,\n  signatureVrsToRsv,\n} from '@stacks/common';\nimport { c32address } from 'c32check';\nimport { BytesReader } from './bytesReader';\nimport {\n  addressFromVersionHash,\n  addressHashModeToVersion,\n  addressToString,\n  createMessageSignature,\n  MessageSignature,\n} from './common';\nimport {\n  AddressHashMode,\n  AddressVersion,\n  COMPRESSED_PUBKEY_LENGTH_BYTES,\n  PubKeyEncoding,\n  StacksMessageType,\n  TransactionVersion,\n  UNCOMPRESSED_PUBKEY_LENGTH_BYTES,\n} from './constants';\nimport { hash160, hashP2PKH } from './utils';\n\n/**\n * To use secp256k1.signSync set utils.hmacSha256Sync to a function using noble-hashes\n * secp256k1.signSync is the counter part of secp256k1.sign (async version)\n * secp256k1.signSync is used within signWithKey in this file\n * secp256k1.signSync is used to maintain the semantics of signWithKey while migrating from elliptic lib\n * utils.hmacSha256Sync docs: https://github.com/paulmillr/noble-secp256k1 readme file\n */\nutils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport interface StacksPublicKey {\n  readonly type: StacksMessageType.PublicKey;\n  readonly data: Uint8Array;\n}\n\n/** Creates a P2PKH address string from the given private key and tx version. */\nexport function getAddressFromPrivateKey(\n  /** Private key bytes or hex string */\n  privateKey: string | Uint8Array,\n  transactionVersion = TransactionVersion.Mainnet\n): string {\n  const pubKey = pubKeyfromPrivKey(privateKey);\n  return getAddressFromPublicKey(pubKey.data, transactionVersion);\n}\n\n/** Creates a P2PKH address string from the given public key and tx version. */\nexport function getAddressFromPublicKey(\n  /** Public key bytes or hex string */\n  publicKey: string | Uint8Array,\n  transactionVersion = TransactionVersion.Mainnet\n): string {\n  publicKey = typeof publicKey === 'string' ? publicKey : bytesToHex(publicKey);\n  const addrVer = addressHashModeToVersion(AddressHashMode.SerializeP2PKH, transactionVersion);\n  const addr = addressFromVersionHash(addrVer, hashP2PKH(hexToBytes(publicKey)));\n  const addrString = addressToString(addr);\n  return addrString;\n}\n\nexport function createStacksPublicKey(key: string): StacksPublicKey {\n  return {\n    type: StacksMessageType.PublicKey,\n    data: hexToBytes(key),\n  };\n}\n\nexport function publicKeyFromSignatureVrs(\n  messageHash: string,\n  messageSignature: MessageSignature,\n  pubKeyEncoding = PubKeyEncoding.Compressed\n): string {\n  const parsedSignature = parseRecoverableSignatureVrs(messageSignature.data);\n  const signature = new Signature(hexToBigInt(parsedSignature.r), hexToBigInt(parsedSignature.s));\n  const point = Point.fromSignature(messageHash, signature, parsedSignature.recoveryId);\n  const compressed = pubKeyEncoding === PubKeyEncoding.Compressed;\n  return point.toHex(compressed);\n}\n\nexport function publicKeyFromSignatureRsv(\n  messageHash: string,\n  messageSignature: MessageSignature,\n  pubKeyEncoding = PubKeyEncoding.Compressed\n): string {\n  return publicKeyFromSignatureVrs(\n    messageHash,\n    { ...messageSignature, data: signatureRsvToVrs(messageSignature.data) },\n    pubKeyEncoding\n  );\n}\n\nexport function publicKeyFromBytes(data: Uint8Array): StacksPublicKey {\n  return { type: StacksMessageType.PublicKey, data };\n}\n\nexport function isCompressed(key: StacksPublicKey): boolean {\n  return !bytesToHex(key.data).startsWith('04');\n}\n\nexport function publicKeyToString(key: StacksPublicKey): string {\n  return bytesToHex(key.data);\n}\n\nexport function serializePublicKey(key: StacksPublicKey): Uint8Array {\n  return key.data.slice();\n}\n\nexport function pubKeyfromPrivKey(privateKey: string | Uint8Array): StacksPublicKey {\n  const privKey = createStacksPrivateKey(privateKey);\n  const publicKey = nobleGetPublicKey(privKey.data.slice(0, 32), privKey.compressed);\n  return createStacksPublicKey(bytesToHex(publicKey));\n}\n\nexport function compressPublicKey(publicKey: string | Uint8Array): StacksPublicKey {\n  const hex = typeof publicKey === 'string' ? publicKey : bytesToHex(publicKey);\n  const compressed = Point.fromHex(hex).toHex(true);\n  return createStacksPublicKey(compressed);\n}\n\nexport function deserializePublicKey(bytesReader: BytesReader): StacksPublicKey {\n  const fieldId = bytesReader.readUInt8();\n  const keyLength =\n    fieldId !== 4 ? COMPRESSED_PUBKEY_LENGTH_BYTES : UNCOMPRESSED_PUBKEY_LENGTH_BYTES;\n  return publicKeyFromBytes(concatArray([fieldId, bytesReader.readBytes(keyLength)]));\n}\n\nexport interface StacksPrivateKey {\n  // \"compressed\" private key is a misnomer: https://web.archive.org/web/20220131144208/https://www.oreilly.com/library/view/mastering-bitcoin/9781491902639/ch04.html#comp_priv\n  // it actually means: should public keys be generated as \"compressed\" or \"uncompressed\" from this private key\n  compressed: boolean;\n  data: Uint8Array;\n}\n\nexport function createStacksPrivateKey(key: string | Uint8Array): StacksPrivateKey {\n  const data = privateKeyToBytes(key);\n  const compressed = data.length == PRIVATE_KEY_COMPRESSED_LENGTH;\n  return { data, compressed };\n}\n\nexport function makeRandomPrivKey(): StacksPrivateKey {\n  return createStacksPrivateKey(utils.randomPrivateKey());\n}\n\n/**\n * @deprecated The Clarity compatible {@link signMessageHashRsv} is preferred, but differs in signature format\n * @returns A recoverable signature (in VRS order)\n */\nexport function signWithKey(privateKey: StacksPrivateKey, messageHash: string): MessageSignature {\n  const [rawSignature, recoveryId] = signSync(messageHash, privateKey.data.slice(0, 32), {\n    canonical: true,\n    recovered: true,\n  });\n  if (recoveryId == null) {\n    throw new Error('No signature recoveryId received');\n  }\n  const recoveryIdHex = intToHex(recoveryId, 1);\n  const recoverableSignatureString = recoveryIdHex + Signature.fromHex(rawSignature).toCompactHex(); // V + RS\n  return createMessageSignature(recoverableSignatureString);\n}\n\n/**\n * Signs a message using a private key. The resulting signature along with the\n * original message can be verified using {@link verifyMessageSignatureRsv}\n * @returns A recoverable signature (in RSV order)\n */\nexport function signMessageHashRsv({\n  messageHash,\n  privateKey,\n}: {\n  messageHash: string;\n  privateKey: StacksPrivateKey;\n}): MessageSignature {\n  const messageSignature = signWithKey(privateKey, messageHash);\n  return { ...messageSignature, data: signatureVrsToRsv(messageSignature.data) };\n}\n\nexport function getPublicKey(privateKey: StacksPrivateKey): StacksPublicKey {\n  return pubKeyfromPrivKey(privateKey.data);\n}\n\nexport function privateKeyToString(privateKey: StacksPrivateKey): string {\n  return bytesToHex(privateKey.data);\n}\n\nexport function publicKeyToAddress(version: AddressVersion, publicKey: StacksPublicKey): string {\n  return c32address(version, bytesToHex(hash160(publicKey.data)));\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b58ToC32 = exports.c32ToB58 = exports.versions = exports.c32normalize = exports.c32addressDecode = exports.c32address = exports.c32checkDecode = exports.c32checkEncode = exports.c32decode = exports.c32encode = void 0;\nconst encoding_1 = require(\"./encoding\");\nObject.defineProperty(exports, \"c32encode\", { enumerable: true, get: function () { return encoding_1.c32encode; } });\nObject.defineProperty(exports, \"c32decode\", { enumerable: true, get: function () { return encoding_1.c32decode; } });\nObject.defineProperty(exports, \"c32normalize\", { enumerable: true, get: function () { return encoding_1.c32normalize; } });\nconst checksum_1 = require(\"./checksum\");\nObject.defineProperty(exports, \"c32checkEncode\", { enumerable: true, get: function () { return checksum_1.c32checkEncode; } });\nObject.defineProperty(exports, \"c32checkDecode\", { enumerable: true, get: function () { return checksum_1.c32checkDecode; } });\nconst address_1 = require(\"./address\");\nObject.defineProperty(exports, \"c32address\", { enumerable: true, get: function () { return address_1.c32address; } });\nObject.defineProperty(exports, \"c32addressDecode\", { enumerable: true, get: function () { return address_1.c32addressDecode; } });\nObject.defineProperty(exports, \"c32ToB58\", { enumerable: true, get: function () { return address_1.c32ToB58; } });\nObject.defineProperty(exports, \"b58ToC32\", { enumerable: true, get: function () { return address_1.b58ToC32; } });\nObject.defineProperty(exports, \"versions\", { enumerable: true, get: function () { return address_1.versions; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32decode = exports.c32normalize = exports.c32encode = exports.c32 = void 0;\nconst utils_1 = require(\"@noble/hashes/utils\");\nexports.c32 = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\nconst hex = '0123456789abcdef';\n/**\n * Encode a hex string as a c32 string.  Note that the hex string is assumed\n * to be big-endian (and the resulting c32 string will be as well).\n * @param {string} inputHex - the input to encode\n * @param {number} minLength - the minimum length of the c32 string\n * @returns {string} the c32check-encoded representation of the data, as a string\n */\nfunction c32encode(inputHex, minLength) {\n    // must be hex\n    if (!inputHex.match(/^[0-9a-fA-F]*$/)) {\n        throw new Error('Not a hex-encoded string');\n    }\n    if (inputHex.length % 2 !== 0) {\n        inputHex = `0${inputHex}`;\n    }\n    inputHex = inputHex.toLowerCase();\n    let res = [];\n    let carry = 0;\n    for (let i = inputHex.length - 1; i >= 0; i--) {\n        if (carry < 4) {\n            const currentCode = hex.indexOf(inputHex[i]) >> carry;\n            let nextCode = 0;\n            if (i !== 0) {\n                nextCode = hex.indexOf(inputHex[i - 1]);\n            }\n            // carry = 0, nextBits is 1, carry = 1, nextBits is 2\n            const nextBits = 1 + carry;\n            const nextLowBits = nextCode % (1 << nextBits) << (5 - nextBits);\n            const curC32Digit = exports.c32[currentCode + nextLowBits];\n            carry = nextBits;\n            res.unshift(curC32Digit);\n        }\n        else {\n            carry = 0;\n        }\n    }\n    let C32leadingZeros = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== '0') {\n            break;\n        }\n        else {\n            C32leadingZeros++;\n        }\n    }\n    res = res.slice(C32leadingZeros);\n    const zeroPrefix = new TextDecoder().decode((0, utils_1.hexToBytes)(inputHex)).match(/^\\u0000*/);\n    const numLeadingZeroBytesInHex = zeroPrefix ? zeroPrefix[0].length : 0;\n    for (let i = 0; i < numLeadingZeroBytesInHex; i++) {\n        res.unshift(exports.c32[0]);\n    }\n    if (minLength) {\n        const count = minLength - res.length;\n        for (let i = 0; i < count; i++) {\n            res.unshift(exports.c32[0]);\n        }\n    }\n    return res.join('');\n}\nexports.c32encode = c32encode;\n/*\n * Normalize a c32 string\n * @param {string} c32input - the c32-encoded input string\n * @returns {string} the canonical representation of the c32 input string\n */\nfunction c32normalize(c32input) {\n    // must be upper-case\n    // replace all O's with 0's\n    // replace all I's and L's with 1's\n    return c32input.toUpperCase().replace(/O/g, '0').replace(/L|I/g, '1');\n}\nexports.c32normalize = c32normalize;\n/*\n * Decode a c32 string back into a hex string.  Note that the c32 input\n * string is assumed to be big-endian (and the resulting hex string will\n * be as well).\n * @param {string} c32input - the c32-encoded input to decode\n * @param {number} minLength - the minimum length of the output hex string (in bytes)\n * @returns {string} the hex-encoded representation of the data, as a string\n */\nfunction c32decode(c32input, minLength) {\n    c32input = c32normalize(c32input);\n    // must result in a c32 string\n    if (!c32input.match(`^[${exports.c32}]*$`)) {\n        throw new Error('Not a c32-encoded string');\n    }\n    const zeroPrefix = c32input.match(`^${exports.c32[0]}*`);\n    const numLeadingZeroBytes = zeroPrefix ? zeroPrefix[0].length : 0;\n    let res = [];\n    let carry = 0;\n    let carryBits = 0;\n    for (let i = c32input.length - 1; i >= 0; i--) {\n        if (carryBits === 4) {\n            res.unshift(hex[carry]);\n            carryBits = 0;\n            carry = 0;\n        }\n        const currentCode = exports.c32.indexOf(c32input[i]) << carryBits;\n        const currentValue = currentCode + carry;\n        const currentHexDigit = hex[currentValue % 16];\n        carryBits += 1;\n        carry = currentValue >> 4;\n        if (carry > 1 << carryBits) {\n            throw new Error('Panic error in decoding.');\n        }\n        res.unshift(currentHexDigit);\n    }\n    // one last carry\n    res.unshift(hex[carry]);\n    if (res.length % 2 === 1) {\n        res.unshift('0');\n    }\n    let hexLeadingZeros = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== '0') {\n            break;\n        }\n        else {\n            hexLeadingZeros++;\n        }\n    }\n    res = res.slice(hexLeadingZeros - (hexLeadingZeros % 2));\n    let hexStr = res.join('');\n    for (let i = 0; i < numLeadingZeroBytes; i++) {\n        hexStr = `00${hexStr}`;\n    }\n    if (minLength) {\n        const count = minLength * 2 - hexStr.length;\n        for (let i = 0; i < count; i += 2) {\n            hexStr = `00${hexStr}`;\n        }\n    }\n    return hexStr;\n}\nexports.c32decode = c32decode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32checkDecode = exports.c32checkEncode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst encoding_1 = require(\"./encoding\");\n/**\n * Get the c32check checksum of a hex-encoded string\n * @param {string} dataHex - the hex string\n * @returns {string} the c32 checksum, as a bin-encoded string\n */\nfunction c32checksum(dataHex) {\n    const dataHash = (0, sha256_1.sha256)((0, sha256_1.sha256)((0, utils_1.hexToBytes)(dataHex)));\n    const checksum = (0, utils_1.bytesToHex)(dataHash.slice(0, 4));\n    return checksum;\n}\n/**\n * Encode a hex string as a c32check string.  This is a lot like how\n * base58check works in Bitcoin-land, but this algorithm uses the\n * z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * calculate the c32checksum of version + data\n * * c32encode version + data + c32checksum\n * @param {number} version - the version string (between 0 and 31)\n * @param {string} data - the data to encode\n * @returns {string} the c32check representation\n */\nfunction c32checkEncode(version, data) {\n    if (version < 0 || version >= 32) {\n        throw new Error('Invalid version (must be between 0 and 31)');\n    }\n    if (!data.match(/^[0-9a-fA-F]*$/)) {\n        throw new Error('Invalid data (not a hex string)');\n    }\n    data = data.toLowerCase();\n    if (data.length % 2 !== 0) {\n        data = `0${data}`;\n    }\n    let versionHex = version.toString(16);\n    if (versionHex.length === 1) {\n        versionHex = `0${versionHex}`;\n    }\n    const checksumHex = c32checksum(`${versionHex}${data}`);\n    const c32str = (0, encoding_1.c32encode)(`${data}${checksumHex}`);\n    return `${encoding_1.c32[version]}${c32str}`;\n}\nexports.c32checkEncode = c32checkEncode;\n/*\n * Decode a c32check string back into its version and data payload.  This is\n * a lot like how base58check works in Bitcoin-land, but this algorithm uses\n * the z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * extract the version, data, and checksum\n * * verify the checksum matches c32checksum(version + data)\n * * return data\n * @param {string} c32data - the c32check-encoded string\n * @returns {array} [version (number), data (string)].  The returned data\n * will be a hex string.  Throws an exception if the checksum does not match.\n */\nfunction c32checkDecode(c32data) {\n    c32data = (0, encoding_1.c32normalize)(c32data);\n    const dataHex = (0, encoding_1.c32decode)(c32data.slice(1));\n    const versionChar = c32data[0];\n    const version = encoding_1.c32.indexOf(versionChar);\n    const checksum = dataHex.slice(-8);\n    let versionHex = version.toString(16);\n    if (versionHex.length === 1) {\n        versionHex = `0${versionHex}`;\n    }\n    if (c32checksum(`${versionHex}${dataHex.substring(0, dataHex.length - 8)}`) !== checksum) {\n        throw new Error('Invalid c32check string: checksum mismatch');\n    }\n    return [version, dataHex.substring(0, dataHex.length - 8)];\n}\nexports.c32checkDecode = c32checkDecode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32ToB58 = exports.b58ToC32 = exports.c32addressDecode = exports.c32address = exports.versions = void 0;\nconst checksum_1 = require(\"./checksum\");\nconst base58check = require(\"./base58check\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nexports.versions = {\n    mainnet: {\n        p2pkh: 22,\n        p2sh: 20, // 'M'\n    },\n    testnet: {\n        p2pkh: 26,\n        p2sh: 21, // 'N'\n    },\n};\n// address conversion : bitcoin to stacks\nconst ADDR_BITCOIN_TO_STACKS = {};\nADDR_BITCOIN_TO_STACKS[0] = exports.versions.mainnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[5] = exports.versions.mainnet.p2sh;\nADDR_BITCOIN_TO_STACKS[111] = exports.versions.testnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[196] = exports.versions.testnet.p2sh;\n// address conversion : stacks to bitcoin\nconst ADDR_STACKS_TO_BITCOIN = {};\nADDR_STACKS_TO_BITCOIN[exports.versions.mainnet.p2pkh] = 0;\nADDR_STACKS_TO_BITCOIN[exports.versions.mainnet.p2sh] = 5;\nADDR_STACKS_TO_BITCOIN[exports.versions.testnet.p2pkh] = 111;\nADDR_STACKS_TO_BITCOIN[exports.versions.testnet.p2sh] = 196;\n/**\n * Make a c32check address with the given version and hash160\n * The only difference between a c32check string and c32 address\n * is that the letter 'S' is pre-pended.\n * @param {number} version - the address version number\n * @param {string} hash160hex - the hash160 to encode (must be a hash160)\n * @returns {string} the address\n */\nfunction c32address(version, hash160hex) {\n    if (!hash160hex.match(/^[0-9a-fA-F]{40}$/)) {\n        throw new Error('Invalid argument: not a hash160 hex string');\n    }\n    const c32string = (0, checksum_1.c32checkEncode)(version, hash160hex);\n    return `S${c32string}`;\n}\nexports.c32address = c32address;\n/**\n * Decode a c32 address into its version and hash160\n * @param {string} c32addr - the c32check-encoded address\n * @returns {[number, string]} a tuple with the version and hash160\n */\nfunction c32addressDecode(c32addr) {\n    if (c32addr.length <= 5) {\n        throw new Error('Invalid c32 address: invalid length');\n    }\n    if (c32addr[0] != 'S') {\n        throw new Error('Invalid c32 address: must start with \"S\"');\n    }\n    return (0, checksum_1.c32checkDecode)(c32addr.slice(1));\n}\nexports.c32addressDecode = c32addressDecode;\n/*\n * Convert a base58check address to a c32check address.\n * Try to convert the version number if one is not given.\n * @param {string} b58check - the base58check encoded address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the c32 address with the given version number (or the\n *   semantically-equivalent c32 version number, if not given)\n */\nfunction b58ToC32(b58check, version = -1) {\n    const addrInfo = base58check.decode(b58check);\n    const hash160String = (0, utils_1.bytesToHex)(addrInfo.data);\n    const addrVersion = parseInt((0, utils_1.bytesToHex)(addrInfo.prefix), 16);\n    let stacksVersion;\n    if (version < 0) {\n        stacksVersion = addrVersion;\n        if (ADDR_BITCOIN_TO_STACKS[addrVersion] !== undefined) {\n            stacksVersion = ADDR_BITCOIN_TO_STACKS[addrVersion];\n        }\n    }\n    else {\n        stacksVersion = version;\n    }\n    return c32address(stacksVersion, hash160String);\n}\nexports.b58ToC32 = b58ToC32;\n/*\n * Convert a c32check address to a base58check address.\n * @param {string} c32string - the c32check address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the base58 address with the given version number (or the\n *    semantically-equivalent bitcoin version number, if not given)\n */\nfunction c32ToB58(c32string, version = -1) {\n    const addrInfo = c32addressDecode(c32string);\n    const stacksVersion = addrInfo[0];\n    const hash160String = addrInfo[1];\n    let bitcoinVersion;\n    if (version < 0) {\n        bitcoinVersion = stacksVersion;\n        if (ADDR_STACKS_TO_BITCOIN[stacksVersion] !== undefined) {\n            bitcoinVersion = ADDR_STACKS_TO_BITCOIN[stacksVersion];\n        }\n    }\n    else {\n        bitcoinVersion = version;\n    }\n    let prefix = bitcoinVersion.toString(16);\n    if (prefix.length === 1) {\n        prefix = `0${prefix}`;\n    }\n    return base58check.encode(hash160String, prefix);\n}\nexports.c32ToB58 = c32ToB58;\n","/*\n * From https://github.com/wzbg/base58check\n * @Author: zyc\n * @Date:   2016-09-11 23:36:05\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst basex = require(\"base-x\");\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nfunction encode(data, prefix = '00') {\n    const dataBytes = typeof data === 'string' ? (0, utils_1.hexToBytes)(data) : data;\n    const prefixBytes = typeof prefix === 'string' ? (0, utils_1.hexToBytes)(prefix) : data;\n    if (!(dataBytes instanceof Uint8Array) || !(prefixBytes instanceof Uint8Array)) {\n        throw new TypeError('Argument must be of type Uint8Array or string');\n    }\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    return basex(ALPHABET).encode([...prefixBytes, ...dataBytes, ...checksum.slice(0, 4)]);\n}\nexports.encode = encode;\nfunction decode(string) {\n    const bytes = basex(ALPHABET).decode(string);\n    const prefixBytes = bytes.slice(0, 1);\n    const dataBytes = bytes.slice(1, -4);\n    // todo: for better performance replace spread with `concatBytes` method\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    bytes.slice(-4).forEach((check, index) => {\n        if (check !== checksum[index]) {\n            throw new Error('Invalid checksum');\n        }\n    });\n    return { prefix: prefixBytes, data: dataBytes };\n}\nexports.decode = decode;\n","/**\n * Unsigned 32-bit integer\n */\nenum ChainID {\n  Testnet = 0x80000000,\n  Mainnet = 0x00000001,\n}\n\nconst DEFAULT_CHAIN_ID = ChainID.Mainnet;\nconst MAX_STRING_LENGTH_BYTES = 128;\nconst CLARITY_INT_SIZE = 128;\nconst CLARITY_INT_BYTE_SIZE = 16;\nconst COINBASE_LENGTH_BYTES = 32;\nconst RECOVERABLE_ECDSA_SIG_LENGTH_BYTES = 65;\nconst COMPRESSED_PUBKEY_LENGTH_BYTES = 32;\nconst UNCOMPRESSED_PUBKEY_LENGTH_BYTES = 64;\nconst MEMO_MAX_LENGTH_BYTES = 34;\nconst DEFAULT_CORE_NODE_API_URL = 'https://stacks-node-api.mainnet.stacks.co';\n\n// todo: add explicit enum values\nenum StacksMessageType {\n  Address,\n  Principal,\n  LengthPrefixedString,\n  MemoString,\n  AssetInfo,\n  PostCondition,\n  PublicKey,\n  LengthPrefixedList,\n  Payload,\n  MessageSignature,\n  StructuredDataSignature,\n  TransactionAuthField,\n}\n\ntype WhenMessageTypeMap<T> = Record<StacksMessageType, T>;\n\nexport function whenMessageType(messageType: StacksMessageType) {\n  return <T>(messageTypeMap: WhenMessageTypeMap<T>): T => messageTypeMap[messageType];\n}\n\nenum PayloadType {\n  TokenTransfer = 0x00,\n  SmartContract = 0x01,\n  VersionedSmartContract = 0x06,\n  ContractCall = 0x02,\n  PoisonMicroblock = 0x03,\n  Coinbase = 0x04,\n  CoinbaseToAltRecipient = 0x05,\n}\n\nenum ClarityVersion {\n  Clarity1 = 1,\n  Clarity2 = 2,\n}\n\n/**\n * How a transaction should get appended to the Stacks blockchain.\n *\n * In the Stacks blockchain, there are two kinds of blocks: anchored\n * blocks and streaming microblocks. A transactions AnchorMode specifies\n * which kind of block it should be included in.\n *\n * For more information about the kinds of Stacks blocks and the various\n * AnchorModes, check out {@link https://github.com/stacksgov/sips/blob/main/sips/sip-001/sip-001-burn-election.md SIP 001} and\n * {@link https://github.com/stacksgov/sips/blob/main/sips/sip-005/sip-005-blocks-and-transactions.md SIP 005}\n */\nenum AnchorMode {\n  /** The transaction MUST be included in an anchored block */\n  OnChainOnly = 0x01,\n  /** The transaction MUST be included in a microblock */\n  OffChainOnly = 0x02,\n  /** The leader can choose where to include the transaction (anchored block or microblock)*/\n  Any = 0x03,\n}\n\nconst AnchorModeNames = ['onChainOnly', 'offChainOnly', 'any'] as const;\ntype AnchorModeName = (typeof AnchorModeNames)[number];\n\nconst AnchorModeMap = {\n  [AnchorModeNames[0]]: AnchorMode.OnChainOnly,\n  [AnchorModeNames[1]]: AnchorMode.OffChainOnly,\n  [AnchorModeNames[2]]: AnchorMode.Any,\n  [AnchorMode.OnChainOnly]: AnchorMode.OnChainOnly,\n  [AnchorMode.OffChainOnly]: AnchorMode.OffChainOnly,\n  [AnchorMode.Any]: AnchorMode.Any,\n};\n\nfunction anchorModeFromNameOrValue(mode: AnchorModeName | AnchorMode): AnchorMode {\n  if (mode in AnchorModeMap) {\n    return AnchorModeMap[mode];\n  }\n  throw new Error(`Invalid anchor mode \"${mode}\", must be one of: ${AnchorModeNames.join(', ')}`);\n}\n\nenum TransactionVersion {\n  Mainnet = 0x00,\n  Testnet = 0x80,\n}\n\nconst DEFAULT_TRANSACTION_VERSION = TransactionVersion.Mainnet;\n\nenum PostConditionMode {\n  Allow = 0x01,\n  Deny = 0x02,\n}\n\nenum PostConditionType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\nenum AuthType {\n  Standard = 0x04,\n  Sponsored = 0x05,\n}\n\nenum AddressHashMode {\n  // serialization modes for public keys to addresses.\n  // We support four different modes due to legacy compatibility with Stacks v1 addresses:\n  /** SingleSigHashMode - hash160(public-key), same as bitcoin's p2pkh */\n  SerializeP2PKH = 0x00,\n  /** MultiSigHashMode - hash160(multisig-redeem-script), same as bitcoin's multisig p2sh */\n  SerializeP2SH = 0x01,\n  /** SingleSigHashMode - hash160(segwit-program-00(p2pkh)), same as bitcoin's p2sh-p2wpkh */\n  SerializeP2WPKH = 0x02,\n  /** MultiSigHashMode - hash160(segwit-program-00(public-keys)), same as bitcoin's p2sh-p2wsh */\n  SerializeP2WSH = 0x03,\n}\n\ntype SingleSigHashMode = AddressHashMode.SerializeP2PKH | AddressHashMode.SerializeP2WPKH;\ntype MultiSigHashMode = AddressHashMode.SerializeP2SH | AddressHashMode.SerializeP2WSH;\n\nenum AddressVersion {\n  MainnetSingleSig = 22,\n  MainnetMultiSig = 20,\n  TestnetSingleSig = 26,\n  TestnetMultiSig = 21,\n}\n\nenum PubKeyEncoding {\n  Compressed = 0x00,\n  Uncompressed = 0x01,\n}\n\nenum FungibleConditionCode {\n  Equal = 0x01,\n  Greater = 0x02,\n  GreaterEqual = 0x03,\n  Less = 0x04,\n  LessEqual = 0x05,\n}\n\nenum NonFungibleConditionCode {\n  Sends = 0x10,\n  DoesNotSend = 0x11,\n}\n\nenum PostConditionPrincipalID {\n  Origin = 0x01,\n  Standard = 0x02,\n  Contract = 0x03,\n}\n\nenum AssetType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\nenum TxRejectedReason {\n  Serialization = 'Serialization',\n  Deserialization = 'Deserialization',\n  SignatureValidation = 'SignatureValidation',\n  FeeTooLow = 'FeeTooLow',\n  BadNonce = 'BadNonce',\n  NotEnoughFunds = 'NotEnoughFunds',\n  NoSuchContract = 'NoSuchContract',\n  NoSuchPublicFunction = 'NoSuchPublicFunction',\n  BadFunctionArgument = 'BadFunctionArgument',\n  ContractAlreadyExists = 'ContractAlreadyExists',\n  PoisonMicroblocksDoNotConflict = 'PoisonMicroblocksDoNotConflict',\n  PoisonMicroblockHasUnknownPubKeyHash = 'PoisonMicroblockHasUnknownPubKeyHash',\n  PoisonMicroblockIsInvalid = 'PoisonMicroblockIsInvalid',\n  BadAddressVersionByte = 'BadAddressVersionByte',\n  NoCoinbaseViaMempool = 'NoCoinbaseViaMempool',\n  ServerFailureNoSuchChainTip = 'ServerFailureNoSuchChainTip',\n  ServerFailureDatabase = 'ServerFailureDatabase',\n  ServerFailureOther = 'ServerFailureOther',\n}\n\nexport {\n  MAX_STRING_LENGTH_BYTES,\n  CLARITY_INT_SIZE,\n  CLARITY_INT_BYTE_SIZE,\n  COINBASE_LENGTH_BYTES as COINBASE_BYTES_LENGTH,\n  DEFAULT_CHAIN_ID,\n  DEFAULT_TRANSACTION_VERSION,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  COMPRESSED_PUBKEY_LENGTH_BYTES,\n  UNCOMPRESSED_PUBKEY_LENGTH_BYTES,\n  MEMO_MAX_LENGTH_BYTES,\n  DEFAULT_CORE_NODE_API_URL,\n  ChainID,\n  StacksMessageType,\n  PayloadType,\n  ClarityVersion,\n  AnchorMode,\n  AnchorModeName,\n  AnchorModeNames,\n  anchorModeFromNameOrValue,\n  TransactionVersion,\n  PostConditionMode,\n  PostConditionType,\n  PostConditionPrincipalID,\n  AuthType,\n  AddressHashMode,\n  SingleSigHashMode,\n  MultiSigHashMode,\n  AddressVersion,\n  PubKeyEncoding,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  AssetType,\n  TxRejectedReason,\n};\n","import {\n  AddressHashMode,\n  AddressVersion,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  StacksMessageType,\n  TransactionVersion,\n} from './constants';\n\nimport { c32address } from 'c32check';\nimport { hexToBytes } from '@stacks/common';\n\nexport interface Address {\n  readonly type: StacksMessageType.Address;\n  readonly version: AddressVersion;\n  readonly hash160: string;\n}\n\nexport interface MessageSignature {\n  readonly type: StacksMessageType.MessageSignature;\n  data: string;\n}\n\nexport function createMessageSignature(signature: string): MessageSignature {\n  const length = hexToBytes(signature).byteLength;\n  if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\n    throw Error('Invalid signature');\n  }\n\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: signature,\n  };\n}\n\n/**\n * Translates the tx auth hash mode to the corresponding address version.\n * @see https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#transaction-authorization\n */\nexport function addressHashModeToVersion(\n  hashMode: AddressHashMode,\n  txVersion: TransactionVersion\n): AddressVersion {\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetSingleSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetSingleSig;\n        default:\n          throw new Error(\n            `Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`\n          );\n      }\n    case AddressHashMode.SerializeP2SH:\n    case AddressHashMode.SerializeP2WPKH:\n    case AddressHashMode.SerializeP2WSH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetMultiSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetMultiSig;\n        default:\n          throw new Error(\n            `Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`\n          );\n      }\n    default:\n      throw new Error(`Unexpected hashMode ${JSON.stringify(hashMode)}`);\n  }\n}\n\nexport function addressFromVersionHash(version: AddressVersion, hash: string): Address {\n  return { type: StacksMessageType.Address, version, hash160: hash };\n}\n\nexport function addressToString(address: Address): string {\n  return c32address(address.version, address.hash160);\n}\n","/**\n * Type IDs corresponding to each of the Clarity value types as described here:\n * {@link https://github.com/blockstack/blockstack-core/blob/sip/sip-005/sip/sip-005-blocks-and-transactions.md#clarity-value-representation}\n */\nexport enum ClarityType {\n  Int = 0x00,\n  UInt = 0x01,\n  Buffer = 0x02,\n  BoolTrue = 0x03,\n  BoolFalse = 0x04,\n  PrincipalStandard = 0x05,\n  PrincipalContract = 0x06,\n  ResponseOk = 0x07,\n  ResponseErr = 0x08,\n  OptionalNone = 0x09,\n  OptionalSome = 0x0a,\n  List = 0x0b,\n  Tuple = 0x0c,\n  StringASCII = 0x0d,\n  StringUTF8 = 0x0e,\n}\n","import { utf8ToBytes } from '@stacks/common';\nimport { ClarityType } from '../constants';\n\ninterface BufferCV {\n  readonly type: ClarityType.Buffer;\n  readonly buffer: Uint8Array;\n}\n\n/**\n * Converts a Uint8Array to a BufferCV clarity type\n *\n * @param {Uint8Array} buffer value to be converted to clarity type\n *\n * @returns {BufferCV} returns instance of type BufferCV\n *\n * @example\n * ```\n *  import { bufferCV } from '@stacks/transactions';\n *\n *  const buffer = utf8ToBytes('this is a test');\n *  const buf = bufferCV(buffer);\n *  // { type: 2, buffer: <Uint8Array 74 68 69 73 20 69 73 20 61 20 74 65 73 74> }\n *  const value = bytesToUtf8(buf.buffer);\n *  // this is a test\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst bufferCV = (buffer: Uint8Array): BufferCV => {\n  if (buffer.length > 1_000_000) {\n    throw new Error('Cannot construct clarity buffer that is greater than 1MB');\n  }\n\n  return { type: ClarityType.Buffer, buffer };\n};\n\n/**\n * Converts a string to BufferCV clarity type\n *\n * @param {str} string input to be converted to bufferCV clarity type\n *\n * @returns {BufferCV} returns instance of type BufferCV\n *\n * @example\n * ```\n *  import { bufferCVFromString } from '@stacks/transactions';\n *\n *  const str = 'this is a test';\n *  const buf = bufferCVFromString(str);\n *  // { type: 2, buffer: <Buffer 74 68 69 73 20 69 73 20 61 20 74 65 73 74> }\n *  const value = bytesToUtf8(buf.buffer);\n *  // this is a test\n *```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst bufferCVFromString = (str: string): BufferCV => bufferCV(utf8ToBytes(str));\n\nexport { BufferCV, bufferCV, bufferCVFromString };\n","import {\n  FungibleConditionCode,\n  MAX_STRING_LENGTH_BYTES,\n  NonFungibleConditionCode,\n  PostConditionPrincipalID,\n  PostConditionType,\n  StacksMessageType,\n} from './constants';\nimport { c32addressDecode } from 'c32check';\nimport { Address } from './common';\nimport { ClarityValue } from './clarity';\nimport { exceedsMaxLengthBytes } from './utils';\n\nexport interface StandardPrincipal {\n  readonly type: StacksMessageType.Principal;\n  readonly prefix: PostConditionPrincipalID.Standard;\n  readonly address: Address;\n}\n\nexport interface ContractPrincipal {\n  readonly type: StacksMessageType.Principal;\n  readonly prefix: PostConditionPrincipalID.Contract;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n}\n\nexport interface LengthPrefixedString {\n  readonly type: StacksMessageType.LengthPrefixedString;\n  readonly content: string;\n  readonly lengthPrefixBytes: number;\n  readonly maxLengthBytes: number;\n}\n\nexport interface AssetInfo {\n  readonly type: StacksMessageType.AssetInfo;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n  readonly assetName: LengthPrefixedString;\n}\n\nexport interface STXPostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.STX;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: bigint;\n}\n\nexport interface FungiblePostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.Fungible;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: bigint;\n  readonly assetInfo: AssetInfo;\n}\n\nexport interface NonFungiblePostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.NonFungible;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: NonFungibleConditionCode;\n  /** Structure that identifies the token type. */\n  readonly assetInfo: AssetInfo;\n  /** The Clarity value that names the token instance. */\n  readonly assetName: ClarityValue;\n}\n\nexport function parseAssetInfoString(id: string): AssetInfo {\n  const [assetAddress, assetContractName, assetTokenName] = id.split(/\\.|::/);\n  const assetInfo = createAssetInfo(assetAddress, assetContractName, assetTokenName);\n  return assetInfo;\n}\n\nexport function createLPString(content: string): LengthPrefixedString;\nexport function createLPString(content: string, lengthPrefixBytes: number): LengthPrefixedString;\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes: number,\n  maxLengthBytes: number\n): LengthPrefixedString;\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes?: number,\n  maxLengthBytes?: number\n): LengthPrefixedString {\n  const prefixLength = lengthPrefixBytes || 1;\n  const maxLength = maxLengthBytes || MAX_STRING_LENGTH_BYTES;\n  if (exceedsMaxLengthBytes(content, maxLength)) {\n    throw new Error(`String length exceeds maximum bytes ${maxLength}`);\n  }\n  return {\n    type: StacksMessageType.LengthPrefixedString,\n    content,\n    lengthPrefixBytes: prefixLength,\n    maxLengthBytes: maxLength,\n  };\n}\n\nexport function createAssetInfo(\n  addressString: string,\n  contractName: string,\n  assetName: string\n): AssetInfo {\n  return {\n    type: StacksMessageType.AssetInfo,\n    address: createAddress(addressString),\n    contractName: createLPString(contractName),\n    assetName: createLPString(assetName),\n  };\n}\n\nexport function createAddress(c32AddressString: string): Address {\n  const addressData = c32addressDecode(c32AddressString);\n  return {\n    type: StacksMessageType.Address,\n    version: addressData[0],\n    hash160: addressData[1],\n  };\n}\n\n/**\n * Parses a principal string for either a standard principal or contract principal.\n * @param principalString - String in the format `{address}.{contractName}`\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G.example-contract\"\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G\"\n */\nexport function parsePrincipalString(\n  principalString: string\n): StandardPrincipal | ContractPrincipal {\n  if (principalString.includes('.')) {\n    const [address, contractName] = principalString.split('.');\n    return createContractPrincipal(address, contractName);\n  } else {\n    return createStandardPrincipal(principalString);\n  }\n}\n\nexport function createContractPrincipal(\n  addressString: string,\n  contractName: string\n): ContractPrincipal {\n  const addr = createAddress(addressString);\n  const name = createLPString(contractName);\n  return {\n    type: StacksMessageType.Principal,\n    prefix: PostConditionPrincipalID.Contract,\n    address: addr,\n    contractName: name,\n  };\n}\n\nexport function createStandardPrincipal(addressString: string): StandardPrincipal {\n  const addr = createAddress(addressString);\n  return {\n    type: StacksMessageType.Principal,\n    prefix: PostConditionPrincipalID.Standard,\n    address: addr,\n  };\n}\n\nexport type PostCondition = STXPostCondition | FungiblePostCondition | NonFungiblePostCondition;\n\nexport type PostConditionPrincipal = StandardPrincipal | ContractPrincipal;\n","import { utf8ToBytes } from '@stacks/common';\nimport { Address, addressToString } from '../../common';\nimport { LengthPrefixedString, createAddress, createLPString } from '../../postcondition-types';\nimport { ClarityType } from '../constants';\n\ntype PrincipalCV = StandardPrincipalCV | ContractPrincipalCV;\n\ninterface StandardPrincipalCV {\n  readonly type: ClarityType.PrincipalStandard;\n  readonly address: Address;\n}\n\ninterface ContractPrincipalCV {\n  readonly type: ClarityType.PrincipalContract;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n}\n/** Returns a string in the format `address` or `address.contract-name` from a principal (standard or contract) */\nfunction principalToString(principal: PrincipalCV): string {\n  if (principal.type === ClarityType.PrincipalStandard) {\n    return addressToString(principal.address);\n  } else if (principal.type === ClarityType.PrincipalContract) {\n    const address = addressToString(principal.address);\n    return `${address}.${principal.contractName.content}`;\n  } else {\n    throw new Error(`Unexpected principal data: ${JSON.stringify(principal)}`);\n  }\n}\n\nfunction principalCV(principal: string): PrincipalCV {\n  if (principal.includes('.')) {\n    const [address, contractName] = principal.split('.');\n    return contractPrincipalCV(address, contractName);\n  } else {\n    return standardPrincipalCV(principal);\n  }\n}\n\n/**\n * Converts stx address in to StandardPrincipalCV clarity type\n * @param {addressString} string value to be converted to StandardPrincipalCV clarity type\n * @returns {StandardPrincipalCV} returns instance of type StandardPrincipalCV\n *\n * @example\n * ```\n *  import { standardPrincipalCV } from '@stacks/transactions';\n *\n *  const addr = standardPrincipalCV('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B');\n *  // { type: 5, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction standardPrincipalCV(addressString: string): StandardPrincipalCV {\n  const addr = createAddress(addressString);\n  return { type: ClarityType.PrincipalStandard, address: addr };\n}\n\n/**\n * Converts stx address in to StandardPrincipalCV clarity type\n * @param {addressString} string value to be converted to StandardPrincipalCV clarity type\n * @returns {StandardPrincipalCV} returns instance of type StandardPrincipalCV\n *\n * @example\n * ```\n *  import { standardPrincipalCVFromAddress, Address  } from '@stacks/transactions';\n *\n *  const address: Address = {\n *    type: 0,\n *    version: 22,\n *    hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6'\n *  };\n *\n *  const principalCV = standardPrincipalCVFromAddress(address);\n *  // { type: 5, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction standardPrincipalCVFromAddress(address: Address): StandardPrincipalCV {\n  return { type: ClarityType.PrincipalStandard, address };\n}\n\n/**\n * Converts stx address in to ContractPrincipalCV clarity type\n * @param {addressString} string value to be converted to ContractPrincipalCV clarity type\n * @param {contractName} string containing contract name\n * @returns {ContractPrincipalCV} returns instance of type ContractPrincipalCV\n *\n * @example\n * ```\n *  import { contractPrincipalCV } from '@stacks/transactions';\n *\n *  const contractAddress = contractPrincipalCV('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B', 'test');\n *  // { type: 6, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' }, contractName: { type: 2, content: 'test', lengthPrefixBytes: 1, maxLengthBytes: 128 } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction contractPrincipalCV(addressString: string, contractName: string): ContractPrincipalCV {\n  const addr = createAddress(addressString);\n  const lengthPrefixedContractName = createLPString(contractName);\n  return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\n\n/**\n * Create ContractPrincipalCV from Address type\n * @param {address} address value to be converted to ContractPrincipalCV clarity type\n * @param {contractName} contract name of type LengthPrefixedString\n * @returns {ContractPrincipalCV} returns instance of type ContractPrincipalCV\n *\n * @example\n * ```\n *  import { contractPrincipalCVFromAddress, createLPString, createAddress } from '@stacks/transactions';\n *\n *  const contractAddressCV = contractPrincipalCVFromAddress(createAddress('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B'), createLPString('test'));\n *\n *  // { type: 6, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' }, contractName: { type: 2, content: 'test', lengthPrefixBytes: 1, maxLengthBytes: 128 } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction contractPrincipalCVFromAddress(\n  address: Address,\n  contractName: LengthPrefixedString\n): ContractPrincipalCV {\n  if (utf8ToBytes(contractName.content).byteLength >= 128) {\n    throw new Error('Contract name must be less than 128 bytes');\n  }\n  return { type: ClarityType.PrincipalContract, address, contractName };\n}\n\nfunction contractPrincipalCVFromStandard(\n  sp: StandardPrincipalCV,\n  contractName: string\n): ContractPrincipalCV {\n  const lengthPrefixedContractName = createLPString(contractName);\n  return {\n    type: ClarityType.PrincipalContract,\n    address: sp.address,\n    contractName: lengthPrefixedContractName,\n  };\n}\n\nexport {\n  PrincipalCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  principalCV,\n  principalToString,\n  standardPrincipalCV,\n  standardPrincipalCVFromAddress,\n  contractPrincipalCV,\n  contractPrincipalCVFromAddress,\n  contractPrincipalCVFromStandard,\n};\n","import { ClarityType } from '../constants';\n\ntype BooleanCV = TrueCV | FalseCV;\n\ninterface TrueCV {\n  type: ClarityType.BoolTrue;\n}\n\ninterface FalseCV {\n  type: ClarityType.BoolFalse;\n}\n\n/**\n * Converts true to BooleanCV clarity type\n *\n * @returns {BooleanCV} returns instance of type BooleanCV\n *\n * @example\n * ```\n *  import { trueCV } from '@stacks/transactions';\n *\n *  const trueCV = trueCV();\n *  // { type: 3 }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst trueCV = (): BooleanCV => ({ type: ClarityType.BoolTrue });\n\n/**\n * Converts false to BooleanCV clarity type\n *\n * @returns {BooleanCV} returns instance of type BooleanCV\n *\n * @example\n * ```\n *  import { falseCV } from '@stacks/transactions';\n *\n *  const falseCV = falseCV();\n *  // { type: 4 }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst falseCV = (): BooleanCV => ({ type: ClarityType.BoolFalse });\n\n/**\n * Converts a boolean to BooleanCV clarity type\n *\n * @returns {BooleanCV} returns instance of type BooleanCV\n *\n * @example\n * ```\n *  import { boolCV } from '@stacks/transactions';\n *\n *  const boolCV = boolCV(false);\n *  // { type: 4 }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst boolCV = (bool: boolean) => (bool ? trueCV() : falseCV());\n\nexport { BooleanCV, TrueCV, FalseCV, boolCV, trueCV, falseCV };\n","import { IntegerType, intToBigInt } from '@stacks/common';\nimport { ClarityType } from '../constants';\n\nconst MAX_U128 = BigInt('0xffffffffffffffffffffffffffffffff'); // (2 ** 128 - 1)\nconst MIN_U128 = BigInt(0);\nconst MAX_I128 = BigInt('0x7fffffffffffffffffffffffffffffff'); // (2 ** 127 - 1)\n// no signed (negative) hex support in bigint constructor\nconst MIN_I128 = BigInt('-170141183460469231731687303715884105728'); // (-2 ** 127)\n\ninterface IntCV {\n  readonly type: ClarityType.Int;\n  readonly value: bigint;\n}\n\n/**\n * Converts IntegerType in to IntCV clarity type\n *\n * @param {value} integer value to be converted to IntCV clarity type\n *\n * @returns {IntCV} returns instance of type IntCV\n *\n * @example\n * ```\n *  import { intCV } from '@stacks/transactions';\n *\n *  const value = intCV('100'); // parameter any of type: number | string | bigint | Uint8Array | BN\n *  // { type: 0, value: 100n }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst intCV = (value: IntegerType): IntCV => {\n  const bigInt = intToBigInt(value, true);\n  if (bigInt > MAX_I128) {\n    throw new RangeError(`Cannot construct clarity integer from value greater than ${MAX_I128}`);\n  } else if (bigInt < MIN_I128) {\n    throw new RangeError(`Cannot construct clarity integer form value less than ${MIN_I128}`);\n  }\n  return { type: ClarityType.Int, value: bigInt };\n};\n\ninterface UIntCV {\n  readonly type: ClarityType.UInt;\n  readonly value: bigint;\n}\n\n/**\n * Converts IntegerType in to IntCV clarity type\n *\n * @param {value} integer value to be converted to UIntCV clarity type (Only unsigned integer is allowed otherwise throws exception)\n *\n * @returns {UIntCV} returns instance of type UIntCV\n *\n * @example\n * ```\n *  import { uintCV } from '@stacks/transactions';\n *\n *  const value = uintCV('100'); // parameter any of type: number | string | bigint | Uint8Array | BN\n *  // { type: 1, value: 100n }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst uintCV = (value: IntegerType): UIntCV => {\n  const bigInt = intToBigInt(value, false);\n  if (bigInt < MIN_U128) {\n    throw new RangeError('Cannot construct unsigned clarity integer from negative value');\n  } else if (bigInt > MAX_U128) {\n    throw new RangeError(`Cannot construct unsigned clarity integer greater than ${MAX_U128}`);\n  }\n  return { type: ClarityType.UInt, value: bigInt };\n};\n\nexport { IntCV, UIntCV, intCV, uintCV };\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\ntype OptionalCV<T extends ClarityValue = ClarityValue> = NoneCV | SomeCV<T>;\n\ninterface NoneCV {\n  readonly type: ClarityType.OptionalNone;\n}\n\ninterface SomeCV<T extends ClarityValue = ClarityValue> {\n  readonly type: ClarityType.OptionalSome;\n  readonly value: T;\n}\n\n/**\n * Create a null clarity type\n **\n * @returns {NoneCV} returns instance of type NoneCV\n *\n * @example\n * ```\n *  import { noneCV } from '@stacks/transactions';\n *\n *  const value = noneCV();\n *  // { type: 9 }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction noneCV(): NoneCV {\n  return { type: ClarityType.OptionalNone };\n}\n\n/**\n * Converts any ClarityValue in to OptionalCV clarity type\n *\n * @param {ClarityValue} value to be converted to OptionalCV clarity type\n *\n * @returns {OptionalCV} returns instance of type OptionalCV\n *\n * @example\n * ```\n *  import { someCV, trueCV } from '@stacks/transactions';\n *\n *  const value = someCV(trueCV());\n *  // { type: 10, value: { type: 3 } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction someCV<T extends ClarityValue = ClarityValue>(value: T): OptionalCV<T> {\n  return { type: ClarityType.OptionalSome, value };\n}\n\nfunction optionalCVOf<T extends ClarityValue = ClarityValue>(value?: T): OptionalCV<T> {\n  if (value) {\n    return someCV(value);\n  } else {\n    return noneCV();\n  }\n}\n\nexport { OptionalCV, NoneCV, SomeCV, noneCV, someCV, optionalCVOf };\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\n\ntype ResponseCV = ResponseErrorCV | ResponseOkCV;\n\ninterface ResponseErrorCV<T extends ClarityValue = ClarityValue> {\n  readonly type: ClarityType.ResponseErr;\n  readonly value: T;\n}\n\ninterface ResponseOkCV<T extends ClarityValue = ClarityValue> {\n  readonly type: ClarityType.ResponseOk;\n  readonly value: T;\n}\n\n/**\n * Converts ClarityValue to responseErrorCV\n *\n * @param {value} ClarityValue value to be converted to responseErrorCV clarity type\n *\n * @returns {responseErrorCV} returns instance of type responseErrorCV\n *\n * @example\n * ```\n *  import { responseErrorCV, intCV } from '@stacks/transactions';\n *\n *  const respErrorCV = responseErrorCV(intCV(1));\n *\n *  // { type: 8, value: { type: 0, value: 1n } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction responseErrorCV<T extends ClarityValue = ClarityValue>(value: T): ResponseErrorCV<T> {\n  return { type: ClarityType.ResponseErr, value };\n}\n\n/**\n * Converts ClarityValue to ResponseOkCV\n *\n * @param {value} ClarityValue value to be converted to ResponseOkCV clarity type\n *\n * @returns {ResponseOkCV} returns instance of type ResponseOkCV\n *\n * @example\n * ```\n *  import { responseOkCV, intCV } from '@stacks/transactions';\n *\n *  const respOKCV = responseOkCV(intCV(1));\n *\n *  // { type: 7, value: { type: 0, value: 1n } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction responseOkCV<T extends ClarityValue = ClarityValue>(value: T): ResponseOkCV<T> {\n  return { type: ClarityType.ResponseOk, value };\n}\n\nexport { ResponseCV, ResponseErrorCV, ResponseOkCV, responseErrorCV, responseOkCV };\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\nimport { isClarityName } from '../../utils';\n\ntype TupleData<T extends ClarityValue = ClarityValue> = { [key: string]: T };\n\ninterface TupleCV<T extends TupleData = TupleData> {\n  type: ClarityType.Tuple;\n  data: T;\n}\n\n/**\n * Create tuple of clarity values\n *\n * @param {tupleData} tuple value to be converted to tuple of clarity types\n *\n * @returns {TupleCV} returns instance of type clarity tuple\n *\n * @example\n * ```\n *  import { tupleCV, trueCV, falseCV } from '@stacks/transactions';\n *\n *  const tuple = tupleCV({\n *    c: trueCV(),\n *    b: falseCV(),\n *    a: trueCV(),\n *  });\n *  // { type: 12, data: { c: { type: 3 }, b: { type: 4 }, a: { type: 3 } } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction tupleCV<T extends ClarityValue = ClarityValue>(data: TupleData<T>): TupleCV<TupleData<T>> {\n  for (const key in data) {\n    if (!isClarityName(key)) {\n      throw new Error(`\"${key}\" is not a valid Clarity name`);\n    }\n  }\n\n  return { type: ClarityType.Tuple, data };\n}\n\nexport { TupleCV, tupleCV };\n","import { bytesToHex, readUInt16BE, readUInt32BE, readUInt8 } from '@stacks/common';\n\nfunction createEnumChecker<T extends string, TEnumValue extends number>(enumVariable: {\n  [key in T]: TEnumValue;\n}): (value: number) => value is TEnumValue {\n  // Create a set of valid enum number values.\n  const enumValues = Object.values<number>(enumVariable).filter(v => typeof v === 'number');\n  const enumValueSet = new Set<number>(enumValues);\n  return (value: number): value is TEnumValue => enumValueSet.has(value);\n}\n\nconst enumCheckFunctions = new Map<object, (value: number) => boolean>();\n\n/**\n * Type guard to check if a given value is a valid enum value.\n * @param enumVariable - Literal `enum` type.\n * @param value - A value to check against the enum's values.\n * @example\n * ```ts\n * enum Color {\n *   Purple = 3,\n *   Orange = 5\n * }\n * const val: number = 3;\n * if (isEnum(Color, val)) {\n *   // `val` is known as enum type `Color`, e.g.:\n *   const colorVal: Color = val;\n * }\n * ```\n */\nexport function isEnum<T extends string, TEnumValue extends number>(\n  enumVariable: { [key in T]: TEnumValue },\n  value: number\n): value is TEnumValue {\n  const checker = enumCheckFunctions.get(enumVariable);\n  if (checker !== undefined) {\n    return checker(value);\n  }\n  const newChecker = createEnumChecker(enumVariable);\n  enumCheckFunctions.set(enumVariable, newChecker);\n  return isEnum(enumVariable, value);\n}\n\nexport class BytesReader {\n  source: Uint8Array;\n  consumed: number = 0;\n\n  constructor(arr: Uint8Array) {\n    this.source = arr;\n  }\n\n  readBytes(length: number): Uint8Array {\n    const view = this.source.subarray(this.consumed, this.consumed + length);\n    this.consumed += length;\n    return view;\n  }\n\n  readUInt32BE(): number {\n    return readUInt32BE(this.readBytes(4), 0);\n  }\n\n  readUInt8(): number {\n    return readUInt8(this.readBytes(1), 0);\n  }\n\n  readUInt16BE(): number {\n    return readUInt16BE(this.readBytes(2), 0);\n  }\n\n  readBigUIntLE(length: number): bigint {\n    const bytes = this.readBytes(length).slice().reverse();\n    const hex = bytesToHex(bytes);\n    return BigInt(`0x${hex}`);\n  }\n\n  readBigUIntBE(length: number): bigint {\n    const bytes = this.readBytes(length);\n    const hex = bytesToHex(bytes);\n    return BigInt(`0x${hex}`);\n  }\n\n  // todo: remove or implement with DataView?\n  // readBigUInt64BE(): bigint {\n  //   return this.source.readBigUInt64BE();\n  // }\n\n  get readOffset(): number {\n    return this.consumed;\n  }\n\n  set readOffset(val: number) {\n    this.consumed = val;\n  }\n\n  get internalBytes(): Uint8Array {\n    return this.source;\n  }\n\n  readUInt8Enum<T extends string, TEnumValue extends number>(\n    enumVariable: { [key in T]: TEnumValue },\n    invalidEnumErrorFormatter: (val: number) => Error\n  ): TEnumValue {\n    const num = this.readUInt8();\n    if (isEnum(enumVariable, num)) {\n      return num;\n    }\n    throw invalidEnumErrorFormatter(num);\n  }\n}\n","class TransactionError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class SerializationError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class DeserializationError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Thrown when `NoEstimateAvailable` is received as an error reason from a\n * Stacks node. The Stacks node has not seen this kind of contract-call before,\n * and it cannot provide an estimate yet.\n * @see https://docs.hiro.so/api#tag/Fees/operation/post_fee_transaction\n */\nexport class NoEstimateAvailableError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class NotImplementedError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class SigningError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class VerificationError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n","import {\n  concatArray,\n  concatBytes,\n  bigIntToBytes,\n  toTwos,\n  writeUInt32BE,\n  utf8ToBytes,\n  asciiToBytes,\n} from '@stacks/common';\nimport { serializeAddress, serializeLPString } from '../types';\nimport { createLPString } from '../postcondition-types';\nimport {\n  BooleanCV,\n  OptionalCV,\n  BufferCV,\n  IntCV,\n  UIntCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  ResponseCV,\n  ListCV,\n  TupleCV,\n  ClarityValue,\n} from '.';\nimport { ClarityType } from './constants';\n\nimport { SerializationError } from '../errors';\nimport { StringAsciiCV, StringUtf8CV } from './types/stringCV';\nimport { CLARITY_INT_BYTE_SIZE, CLARITY_INT_SIZE } from '../constants';\n\nfunction bytesWithTypeID(typeId: ClarityType, bytes: Uint8Array): Uint8Array {\n  return concatArray([typeId, bytes]);\n}\n\nfunction serializeBoolCV(value: BooleanCV): Uint8Array {\n  return new Uint8Array([value.type]);\n}\n\nfunction serializeOptionalCV(cv: OptionalCV): Uint8Array {\n  if (cv.type === ClarityType.OptionalNone) {\n    return new Uint8Array([cv.type]);\n  } else {\n    return bytesWithTypeID(cv.type, serializeCV(cv.value));\n  }\n}\n\nfunction serializeBufferCV(cv: BufferCV): Uint8Array {\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, cv.buffer.length, 0);\n  return bytesWithTypeID(cv.type, concatBytes(length, cv.buffer));\n}\n\nfunction serializeIntCV(cv: IntCV): Uint8Array {\n  const bytes = bigIntToBytes(toTwos(cv.value, BigInt(CLARITY_INT_SIZE)), CLARITY_INT_BYTE_SIZE);\n  return bytesWithTypeID(cv.type, bytes);\n}\n\nfunction serializeUIntCV(cv: UIntCV): Uint8Array {\n  const bytes = bigIntToBytes(cv.value, CLARITY_INT_BYTE_SIZE);\n  return bytesWithTypeID(cv.type, bytes);\n}\n\nfunction serializeStandardPrincipalCV(cv: StandardPrincipalCV): Uint8Array {\n  return bytesWithTypeID(cv.type, serializeAddress(cv.address));\n}\n\nfunction serializeContractPrincipalCV(cv: ContractPrincipalCV): Uint8Array {\n  return bytesWithTypeID(\n    cv.type,\n    concatBytes(serializeAddress(cv.address), serializeLPString(cv.contractName))\n  );\n}\n\nfunction serializeResponseCV(cv: ResponseCV) {\n  return bytesWithTypeID(cv.type, serializeCV(cv.value));\n}\n\nfunction serializeListCV(cv: ListCV) {\n  const bytesArray = [];\n\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, cv.list.length, 0);\n  bytesArray.push(length);\n\n  for (const value of cv.list) {\n    const serializedValue = serializeCV(value);\n    bytesArray.push(serializedValue);\n  }\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeTupleCV(cv: TupleCV) {\n  const bytesArray = [];\n\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, Object.keys(cv.data).length, 0);\n  bytesArray.push(length);\n\n  const lexicographicOrder = Object.keys(cv.data).sort((a, b) => a.localeCompare(b));\n\n  for (const key of lexicographicOrder) {\n    const nameWithLength = createLPString(key);\n    bytesArray.push(serializeLPString(nameWithLength));\n\n    const serializedValue = serializeCV(cv.data[key]);\n    bytesArray.push(serializedValue);\n  }\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeStringCV(cv: StringAsciiCV | StringUtf8CV, encoding: 'ascii' | 'utf8') {\n  const bytesArray = [];\n\n  const str = encoding == 'ascii' ? asciiToBytes(cv.data) : utf8ToBytes(cv.data);\n  const len = new Uint8Array(4);\n  writeUInt32BE(len, str.length, 0);\n\n  bytesArray.push(len);\n  bytesArray.push(str);\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeStringAsciiCV(cv: StringAsciiCV) {\n  return serializeStringCV(cv, 'ascii');\n}\n\nfunction serializeStringUtf8CV(cv: StringUtf8CV) {\n  return serializeStringCV(cv, 'utf8');\n}\n\n/**\n * Serializes clarity value to Uint8Array\n *\n * @param {ClarityValue} value to be converted to bytes\n **\n * @returns {Uint8Array} returns the bytes\n *\n * @example\n * ```\n *  import { intCV, serializeCV } from '@stacks/transactions';\n *\n *  const serialized = serializeCV(intCV(100)); // Similarly works for other clarity types as well like listCV, booleanCV ...\n *\n *  // <Uint8Array 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 64>\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function serializeCV(value: ClarityValue): Uint8Array {\n  switch (value.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return serializeBoolCV(value);\n    case ClarityType.OptionalNone:\n    case ClarityType.OptionalSome:\n      return serializeOptionalCV(value);\n    case ClarityType.Buffer:\n      return serializeBufferCV(value);\n    case ClarityType.UInt:\n      return serializeUIntCV(value);\n    case ClarityType.Int:\n      return serializeIntCV(value);\n    case ClarityType.PrincipalStandard:\n      return serializeStandardPrincipalCV(value);\n    case ClarityType.PrincipalContract:\n      return serializeContractPrincipalCV(value);\n    case ClarityType.ResponseOk:\n    case ClarityType.ResponseErr:\n      return serializeResponseCV(value);\n    case ClarityType.List:\n      return serializeListCV(value);\n    case ClarityType.Tuple:\n      return serializeTupleCV(value);\n    case ClarityType.StringASCII:\n      return serializeStringAsciiCV(value);\n    case ClarityType.StringUTF8:\n      return serializeStringUtf8CV(value);\n    default:\n      throw new SerializationError('Unable to serialize. Invalid Clarity Value.');\n  }\n}\n","import { concatArray, IntegerType, intToBigInt, intToBytes, writeUInt32BE } from '@stacks/common';\nimport { ClarityVersion, COINBASE_BYTES_LENGTH, PayloadType, StacksMessageType } from './constants';\n\nimport { BytesReader } from './bytesReader';\nimport { ClarityValue, deserializeCV, serializeCV } from './clarity/';\nimport { PrincipalCV, principalCV } from './clarity/types/principalCV';\nimport { Address } from './common';\nimport { createAddress, createLPString, LengthPrefixedString } from './postcondition-types';\nimport {\n  codeBodyString,\n  createMemoString,\n  deserializeAddress,\n  deserializeLPString,\n  deserializeMemoString,\n  MemoString,\n  serializeStacksMessage,\n} from './types';\n\nexport type Payload =\n  | TokenTransferPayload\n  | ContractCallPayload\n  | SmartContractPayload\n  | VersionedSmartContractPayload\n  | PoisonPayload\n  | CoinbasePayload\n  | CoinbasePayloadToAltRecipient;\n\nexport function isTokenTransferPayload(p: Payload): p is TokenTransferPayload {\n  return p.payloadType === PayloadType.TokenTransfer;\n}\nexport function isContractCallPayload(p: Payload): p is ContractCallPayload {\n  return p.payloadType === PayloadType.ContractCall;\n}\nexport function isSmartContractPayload(p: Payload): p is SmartContractPayload {\n  return p.payloadType === PayloadType.SmartContract;\n}\nexport function isPoisonPayload(p: Payload): p is PoisonPayload {\n  return p.payloadType === PayloadType.PoisonMicroblock;\n}\nexport function isCoinbasePayload(p: Payload): p is CoinbasePayload {\n  return p.payloadType === PayloadType.Coinbase;\n}\n\nexport interface TokenTransferPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.TokenTransfer;\n  readonly recipient: PrincipalCV;\n  readonly amount: bigint;\n  readonly memo: MemoString;\n}\n\nexport type PayloadInput =\n  | (TokenTransferPayload | (Omit<TokenTransferPayload, 'amount'> & { amount: IntegerType }))\n  | ContractCallPayload\n  | SmartContractPayload\n  | VersionedSmartContractPayload\n  | PoisonPayload\n  | CoinbasePayload\n  | CoinbasePayloadToAltRecipient;\n\nexport function createTokenTransferPayload(\n  recipient: string | PrincipalCV,\n  amount: IntegerType,\n  memo?: string | MemoString\n): TokenTransferPayload {\n  if (typeof recipient === 'string') {\n    recipient = principalCV(recipient);\n  }\n  if (typeof memo === 'string') {\n    memo = createMemoString(memo);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.TokenTransfer,\n    recipient,\n    amount: intToBigInt(amount, false),\n    memo: memo ?? createMemoString(''),\n  };\n}\n\nexport interface ContractCallPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.ContractCall;\n  readonly contractAddress: Address;\n  readonly contractName: LengthPrefixedString;\n  readonly functionName: LengthPrefixedString;\n  readonly functionArgs: ClarityValue[];\n}\n\nexport function createContractCallPayload(\n  contractAddress: string | Address,\n  contractName: string | LengthPrefixedString,\n  functionName: string | LengthPrefixedString,\n  functionArgs: ClarityValue[]\n): ContractCallPayload {\n  if (typeof contractAddress === 'string') {\n    contractAddress = createAddress(contractAddress);\n  }\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof functionName === 'string') {\n    functionName = createLPString(functionName);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.ContractCall,\n    contractAddress,\n    contractName,\n    functionName,\n    functionArgs,\n  };\n}\n\nexport interface SmartContractPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.SmartContract;\n  readonly contractName: LengthPrefixedString;\n  readonly codeBody: LengthPrefixedString;\n}\n\nexport interface VersionedSmartContractPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.VersionedSmartContract;\n  readonly clarityVersion: ClarityVersion;\n  readonly contractName: LengthPrefixedString;\n  readonly codeBody: LengthPrefixedString;\n}\n\nexport function createSmartContractPayload(\n  contractName: string | LengthPrefixedString,\n  codeBody: string | LengthPrefixedString,\n  clarityVersion?: ClarityVersion\n): SmartContractPayload | VersionedSmartContractPayload {\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof codeBody === 'string') {\n    codeBody = codeBodyString(codeBody);\n  }\n\n  if (typeof clarityVersion === 'number') {\n    return {\n      type: StacksMessageType.Payload,\n      payloadType: PayloadType.VersionedSmartContract,\n      clarityVersion,\n      contractName,\n      codeBody,\n    };\n  }\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.SmartContract,\n    contractName,\n    codeBody,\n  };\n}\n\nexport interface PoisonPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.PoisonMicroblock;\n}\n\nexport function createPoisonPayload(): PoisonPayload {\n  return { type: StacksMessageType.Payload, payloadType: PayloadType.PoisonMicroblock };\n}\n\nexport interface CoinbasePayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.Coinbase;\n  readonly coinbaseBytes: Uint8Array;\n}\n\nexport interface CoinbasePayloadToAltRecipient {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.CoinbaseToAltRecipient;\n  readonly coinbaseBytes: Uint8Array;\n  readonly recipient: PrincipalCV;\n}\n\nexport function createCoinbasePayload(\n  coinbaseBytes: Uint8Array,\n  altRecipient?: PrincipalCV\n): CoinbasePayload | CoinbasePayloadToAltRecipient {\n  if (coinbaseBytes.byteLength != COINBASE_BYTES_LENGTH) {\n    throw Error(`Coinbase buffer size must be ${COINBASE_BYTES_LENGTH} bytes`);\n  }\n\n  if (altRecipient != undefined) {\n    return {\n      type: StacksMessageType.Payload,\n      payloadType: PayloadType.CoinbaseToAltRecipient,\n      coinbaseBytes,\n      recipient: altRecipient,\n    };\n  }\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.Coinbase,\n    coinbaseBytes,\n  };\n}\n\nexport function serializePayload(payload: PayloadInput): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(payload.payloadType);\n\n  switch (payload.payloadType) {\n    case PayloadType.TokenTransfer:\n      bytesArray.push(serializeCV(payload.recipient));\n      bytesArray.push(intToBytes(payload.amount, false, 8));\n      bytesArray.push(serializeStacksMessage(payload.memo));\n      break;\n    case PayloadType.ContractCall:\n      bytesArray.push(serializeStacksMessage(payload.contractAddress));\n      bytesArray.push(serializeStacksMessage(payload.contractName));\n      bytesArray.push(serializeStacksMessage(payload.functionName));\n      const numArgs = new Uint8Array(4);\n      writeUInt32BE(numArgs, payload.functionArgs.length, 0);\n      bytesArray.push(numArgs);\n      payload.functionArgs.forEach(arg => {\n        bytesArray.push(serializeCV(arg));\n      });\n      break;\n    case PayloadType.SmartContract:\n      bytesArray.push(serializeStacksMessage(payload.contractName));\n      bytesArray.push(serializeStacksMessage(payload.codeBody));\n      break;\n    case PayloadType.VersionedSmartContract:\n      bytesArray.push(payload.clarityVersion);\n      bytesArray.push(serializeStacksMessage(payload.contractName));\n      bytesArray.push(serializeStacksMessage(payload.codeBody));\n      break;\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      break;\n    case PayloadType.Coinbase:\n      bytesArray.push(payload.coinbaseBytes);\n      break;\n    case PayloadType.CoinbaseToAltRecipient:\n      bytesArray.push(payload.coinbaseBytes);\n      bytesArray.push(serializeCV(payload.recipient));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializePayload(bytesReader: BytesReader): Payload {\n  const payloadType = bytesReader.readUInt8Enum(PayloadType, n => {\n    throw new Error(`Cannot recognize PayloadType: ${n}`);\n  });\n\n  switch (payloadType) {\n    case PayloadType.TokenTransfer:\n      const recipient = deserializeCV(bytesReader) as PrincipalCV;\n      const amount = intToBigInt(bytesReader.readBytes(8), false);\n      const memo = deserializeMemoString(bytesReader);\n      return createTokenTransferPayload(recipient, amount, memo);\n    case PayloadType.ContractCall:\n      const contractAddress = deserializeAddress(bytesReader);\n      const contractCallName = deserializeLPString(bytesReader);\n      const functionName = deserializeLPString(bytesReader);\n      const functionArgs: ClarityValue[] = [];\n      const numberOfArgs = bytesReader.readUInt32BE();\n      for (let i = 0; i < numberOfArgs; i++) {\n        const clarityValue = deserializeCV(bytesReader);\n        functionArgs.push(clarityValue);\n      }\n      return createContractCallPayload(\n        contractAddress,\n        contractCallName,\n        functionName,\n        functionArgs\n      );\n    case PayloadType.SmartContract:\n      const smartContractName = deserializeLPString(bytesReader);\n      const codeBody = deserializeLPString(bytesReader, 4, 100_000);\n      return createSmartContractPayload(smartContractName, codeBody);\n\n    case PayloadType.VersionedSmartContract: {\n      const clarityVersion = bytesReader.readUInt8Enum(ClarityVersion, n => {\n        throw new Error(`Cannot recognize ClarityVersion: ${n}`);\n      });\n      const smartContractName = deserializeLPString(bytesReader);\n      const codeBody = deserializeLPString(bytesReader, 4, 100_000);\n      return createSmartContractPayload(smartContractName, codeBody, clarityVersion);\n    }\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      return createPoisonPayload();\n    case PayloadType.Coinbase:\n      const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n      return createCoinbasePayload(coinbaseBytes);\n    case PayloadType.CoinbaseToAltRecipient:\n      const coinbaseToAltRecipientBuffer = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n      const altRecipient = deserializeCV(bytesReader) as PrincipalCV;\n      return createCoinbasePayload(coinbaseToAltRecipientBuffer, altRecipient);\n  }\n}\n","import {\n  bytesToHex,\n  bytesToUtf8,\n  concatArray,\n  hexToBytes,\n  hexToInt,\n  intToBytes,\n  intToHex,\n  utf8ToBytes,\n} from '@stacks/common';\nimport {\n  MEMO_MAX_LENGTH_BYTES,\n  AddressHashMode,\n  AddressVersion,\n  TransactionVersion,\n  StacksMessageType,\n  PostConditionPrincipalID,\n  PostConditionType,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n} from './constants';\n\nimport { StacksPublicKey, serializePublicKey, deserializePublicKey, isCompressed } from './keys';\n\nimport {\n  exceedsMaxLengthBytes,\n  hashP2PKH,\n  rightPadHexToLength,\n  hashP2SH,\n  hashP2WSH,\n  hashP2WPKH,\n} from './utils';\n\nimport { BytesReader } from './bytesReader';\nimport {\n  PostCondition,\n  StandardPrincipal,\n  ContractPrincipal,\n  PostConditionPrincipal,\n  LengthPrefixedString,\n  AssetInfo,\n  createLPString,\n} from './postcondition-types';\nimport { Payload, deserializePayload, serializePayload } from './payload';\nimport { DeserializationError } from './errors';\nimport {\n  deserializeTransactionAuthField,\n  deserializeMessageSignature,\n  serializeMessageSignature,\n  serializeTransactionAuthField,\n  TransactionAuthField,\n} from './signature';\nimport {\n  MessageSignature,\n  Address,\n  addressHashModeToVersion,\n  addressFromVersionHash,\n} from './common';\nimport { deserializeCV, serializeCV } from './clarity';\nexport type StacksMessage =\n  | Address\n  | PostConditionPrincipal\n  | LengthPrefixedString\n  | LengthPrefixedList\n  | Payload\n  | MemoString\n  | AssetInfo\n  | PostCondition\n  | StacksPublicKey\n  | TransactionAuthField\n  | MessageSignature;\n\nexport function serializeStacksMessage(message: StacksMessage): Uint8Array {\n  switch (message.type) {\n    case StacksMessageType.Address:\n      return serializeAddress(message);\n    case StacksMessageType.Principal:\n      return serializePrincipal(message);\n    case StacksMessageType.LengthPrefixedString:\n      return serializeLPString(message);\n    case StacksMessageType.MemoString:\n      return serializeMemoString(message);\n    case StacksMessageType.AssetInfo:\n      return serializeAssetInfo(message);\n    case StacksMessageType.PostCondition:\n      return serializePostCondition(message);\n    case StacksMessageType.PublicKey:\n      return serializePublicKey(message);\n    case StacksMessageType.LengthPrefixedList:\n      return serializeLPList(message);\n    case StacksMessageType.Payload:\n      return serializePayload(message);\n    case StacksMessageType.TransactionAuthField:\n      return serializeTransactionAuthField(message);\n    case StacksMessageType.MessageSignature:\n      return serializeMessageSignature(message);\n  }\n}\n\nexport function deserializeStacksMessage(\n  bytesReader: BytesReader,\n  type: StacksMessageType,\n  listType?: StacksMessageType\n): StacksMessage {\n  switch (type) {\n    case StacksMessageType.Address:\n      return deserializeAddress(bytesReader);\n    case StacksMessageType.Principal:\n      return deserializePrincipal(bytesReader);\n    case StacksMessageType.LengthPrefixedString:\n      return deserializeLPString(bytesReader);\n    case StacksMessageType.MemoString:\n      return deserializeMemoString(bytesReader);\n    case StacksMessageType.AssetInfo:\n      return deserializeAssetInfo(bytesReader);\n    case StacksMessageType.PostCondition:\n      return deserializePostCondition(bytesReader);\n    case StacksMessageType.PublicKey:\n      return deserializePublicKey(bytesReader);\n    case StacksMessageType.Payload:\n      return deserializePayload(bytesReader);\n    case StacksMessageType.LengthPrefixedList:\n      if (!listType) {\n        throw new DeserializationError('No List Type specified');\n      }\n      return deserializeLPList(bytesReader, listType);\n    case StacksMessageType.MessageSignature:\n      return deserializeMessageSignature(bytesReader);\n    default:\n      throw new Error('Could not recognize StacksMessageType');\n  }\n}\n\nexport function createEmptyAddress(): Address {\n  return {\n    type: StacksMessageType.Address,\n    version: AddressVersion.MainnetSingleSig,\n    hash160: '0'.repeat(40),\n  };\n}\n\nexport function addressFromHashMode(\n  hashMode: AddressHashMode,\n  txVersion: TransactionVersion,\n  data: string\n): Address {\n  const version = addressHashModeToVersion(hashMode, txVersion);\n  return addressFromVersionHash(version, data);\n}\n\nexport function addressFromPublicKeys(\n  version: AddressVersion,\n  hashMode: AddressHashMode,\n  numSigs: number,\n  publicKeys: StacksPublicKey[]\n): Address {\n  if (publicKeys.length === 0) {\n    throw Error('Invalid number of public keys');\n  }\n\n  if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n    if (publicKeys.length !== 1 || numSigs !== 1) {\n      throw Error('Invalid number of public keys or signatures');\n    }\n  }\n\n  if (hashMode === AddressHashMode.SerializeP2WPKH || hashMode === AddressHashMode.SerializeP2WSH) {\n    for (let i = 0; i < publicKeys.length; i++) {\n      if (!isCompressed(publicKeys[i])) {\n        throw Error('Public keys must be compressed for segwit');\n      }\n    }\n  }\n\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      return addressFromVersionHash(version, hashP2PKH(publicKeys[0].data));\n    case AddressHashMode.SerializeP2WPKH:\n      return addressFromVersionHash(version, hashP2WPKH(publicKeys[0].data));\n    case AddressHashMode.SerializeP2SH:\n      return addressFromVersionHash(version, hashP2SH(numSigs, publicKeys.map(serializePublicKey)));\n    case AddressHashMode.SerializeP2WSH:\n      return addressFromVersionHash(\n        version,\n        hashP2WSH(numSigs, publicKeys.map(serializePublicKey))\n      );\n  }\n}\n\nexport function serializeAddress(address: Address): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(hexToBytes(intToHex(address.version, 1)));\n  bytesArray.push(hexToBytes(address.hash160));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAddress(bytesReader: BytesReader): Address {\n  const version = hexToInt(bytesToHex(bytesReader.readBytes(1)));\n  const data = bytesToHex(bytesReader.readBytes(20));\n\n  return { type: StacksMessageType.Address, version, hash160: data };\n}\n\nexport function serializePrincipal(principal: PostConditionPrincipal): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(principal.prefix);\n  bytesArray.push(serializeAddress(principal.address));\n  if (principal.prefix === PostConditionPrincipalID.Contract) {\n    bytesArray.push(serializeLPString(principal.contractName));\n  }\n  return concatArray(bytesArray);\n}\n\nexport function deserializePrincipal(bytesReader: BytesReader): PostConditionPrincipal {\n  const prefix = bytesReader.readUInt8Enum(PostConditionPrincipalID, n => {\n    throw new DeserializationError(`Unexpected Principal payload type: ${n}`);\n  });\n  const address = deserializeAddress(bytesReader);\n  if (prefix === PostConditionPrincipalID.Standard) {\n    return { type: StacksMessageType.Principal, prefix, address } as StandardPrincipal;\n  }\n  const contractName = deserializeLPString(bytesReader);\n  return {\n    type: StacksMessageType.Principal,\n    prefix,\n    address,\n    contractName,\n  } as ContractPrincipal;\n}\n\nexport function serializeLPString(lps: LengthPrefixedString) {\n  const bytesArray = [];\n  const contentBytes = utf8ToBytes(lps.content);\n  const length = contentBytes.byteLength;\n  bytesArray.push(hexToBytes(intToHex(length, lps.lengthPrefixBytes)));\n  bytesArray.push(contentBytes);\n  return concatArray(bytesArray);\n}\n\nexport function deserializeLPString(\n  bytesReader: BytesReader,\n  prefixBytes?: number,\n  maxLength?: number\n): LengthPrefixedString {\n  prefixBytes = prefixBytes ? prefixBytes : 1;\n  const length = hexToInt(bytesToHex(bytesReader.readBytes(prefixBytes)));\n  const content = bytesToUtf8(bytesReader.readBytes(length));\n  return createLPString(content, prefixBytes, maxLength ?? 128);\n}\n\nexport function codeBodyString(content: string): LengthPrefixedString {\n  return createLPString(content, 4, 100_000);\n}\n\nexport interface MemoString {\n  readonly type: StacksMessageType.MemoString;\n  readonly content: string;\n}\n\nexport function createMemoString(content: string): MemoString {\n  if (content && exceedsMaxLengthBytes(content, MEMO_MAX_LENGTH_BYTES)) {\n    throw new Error(`Memo exceeds maximum length of ${MEMO_MAX_LENGTH_BYTES} bytes`);\n  }\n  return { type: StacksMessageType.MemoString, content };\n}\n\nexport function serializeMemoString(memoString: MemoString): Uint8Array {\n  const bytesArray = [];\n  const contentBytes = utf8ToBytes(memoString.content);\n  const paddedContent = rightPadHexToLength(bytesToHex(contentBytes), MEMO_MAX_LENGTH_BYTES * 2);\n  bytesArray.push(hexToBytes(paddedContent));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeMemoString(bytesReader: BytesReader): MemoString {\n  const content = bytesToUtf8(bytesReader.readBytes(MEMO_MAX_LENGTH_BYTES));\n  return { type: StacksMessageType.MemoString, content };\n}\n\nexport function serializeAssetInfo(info: AssetInfo): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(serializeAddress(info.address));\n  bytesArray.push(serializeLPString(info.contractName));\n  bytesArray.push(serializeLPString(info.assetName));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAssetInfo(bytesReader: BytesReader): AssetInfo {\n  return {\n    type: StacksMessageType.AssetInfo,\n    address: deserializeAddress(bytesReader),\n    contractName: deserializeLPString(bytesReader),\n    assetName: deserializeLPString(bytesReader),\n  };\n}\n\nexport interface LengthPrefixedList {\n  readonly type: StacksMessageType.LengthPrefixedList;\n  readonly lengthPrefixBytes: number;\n  readonly values: StacksMessage[];\n}\n\nexport function createLPList<T extends StacksMessage>(\n  values: T[],\n  lengthPrefixBytes?: number\n): LengthPrefixedList {\n  return {\n    type: StacksMessageType.LengthPrefixedList,\n    lengthPrefixBytes: lengthPrefixBytes || 4,\n    values,\n  };\n}\n\nexport function serializeLPList(lpList: LengthPrefixedList): Uint8Array {\n  const list = lpList.values;\n  const bytesArray = [];\n  bytesArray.push(hexToBytes(intToHex(list.length, lpList.lengthPrefixBytes)));\n  for (const l of list) {\n    bytesArray.push(serializeStacksMessage(l));\n  }\n  return concatArray(bytesArray);\n}\n\nexport function deserializeLPList(\n  bytesReader: BytesReader,\n  type: StacksMessageType,\n  lengthPrefixBytes?: number\n): LengthPrefixedList {\n  const length = hexToInt(bytesToHex(bytesReader.readBytes(lengthPrefixBytes || 4)));\n\n  const l: StacksMessage[] = [];\n  for (let index = 0; index < length; index++) {\n    switch (type) {\n      case StacksMessageType.Address:\n        l.push(deserializeAddress(bytesReader));\n        break;\n      case StacksMessageType.LengthPrefixedString:\n        l.push(deserializeLPString(bytesReader));\n        break;\n      case StacksMessageType.MemoString:\n        l.push(deserializeMemoString(bytesReader));\n        break;\n      case StacksMessageType.AssetInfo:\n        l.push(deserializeAssetInfo(bytesReader));\n        break;\n      case StacksMessageType.PostCondition:\n        l.push(deserializePostCondition(bytesReader));\n        break;\n      case StacksMessageType.PublicKey:\n        l.push(deserializePublicKey(bytesReader));\n        break;\n      case StacksMessageType.TransactionAuthField:\n        l.push(deserializeTransactionAuthField(bytesReader));\n        break;\n    }\n  }\n  return createLPList(l, lengthPrefixBytes);\n}\n\nexport function serializePostCondition(postCondition: PostCondition): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(postCondition.conditionType);\n  bytesArray.push(serializePrincipal(postCondition.principal));\n\n  if (\n    postCondition.conditionType === PostConditionType.Fungible ||\n    postCondition.conditionType === PostConditionType.NonFungible\n  ) {\n    bytesArray.push(serializeAssetInfo(postCondition.assetInfo));\n  }\n\n  if (postCondition.conditionType === PostConditionType.NonFungible) {\n    bytesArray.push(serializeCV(postCondition.assetName));\n  }\n\n  bytesArray.push(postCondition.conditionCode);\n\n  if (\n    postCondition.conditionType === PostConditionType.STX ||\n    postCondition.conditionType === PostConditionType.Fungible\n  ) {\n    bytesArray.push(intToBytes(postCondition.amount, false, 8));\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializePostCondition(bytesReader: BytesReader): PostCondition {\n  const postConditionType = bytesReader.readUInt8Enum(PostConditionType, n => {\n    throw new DeserializationError(`Could not read ${n} as PostConditionType`);\n  });\n\n  const principal = deserializePrincipal(bytesReader);\n\n  let conditionCode;\n  let assetInfo;\n  let amount: bigint;\n  switch (postConditionType) {\n    case PostConditionType.STX:\n      conditionCode = bytesReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.STX,\n        principal,\n        conditionCode,\n        amount,\n      };\n    case PostConditionType.Fungible:\n      assetInfo = deserializeAssetInfo(bytesReader);\n      conditionCode = bytesReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.Fungible,\n        principal,\n        conditionCode,\n        amount,\n        assetInfo,\n      };\n    case PostConditionType.NonFungible:\n      assetInfo = deserializeAssetInfo(bytesReader);\n      const assetName = deserializeCV(bytesReader);\n      conditionCode = bytesReader.readUInt8Enum(NonFungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.NonFungible,\n        principal,\n        conditionCode,\n        assetInfo,\n        assetName,\n      };\n  }\n}\n","import { BytesReader } from './bytesReader';\nimport { DeserializationError } from './errors';\nimport { PubKeyEncoding, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, StacksMessageType } from './constants';\nimport {\n  compressPublicKey,\n  deserializePublicKey,\n  serializePublicKey,\n  StacksPublicKey,\n} from './keys';\n\nimport { createMessageSignature, MessageSignature } from './common';\n\n// @ts-ignore\nimport { bytesToHex, concatArray, hexToBytes } from '@stacks/common';\n\nexport enum AuthFieldType {\n  PublicKeyCompressed = 0x00,\n  PublicKeyUncompressed = 0x01,\n  SignatureCompressed = 0x02,\n  SignatureUncompressed = 0x03,\n}\n\nexport interface TransactionAuthField {\n  type: StacksMessageType.TransactionAuthField;\n  pubKeyEncoding: PubKeyEncoding;\n  contents: TransactionAuthFieldContents;\n}\n\nexport type TransactionAuthFieldContents = StacksPublicKey | MessageSignature;\n\nexport function deserializeMessageSignature(bytesReader: BytesReader): MessageSignature {\n  return createMessageSignature(\n    bytesToHex(bytesReader.readBytes(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES))\n  );\n}\n\nexport interface TransactionAuthField {\n  type: StacksMessageType.TransactionAuthField;\n  pubKeyEncoding: PubKeyEncoding;\n  contents: TransactionAuthFieldContents;\n}\n\nexport function createTransactionAuthField(\n  pubKeyEncoding: PubKeyEncoding,\n  contents: TransactionAuthFieldContents\n): TransactionAuthField {\n  return {\n    pubKeyEncoding,\n    type: StacksMessageType.TransactionAuthField,\n    contents,\n  };\n}\n\nexport function deserializeTransactionAuthField(bytesReader: BytesReader): TransactionAuthField {\n  const authFieldType = bytesReader.readUInt8Enum(AuthFieldType, n => {\n    throw new DeserializationError(`Could not read ${n} as AuthFieldType`);\n  });\n\n  switch (authFieldType) {\n    case AuthFieldType.PublicKeyCompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Compressed,\n        deserializePublicKey(bytesReader)\n      );\n    case AuthFieldType.PublicKeyUncompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Uncompressed,\n        deserializePublicKey(bytesReader)\n      );\n    case AuthFieldType.SignatureCompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Compressed,\n        deserializeMessageSignature(bytesReader)\n      );\n    case AuthFieldType.SignatureUncompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Uncompressed,\n        deserializeMessageSignature(bytesReader)\n      );\n    default:\n      throw new Error(`Unknown auth field type: ${JSON.stringify(authFieldType)}`);\n  }\n}\n\nexport function serializeMessageSignature(messageSignature: MessageSignature): Uint8Array {\n  return hexToBytes(messageSignature.data);\n}\n\nexport function serializeTransactionAuthField(field: TransactionAuthField): Uint8Array {\n  const bytesArray = [];\n\n  switch (field.contents.type) {\n    case StacksMessageType.PublicKey:\n      if (field.pubKeyEncoding == PubKeyEncoding.Compressed) {\n        bytesArray.push(AuthFieldType.PublicKeyCompressed);\n        bytesArray.push(serializePublicKey(field.contents));\n      } else {\n        bytesArray.push(AuthFieldType.PublicKeyUncompressed);\n        bytesArray.push(serializePublicKey(compressPublicKey(field.contents.data)));\n      }\n      break;\n    case StacksMessageType.MessageSignature:\n      if (field.pubKeyEncoding == PubKeyEncoding.Compressed) {\n        bytesArray.push(AuthFieldType.SignatureCompressed);\n      } else {\n        bytesArray.push(AuthFieldType.SignatureUncompressed);\n      }\n      bytesArray.push(serializeMessageSignature(field.contents));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n","import { ClarityType } from '../constants';\n\ninterface StringAsciiCV {\n  readonly type: ClarityType.StringASCII;\n  readonly data: string;\n}\n\ninterface StringUtf8CV {\n  readonly type: ClarityType.StringUTF8;\n  readonly data: string;\n}\n\n/**\n * Converts ClarityValue to stringAsciiCV\n *\n * @param {data} ClarityValue value to be converted to stringAsciiCV clarity type\n *\n * @returns {StringAsciiCV} returns instance of type StringAsciiCV\n *\n * @example\n * ```\n *  import { stringAsciiCV } from '@stacks/transactions';\n *\n *  const stringAscii = stringAsciiCV('test');\n *\n *  // { type: 13, data: 'hello' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst stringAsciiCV = (data: string): StringAsciiCV => {\n  return { type: ClarityType.StringASCII, data };\n};\n\n/**\n * Converts ClarityValue to stringUtf8CV\n *\n * @param {data} ClarityValue value to be converted to stringUtf8CV clarity type\n *\n * @returns {stringUtf8CV} returns instance of type stringUtf8CV\n *\n * @example\n * ```\n *  import { stringUtf8CV } from '@stacks/transactions';\n *\n *  const stringUTF8 = stringUtf8CV('test');\n *\n *  // { type: 13, data: 'hello' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst stringUtf8CV = (data: string): StringUtf8CV => {\n  return { type: ClarityType.StringUTF8, data };\n};\n\n/**\n * @ignore\n */\nconst stringCV = (data: string, encoding: 'ascii' | 'utf8'): StringAsciiCV | StringUtf8CV => {\n  switch (encoding) {\n    case 'ascii':\n      return stringAsciiCV(data);\n    case 'utf8':\n      return stringUtf8CV(data);\n  }\n};\n\nexport { StringAsciiCV, StringUtf8CV, stringAsciiCV, stringUtf8CV, stringCV };\n","import {\n  ClarityType,\n  ClarityValue,\n  intCV,\n  uintCV,\n  bufferCV,\n  trueCV,\n  falseCV,\n  standardPrincipalCVFromAddress,\n  contractPrincipalCVFromAddress,\n  responseOkCV,\n  responseErrorCV,\n  noneCV,\n  someCV,\n  listCV,\n  tupleCV,\n} from '.';\nimport { BytesReader as BytesReader } from '../bytesReader';\nimport { deserializeAddress, deserializeLPString } from '../types';\nimport { DeserializationError } from '../errors';\nimport { stringAsciiCV, stringUtf8CV } from './types/stringCV';\nimport { bytesToAscii, bytesToUtf8, hexToBytes } from '@stacks/common';\n\n/**\n * Deserializes clarity value to clarity type\n *\n * @param {value} Uint8Array | string value to be converted to clarity type\n **\n * @returns {ClarityType} returns the clarity type instance\n *\n * @example\n * ```\n *  import { intCV, serializeCV, deserializeCV } from '@stacks/transactions';\n *\n *  const serialized = serializeCV(intCV(100)); // Similarly works for other clarity types as well like listCV, booleanCV ...\n *\n *  // <Uint8Array 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 64>\n *\n *  const deserialized = deserializeCV(serialized);\n *  // { type: 0, value: 100n }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport default function deserializeCV<T extends ClarityValue = ClarityValue>(\n  serializedClarityValue: BytesReader | Uint8Array | string\n): T {\n  let bytesReader: BytesReader;\n  if (typeof serializedClarityValue === 'string') {\n    const hasHexPrefix = serializedClarityValue.slice(0, 2).toLowerCase() === '0x';\n    bytesReader = new BytesReader(\n      hexToBytes(hasHexPrefix ? serializedClarityValue.slice(2) : serializedClarityValue)\n    );\n  } else if (serializedClarityValue instanceof Uint8Array) {\n    bytesReader = new BytesReader(serializedClarityValue);\n  } else {\n    bytesReader = serializedClarityValue;\n  }\n  const type = bytesReader.readUInt8Enum(ClarityType, n => {\n    throw new DeserializationError(`Cannot recognize Clarity Type: ${n}`);\n  });\n\n  switch (type) {\n    case ClarityType.Int:\n      return intCV(bytesReader.readBytes(16)) as T;\n\n    case ClarityType.UInt:\n      return uintCV(bytesReader.readBytes(16)) as T;\n\n    case ClarityType.Buffer:\n      const bufferLength = bytesReader.readUInt32BE();\n      return bufferCV(bytesReader.readBytes(bufferLength)) as T;\n\n    case ClarityType.BoolTrue:\n      return trueCV() as T;\n\n    case ClarityType.BoolFalse:\n      return falseCV() as T;\n\n    case ClarityType.PrincipalStandard:\n      const sAddress = deserializeAddress(bytesReader);\n      return standardPrincipalCVFromAddress(sAddress) as T;\n\n    case ClarityType.PrincipalContract:\n      const cAddress = deserializeAddress(bytesReader);\n      const contractName = deserializeLPString(bytesReader);\n      return contractPrincipalCVFromAddress(cAddress, contractName) as T;\n\n    case ClarityType.ResponseOk:\n      return responseOkCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityType.ResponseErr:\n      return responseErrorCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityType.OptionalNone:\n      return noneCV() as T;\n\n    case ClarityType.OptionalSome:\n      return someCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityType.List:\n      const listLength = bytesReader.readUInt32BE();\n      const listContents: ClarityValue[] = [];\n      for (let i = 0; i < listLength; i++) {\n        listContents.push(deserializeCV(bytesReader));\n      }\n      return listCV(listContents) as T;\n\n    case ClarityType.Tuple:\n      const tupleLength = bytesReader.readUInt32BE();\n      const tupleContents: { [key: string]: ClarityValue } = {};\n      for (let i = 0; i < tupleLength; i++) {\n        const clarityName = deserializeLPString(bytesReader).content;\n        if (clarityName === undefined) {\n          throw new DeserializationError('\"content\" is undefined');\n        }\n        tupleContents[clarityName] = deserializeCV(bytesReader);\n      }\n      return tupleCV(tupleContents) as T;\n\n    case ClarityType.StringASCII:\n      const asciiStrLen = bytesReader.readUInt32BE();\n      const asciiStr = bytesToAscii(bytesReader.readBytes(asciiStrLen));\n      return stringAsciiCV(asciiStr) as T;\n\n    case ClarityType.StringUTF8:\n      const utf8StrLen = bytesReader.readUInt32BE();\n      const utf8Str = bytesToUtf8(bytesReader.readBytes(utf8StrLen));\n      return stringUtf8CV(utf8Str) as T;\n\n    default:\n      throw new DeserializationError(\n        'Unable to deserialize Clarity Value from Uint8Array. Could not find valid Clarity Type.'\n      );\n  }\n}\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\n\ninterface ListCV<T extends ClarityValue = ClarityValue> {\n  type: ClarityType.List;\n  list: T[];\n}\n\n/**\n * Create list of clarity types\n *\n * @param {ClarityValue[]} list of ClarityValues to be converted to ListCV clarity type\n *\n * @returns {ListCV<T>} instance of type ListCV<T> of the provided values\n *\n * @example\n * ```\n *  import { listCV, intCV } from '@stacks/transactions';\n *\n *  const list = listCV([intCV(1), intCV(2), intCV(3), intCV(-4)]);\n *  // { type: 11, list: [ { type: 0, value: 1n }, { type: 0, value: 2n }, { type: 0, value: 3n }, { type: 0, value: -4n } ] }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction listCV<T extends ClarityValue = ClarityValue>(values: T[]): ListCV<T> {\n  return { type: ClarityType.List, list: values };\n}\n\nexport { ListCV, listCV };\n","import { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512_256 } from '@noble/hashes/sha512';\nimport { utils } from '@noble/secp256k1';\nimport { bytesToHex, concatArray, concatBytes, utf8ToBytes, with0x } from '@stacks/common';\nimport { c32addressDecode } from 'c32check';\nimport lodashCloneDeep from 'lodash.clonedeep';\nimport { ClarityValue, deserializeCV, serializeCV } from './clarity';\n\n// Export verify as utility method for signature verification\nexport { verify as verifySignature } from '@noble/secp256k1';\n\n/**\n * Use utils.randomBytes to replace randombytes dependency\n * Generates random bytes of given length\n * @param {number} bytesLength an optional bytes length, default is 32 bytes\n */\nexport const randomBytes = (bytesLength?: number): Uint8Array => utils.randomBytes(bytesLength);\n\nexport const leftPadHex = (hexString: string): string =>\n  hexString.length % 2 == 0 ? hexString : `0${hexString}`;\n\nexport const leftPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padStart(length, '0');\n\nexport const rightPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padEnd(length, '0');\n\nexport const exceedsMaxLengthBytes = (string: string, maxLengthBytes: number): boolean =>\n  string ? utf8ToBytes(string).length > maxLengthBytes : false;\n\nexport function cloneDeep<T>(obj: T): T {\n  return lodashCloneDeep(obj);\n}\n\nexport function omit<T, K extends keyof any>(obj: T, prop: K): Omit<T, K> {\n  const clone = cloneDeep(obj);\n  // @ts-expect-error\n  delete clone[prop];\n  return clone;\n}\n\nexport const txidFromData = (data: Uint8Array): string => {\n  return bytesToHex(sha512_256(data));\n};\n\nexport const hash160 = (input: Uint8Array): Uint8Array => {\n  return ripemd160(sha256(input));\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// single-sig address (p2pkh)\nexport const hashP2PKH = (input: Uint8Array): string => {\n  return bytesToHex(hash160(input));\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// single-sig address over p2sh (p2h-p2wpkh)\nexport const hashP2WPKH = (input: Uint8Array): string => {\n  const keyHash = hash160(input);\n  const redeemScript = concatBytes(new Uint8Array([0]), new Uint8Array([keyHash.length]), keyHash);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// multi-sig address (p2sh)\nexport const hashP2SH = (numSigs: number, pubKeys: Uint8Array[]): string => {\n  if (numSigs > 15 || pubKeys.length > 15) {\n    throw Error('P2SH multisig address can only contain up to 15 public keys');\n  }\n\n  // construct P2SH script\n  const bytesArray = [];\n  // OP_n\n  bytesArray.push(80 + numSigs);\n  // public keys prepended by their length\n  pubKeys.forEach(pubKey => {\n    bytesArray.push(pubKey.length);\n    bytesArray.push(pubKey);\n  });\n  // OP_m\n  bytesArray.push(80 + pubKeys.length);\n  // OP_CHECKMULTISIG\n  bytesArray.push(174);\n\n  const redeemScript = concatArray(bytesArray);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// multisig address over p2sh (p2sh-p2wsh)\nexport const hashP2WSH = (numSigs: number, pubKeys: Uint8Array[]): string => {\n  if (numSigs > 15 || pubKeys.length > 15) {\n    throw Error('P2WSH multisig address can only contain up to 15 public keys');\n  }\n\n  // construct P2SH script\n  const scriptArray = [];\n  // OP_n\n  scriptArray.push(80 + numSigs);\n  // public keys prepended by their length\n  pubKeys.forEach(pubKey => {\n    scriptArray.push(pubKey.length);\n    scriptArray.push(pubKey);\n  });\n  // OP_m\n  scriptArray.push(80 + pubKeys.length);\n  // OP_CHECKMULTISIG\n  scriptArray.push(174);\n\n  const script = concatArray(scriptArray);\n  const digest = sha256(script);\n\n  const bytesArray = [];\n  bytesArray.push(0);\n  bytesArray.push(digest.length);\n  bytesArray.push(digest);\n\n  const redeemScript = concatArray(bytesArray);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\nexport function isClarityName(name: string) {\n  const regex = /^[a-zA-Z]([a-zA-Z0-9]|[-_!?+<>=/*])*$|^[-+=/*]$|^[<>]=?$/;\n  return regex.test(name) && name.length < 128;\n}\n\n/**\n * Converts a clarity value to a hex encoded string with `0x` prefix\n * @param {ClarityValue} cv  - the clarity value to convert\n */\nexport function cvToHex(cv: ClarityValue) {\n  const serialized = serializeCV(cv);\n  return `0x${bytesToHex(serialized)}`;\n}\n\n/**\n * Converts a hex encoded string to a clarity value\n * @param {string} hex - the hex encoded string with or without `0x` prefix\n */\nexport function hexToCV(hex: string) {\n  return deserializeCV(hex);\n}\n/**\n * Read only function response object\n *\n * @param {Boolean} okay - the status of the response\n * @param {string} result - serialized hex clarity value\n */\n\nexport interface ReadOnlyFunctionSuccessResponse {\n  okay: true;\n  result: string;\n}\n\nexport interface ReadOnlyFunctionErrorResponse {\n  okay: false;\n  cause: string;\n}\n\nexport type ReadOnlyFunctionResponse =\n  | ReadOnlyFunctionSuccessResponse\n  | ReadOnlyFunctionErrorResponse;\n\n/**\n * Converts the response of a read-only function call into its Clarity Value\n * @param param\n */\nexport const parseReadOnlyResponse = (response: ReadOnlyFunctionResponse): ClarityValue => {\n  if (response.okay) return hexToCV(response.result);\n  throw new Error(response.cause);\n};\n\nexport const validateStacksAddress = (stacksAddress: string): boolean => {\n  try {\n    c32addressDecode(stacksAddress);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const validateTxId = (txid: string): boolean => {\n  if (txid === 'success') return true; // Bypass fetchMock tests // todo: move this line into mocks in test files\n  const value = with0x(txid).toLowerCase();\n  if (value.length !== 66) return false;\n  return with0x(BigInt(value).toString(16).padStart(64, '0')) === value;\n};\n","import { decodeToken, SECP256K1Client, TokenSigner, TokenVerifier } from 'jsontokens';\nimport { TokenInterface } from 'jsontokens/lib/decode';\nimport { nextYear, makeUUID4 } from '@stacks/common';\nimport { getAddressFromPublicKey } from '@stacks/transactions';\n\n/**\n * Signs a profile token\n * @param {Object} profile - the JSON of the profile to be signed\n * @param {String} privateKey - the signing private key\n * @param {Object} subject - the entity that the information is about\n * @param {Object} issuer - the entity that is issuing the token\n * @param {String} signingAlgorithm - the signing algorithm to use\n * @param {Date} issuedAt - the time of issuance of the token\n * @param {Date} expiresAt - the time of expiration of the token\n * @returns {Object} - the signed profile token\n *\n */\nexport function signProfileToken(\n  profile: any,\n  privateKey: string,\n  subject?: any,\n  issuer?: any,\n  signingAlgorithm = 'ES256K',\n  issuedAt = new Date(),\n  expiresAt = nextYear()\n): string {\n  if (signingAlgorithm !== 'ES256K') {\n    throw new Error('Signing algorithm not supported');\n  }\n\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n\n  if (!subject) {\n    subject = { publicKey };\n  }\n\n  if (!issuer) {\n    issuer = { publicKey };\n  }\n\n  const tokenSigner = new TokenSigner(signingAlgorithm, privateKey);\n\n  const payload = {\n    jti: makeUUID4(),\n    iat: issuedAt.toISOString(),\n    exp: expiresAt.toISOString(),\n    subject,\n    issuer,\n    claim: profile,\n  };\n\n  return tokenSigner.sign(payload);\n}\n\n/**\n * Wraps a token for a profile token file\n * @param {String} token - the token to be wrapped\n * @returns {Object} - including `token` and `decodedToken`\n */\nexport function wrapProfileToken(token: string) {\n  return {\n    token,\n    decodedToken: decodeToken(token),\n  };\n}\n\n/**\n * Verifies a profile token\n * @param {String} token - the token to be verified\n * @param {String} publicKeyOrAddress - the public key or address of the\n *   keypair that is thought to have signed the token\n * @returns {Object} - the verified, decoded profile token\n * @throws {Error} - throws an error if token verification fails\n */\nexport function verifyProfileToken(token: string, publicKeyOrAddress: string): TokenInterface {\n  const decodedToken = decodeToken(token);\n  const payload = decodedToken.payload;\n  if (typeof payload === 'string') {\n    throw new Error('Unexpected token payload type of string');\n  }\n\n  // Inspect and verify the subject\n  if (payload.hasOwnProperty('subject') && payload.subject) {\n    if (!payload.subject.hasOwnProperty('publicKey')) {\n      throw new Error(\"Token doesn't have a subject public key\");\n    }\n  } else {\n    throw new Error(\"Token doesn't have a subject\");\n  }\n\n  // Inspect and verify the issuer\n  if (payload.hasOwnProperty('issuer') && payload.issuer) {\n    if (!payload.issuer.hasOwnProperty('publicKey')) {\n      throw new Error(\"Token doesn't have an issuer public key\");\n    }\n  } else {\n    throw new Error(\"Token doesn't have an issuer\");\n  }\n\n  // Inspect and verify the claim\n  if (!payload.hasOwnProperty('claim')) {\n    throw new Error(\"Token doesn't have a claim\");\n  }\n\n  const issuerPublicKey = (payload.issuer as Record<string, string>).publicKey;\n  const address = getAddressFromPublicKey(issuerPublicKey);\n\n  if (publicKeyOrAddress === issuerPublicKey) {\n    // pass\n  } else if (publicKeyOrAddress === address) {\n    // pass\n  } else {\n    throw new Error('Token issuer public key does not match the verifying value');\n  }\n\n  const tokenVerifier = new TokenVerifier(decodedToken.header.alg as string, issuerPublicKey);\n  if (!tokenVerifier) {\n    throw new Error('Invalid token verifier');\n  }\n\n  const tokenVerified = tokenVerifier.verify(token);\n  if (!tokenVerified) {\n    throw new Error('Token verification failed');\n  }\n\n  return decodedToken;\n}\n\n/**\n * Extracts a profile from an encoded token and optionally verifies it,\n * if `publicKeyOrAddress` is provided.\n * @param {String} token - the token to be extracted\n * @param {String} publicKeyOrAddress - the public key or address of the\n *   keypair that is thought to have signed the token\n * @returns {Object} - the profile extracted from the encoded token\n * @throws {Error} - if the token isn't signed by the provided `publicKeyOrAddress`\n */\nexport function extractProfile(\n  token: string,\n  publicKeyOrAddress: string | null = null\n): Record<string, any> {\n  let decodedToken;\n  if (publicKeyOrAddress) {\n    decodedToken = verifyProfileToken(token, publicKeyOrAddress);\n  } else {\n    decodedToken = decodeToken(token);\n  }\n\n  let profile = {};\n  if (decodedToken.hasOwnProperty('payload')) {\n    const payload = decodedToken.payload;\n    if (typeof payload === 'string') {\n      throw new Error('Unexpected token payload type of string');\n    }\n    if (payload.hasOwnProperty('claim')) {\n      profile = payload.claim as Record<string, any>;\n    }\n  }\n\n  return profile;\n}\n","/**\n * This logic is in a separate file with no dependencies so that it can be\n * loaded and executed as soon as possible to fulfill the purpose of the protocol\n * detection technique. The effectiveness of this is obviously subject to how web\n * apps bundle/consume the blockstack.js lib.\n */\n\nconst GLOBAL_DETECTION_CACHE_KEY = '_blockstackDidCheckEchoReply';\nconst ECHO_REPLY_PARAM = 'echoReply';\nconst AUTH_CONTINUATION_PARAM = 'authContinuation';\n\nfunction getQueryStringParams(query: string): Record<string, string> {\n  if (!query) {\n    return {};\n  }\n  // Trim a starting `?` character if exists\n  const trimmed = /^[?#]/.test(query) ? query.slice(1) : query;\n  return trimmed.split('&').reduce((params, param) => {\n    const [key, value] = param.split('=');\n    params[key] = value ? decodeURIComponent(value.replace(/\\+/g, ' ')) : '';\n    return params;\n  }, {} as Record<string, string>);\n}\n\n/**\n * Checks if the current window location URL contains an 'echoReply' parameter\n * which indicates that this page was only opened to signal back to the originating\n * tab that the protocol handler is installed.\n * If found, then localStorage events are used to notify the other tab,\n * and this page is redirected back to the Blockstack authenticator URL.\n * This function caches its result and will not trigger multiple redirects when\n * invoked multiple times.\n * @returns True if detected and the page will be automatically redirected.\n * @hidden\n */\nexport function protocolEchoReplyDetection(): boolean {\n  // Check that the `window` APIs exist\n  let globalScope: Window;\n  if (typeof self !== 'undefined') {\n    globalScope = self;\n  } else if (typeof window !== 'undefined') {\n    globalScope = window;\n  } else {\n    // Exit detection function - we are not running in a browser environment.\n    return false;\n  }\n\n  if (!globalScope.location || !globalScope.localStorage) {\n    // Exit detection function - we are not running in a browser environment.\n    return false;\n  }\n\n  // Avoid performing the check twice and triggered multiple redirect timers.\n  const existingDetection = (globalScope as any)[GLOBAL_DETECTION_CACHE_KEY];\n  if (typeof existingDetection === 'boolean') {\n    return existingDetection;\n  }\n\n  const searchParams = getQueryStringParams(globalScope.location.search);\n  const echoReplyParam = searchParams[ECHO_REPLY_PARAM];\n  if (echoReplyParam) {\n    (globalScope as any)[GLOBAL_DETECTION_CACHE_KEY] = true;\n\n    // Use localStorage to notify originated tab that protocol handler is available and working.\n    const echoReplyKey = `echo-reply-${echoReplyParam}`;\n\n    // Set the echo-reply result in localStorage for the other window to see.\n    globalScope.localStorage.setItem(echoReplyKey, 'success');\n\n    // Redirect back to the localhost auth url, as opposed to another protocol launch.\n    // This will re-use the same tab rather than creating another useless one.\n    globalScope.setTimeout(() => {\n      const authContinuationParam = searchParams[AUTH_CONTINUATION_PARAM];\n      globalScope.location.href = authContinuationParam;\n    }, 10);\n\n    return true;\n  }\n\n  return false;\n}\n","import { AppConfig } from './appConfig';\nimport { SessionOptions } from './sessionData';\nimport { InstanceDataStore, LocalStorageStore, SessionDataStore } from './sessionStore';\nimport { decodeToken } from 'jsontokens';\nimport { verifyAuthResponse } from './verification';\nimport * as authMessages from './messages';\nimport {\n  decryptContent,\n  encryptContent,\n  EncryptContentOptions,\n  isValidPrivateKey,\n} from '@stacks/encryption';\nimport { getAddressFromDID } from './dids';\nimport {\n  BLOCKSTACK_DEFAULT_GAIA_HUB_URL,\n  getGlobalObject,\n  InvalidStateError,\n  isLaterVersion,\n  Logger,\n  LoginFailedError,\n  MissingParameterError,\n  nextHour,\n} from '@stacks/common';\nimport { extractProfile } from '@stacks/profile';\nimport { AuthScope, DEFAULT_PROFILE } from './constants';\n\nimport { UserData } from './userData';\nimport { createFetchFn, FetchFn, StacksMainnet } from '@stacks/network';\nimport { protocolEchoReplyDetection } from './protocolEchoDetection';\n\n/**\n *\n * Represents an instance of a signed in user for a particular app.\n *\n * A signed in user has access to two major pieces of information\n * about the user, the user's private key for that app and the location\n * of the user's gaia storage bucket for the app.\n *\n * A user can be signed in either directly through the interactive\n * sign in process or by directly providing the app private key.\n *\n\n *\n */\nexport class UserSession {\n  appConfig: AppConfig;\n\n  store: SessionDataStore;\n\n  /**\n   * Creates a UserSession object\n   *\n   * @param options\n   */\n  constructor(options?: {\n    appConfig?: AppConfig;\n    sessionStore?: SessionDataStore;\n    sessionOptions?: SessionOptions;\n  }) {\n\n    Logger.info('make new user session class instance');\n    Logger.warn('make new user session class instance');\n    Logger.error('make new user session class instance');\n    let runningInBrowser = true;\n\n    if (typeof window === 'undefined' && typeof self === 'undefined') {\n      // Logger.debug('UserSession: not running in browser')\n      runningInBrowser = false;\n    }\n\n    if (options && options.appConfig) {\n      this.appConfig = options.appConfig;\n    } else if (runningInBrowser) {\n      this.appConfig = new AppConfig();\n    } else {\n      throw new MissingParameterError('You need to specify options.appConfig');\n    }\n\n    if (options && options.sessionStore) {\n      this.store = options.sessionStore;\n    } else if (runningInBrowser) {\n      if (options) {\n        this.store = new LocalStorageStore(options.sessionOptions);\n      } else {\n        this.store = new LocalStorageStore();\n      }\n    } else if (options) {\n      this.store = new InstanceDataStore(options.sessionOptions);\n    } else {\n      this.store = new InstanceDataStore();\n    }\n  }\n\n  /**\n   * Generates an authentication request that can be sent to the Blockstack\n   * browser for the user to approve sign in. This authentication request can\n   * then be used for sign in by passing it to the [[redirectToSignInWithAuthRequest]]\n   * method.\n   *\n   * *Note*: This method should only be used if you want to use a customized authentication\n   * flow. Typically, you'd use [[redirectToSignIn]] which is the default sign in method.\n   *\n   * @param transitKey A HEX encoded transit private key.\n   * @param redirectURI Location to redirect the user to after sign in approval.\n   * @param manifestURI Location of this app's manifest file.\n   * @param scopes The permissions this app is requesting. The default is `store_write`.\n   * @param appDomain The origin of the app.\n   * @param expiresAt The time at which this request is no longer valid.\n   * @param extraParams Any extra parameters to pass to the authenticator. Use this to\n   * pass options that aren't part of the Blockstack authentication specification,\n   * but might be supported by special authenticators.\n   *\n   * @returns {String} the authentication request token\n   */\n  makeAuthRequestToken(\n    transitKey?: string,\n    redirectURI?: string,\n    manifestURI?: string,\n    scopes?: (AuthScope | string)[],\n    appDomain?: string,\n    expiresAt: number = nextHour().getTime(),\n    extraParams: any = {}\n  ): string {\n    const appConfig = this.appConfig;\n    if (!appConfig) {\n      throw new InvalidStateError('Missing AppConfig');\n    }\n    transitKey = transitKey || this.generateAndStoreTransitKey();\n    redirectURI = redirectURI || appConfig.redirectURI();\n    manifestURI = manifestURI || appConfig.manifestURI();\n    scopes = scopes || appConfig.scopes;\n    appDomain = appDomain || appConfig.appDomain;\n\n    return authMessages.makeAuthRequestToken(\n      transitKey,\n      redirectURI,\n      manifestURI,\n      scopes,\n      appDomain,\n      expiresAt,\n      extraParams\n    );\n  }\n\n  /**\n   * Generates a ECDSA keypair to\n   * use as the ephemeral app transit private key\n   * and store in the session.\n   *\n   * @returns {String} the hex encoded private key\n   *\n   */\n  generateAndStoreTransitKey(): string {\n    const sessionData = this.store.getSessionData();\n    const transitKey = authMessages.generateTransitKey();\n    sessionData.transitKey = transitKey;\n    this.store.setSessionData(sessionData);\n    return transitKey;\n  }\n\n  /**\n   * Retrieve the authentication token from the URL query\n   * @return {String} the authentication token if it exists otherwise `null`\n   */\n  getAuthResponseToken(): string {\n    const search = getGlobalObject('location', {\n      throwIfUnavailable: true,\n      usageDesc: 'getAuthResponseToken',\n    })?.search;\n\n    const params = new URLSearchParams(search);\n    return params.get('authResponse') ?? '';\n  }\n\n  /**\n   * Check if there is a authentication request that hasn't been handled.\n   *\n   * Also checks for a protocol echo reply (which if detected then the page\n   * will be automatically redirected after this call).\n   *\n   * @return {Boolean} `true` if there is a pending sign in, otherwise `false`\n   */\n  isSignInPending() {\n    try {\n      const isProtocolEcho = protocolEchoReplyDetection();\n      if (isProtocolEcho) {\n        Logger.info(\n          'protocolEchoReply detected from isSignInPending call, the page is about to redirect.'\n        );\n        return true;\n      }\n    } catch (error) {\n      Logger.error(`Error checking for protocol echo reply isSignInPending: ${error}`);\n    }\n\n    return !!this.getAuthResponseToken();\n  }\n\n  /**\n   * Check if a user is currently signed in.\n   *\n   * @returns {Boolean} `true` if the user is signed in, `false` if not.\n   */\n  isUserSignedIn() {\n    return !!this.store.getSessionData().userData;\n  }\n\n  /**\n   * Try to process any pending sign in request by returning a `Promise` that resolves\n   * to the user data object if the sign in succeeds.\n   *\n   * @param {String} authResponseToken - the signed authentication response token\n   * @returns {Promise} that resolves to the user data object if successful and rejects\n   * if handling the sign in request fails or there was no pending sign in request.\n   */\n  async handlePendingSignIn(\n    authResponseToken: string = this.getAuthResponseToken(),\n    fetchFn: FetchFn = createFetchFn()\n  ): Promise<UserData> {\n    const sessionData = this.store.getSessionData();\n\n    if (sessionData.userData) {\n      throw new LoginFailedError('Existing user session found.');\n    }\n\n    const transitKey = this.store.getSessionData().transitKey;\n\n    // let nameLookupURL;\n    let coreNode = this.appConfig && this.appConfig.coreNode;\n    if (!coreNode) {\n      const network = new StacksMainnet();\n      coreNode = network.bnsLookupUrl;\n    }\n\n\n    const tokenPayload = decodeToken(authResponseToken).payload;\n\n    if (typeof tokenPayload === 'string') {\n      throw new Error('Unexpected token payload type of string');\n    }\n\n    const isValid = await verifyAuthResponse(authResponseToken);\n    if (!isValid) {\n      throw new LoginFailedError('Invalid authentication response.');\n    }\n\n\n\n    // TODO: real version handling\n    let appPrivateKey: string = tokenPayload.private_key as string;\n    let coreSessionToken: string = tokenPayload.core_token as string;\n\n    if (isLaterVersion(tokenPayload.version as string, '1.1.0')) {\n      if (transitKey !== undefined && transitKey != null) {\n        if (tokenPayload.private_key !== undefined && tokenPayload.private_key !== null) {\n          try {\n            appPrivateKey = (await authMessages.decryptPrivateKey(\n              transitKey,\n              tokenPayload.private_key as string\n            )) as string;\n          } catch (e) {\n            Logger.warn('Failed decryption of appPrivateKey, will try to use as given');\n            if (!isValidPrivateKey(tokenPayload.private_key as string)) {\n              throw new LoginFailedError(\n                'Failed decrypting appPrivateKey. Usually means' +\n                  ' that the transit key has changed during login.'\n              );\n            }\n          }\n        }\n        if (coreSessionToken !== undefined && coreSessionToken !== null) {\n          try {\n            coreSessionToken = (await authMessages.decryptPrivateKey(\n              transitKey,\n              coreSessionToken\n            )) as string;\n          } catch (e) {\n            Logger.info('Failed decryption of coreSessionToken, will try to use as given');\n          }\n        }\n      } else {\n        throw new LoginFailedError(\n          'Authenticating with protocol > 1.1.0 requires transit' + ' key, and none found.'\n        );\n      }\n    }\n    let hubUrl = BLOCKSTACK_DEFAULT_GAIA_HUB_URL;\n    let gaiaAssociationToken: string;\n    if (\n      isLaterVersion(tokenPayload.version as string, '1.2.0') &&\n      tokenPayload.hubUrl !== null &&\n      tokenPayload.hubUrl !== undefined\n    ) {\n      hubUrl = tokenPayload.hubUrl as string;\n    }\n    if (\n      isLaterVersion(tokenPayload.version as string, '1.3.0') &&\n      tokenPayload.associationToken !== null &&\n      tokenPayload.associationToken !== undefined\n    ) {\n      gaiaAssociationToken = tokenPayload.associationToken as string;\n    }\n\n    const userData: UserData = {\n      profile: tokenPayload.profile,\n      email: tokenPayload.email as string,\n      decentralizedID: tokenPayload.iss,\n      identityAddress: getAddressFromDID(tokenPayload.iss),\n      appPrivateKey,\n      coreSessionToken,\n      authResponseToken,\n      hubUrl,\n      appPrivateKeyFromWalletSalt: tokenPayload.appPrivateKeyFromWalletSalt as string,\n      coreNode: tokenPayload.blockstackAPIUrl as string,\n      // @ts-expect-error\n      gaiaAssociationToken,\n    };\n    const profileURL = tokenPayload.profile_url as string;\n    if (!userData.profile && profileURL) {\n      const response = await fetchFn(profileURL);\n      if (!response.ok) {\n        // return blank profile if we fail to fetch\n        userData.profile = Object.assign({}, DEFAULT_PROFILE);\n      } else {\n        const responseText = await response.text();\n        const wrappedProfile = JSON.parse(responseText);\n        userData.profile = extractProfile(wrappedProfile[0].token);\n      }\n    } else {\n      userData.profile = tokenPayload.profile;\n    }\n\n    sessionData.userData = userData;\n    this.store.setSessionData(sessionData);\n\n    return userData;\n  }\n\n  /**\n   * Retrieves the user data object. The user's profile is stored in the key [[Profile]].\n   *\n   * @returns {Object} User data object.\n   */\n  loadUserData() {\n    const userData = this.store.getSessionData().userData;\n    if (!userData) {\n      throw new InvalidStateError('No user data found. Did the user sign in?');\n    }\n    return userData;\n  }\n\n  /**\n   * Encrypts the data provided with the app public key.\n   * @param {string | Uint8Array} content  the data to encrypt\n   * @param options\n   * @param {string} options.publicKey the hex string of the ECDSA public\n   * key to use for encryption. If not provided, will use user's appPrivateKey.\n   *\n   * @returns {string} Stringified ciphertext object\n   */\n  encryptContent(content: string | Uint8Array, options?: EncryptContentOptions): Promise<string> {\n    const opts = Object.assign({}, options);\n    if (!opts.privateKey) {\n      opts.privateKey = this.loadUserData().appPrivateKey;\n    }\n    return encryptContent(content, opts);\n  }\n\n  /**\n   * Decrypts data encrypted with `encryptContent` with the\n   * transit private key.\n   * @param {string | Uint8Array} content - encrypted content.\n   * @param options\n   * @param {string} options.privateKey - The hex string of the ECDSA private\n   * key to use for decryption. If not provided, will use user's appPrivateKey.\n   * @returns {string | Uint8Array} decrypted content.\n   */\n  decryptContent(content: string, options?: { privateKey?: string }): Promise<Uint8Array | string> {\n    const opts = Object.assign({}, options);\n    if (!opts.privateKey) {\n      opts.privateKey = this.loadUserData().appPrivateKey;\n    }\n    return decryptContent(content, opts);\n  }\n\n  /**\n   * Sign the user out and optionally redirect to given location.\n   * @param  redirectURL\n   * Location to redirect user to after sign out.\n   * Only used in environments with `window` available\n   */\n\n  signUserOut(\n    redirectURL?: string\n    // TODO: this is not used?\n    // caller?: UserSession\n  ) {\n    this.store.deleteSessionData();\n    if (redirectURL) {\n      if (typeof location !== 'undefined' && location.href) {\n        location.href = redirectURL;\n      }\n      // TODO: Invalid left-hand side in assignment expression\n      // // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // // @ts-ignore\n      // getGlobalObject('location', {\n      //   throwIfUnavailable: true,\n      //   usageDesc: 'signUserOut',\n      // })?.href = redirectURL;\n    }\n  }\n}\n\n// Add method aliases for backwards compatibility\nexport interface UserSession {\n  /** @deprecated {@link makeAuthRequest} was renamed to {@link makeAuthRequestToken} */\n  makeAuthRequest(\n    ...args: Parameters<typeof UserSession.prototype.makeAuthRequestToken>\n  ): ReturnType<typeof UserSession.prototype.makeAuthRequestToken>;\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nUserSession.prototype.makeAuthRequest = UserSession.prototype.makeAuthRequestToken;\n","import {\n  bytesToHex,\n  concatArray,\n  hexToBytes,\n  IntegerType,\n  intToBigInt,\n  intToBytes,\n  writeUInt16BE,\n} from '@stacks/common';\nimport {\n  AddressHashMode,\n  AuthType,\n  MultiSigHashMode,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  SingleSigHashMode,\n  StacksMessageType,\n} from './constants';\n\nimport { cloneDeep, leftPadHex, txidFromData } from './utils';\nimport {\n  TransactionAuthField,\n  serializeMessageSignature,\n  deserializeMessageSignature,\n} from './signature';\nimport {\n  addressFromPublicKeys,\n  createEmptyAddress,\n  createLPList,\n  deserializeLPList,\n  serializeLPList,\n} from './types';\n\nimport {\n  createStacksPublicKey,\n  getPublicKey,\n  isCompressed,\n  publicKeyFromSignatureVrs,\n  signWithKey,\n  StacksPrivateKey,\n  StacksPublicKey,\n} from './keys';\n\nimport { MessageSignature } from './common';\nimport { DeserializationError, SigningError, VerificationError } from './errors';\nimport { BytesReader } from './bytesReader';\n\nexport function emptyMessageSignature(): MessageSignature {\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: bytesToHex(new Uint8Array(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES)),\n  };\n}\n\nexport interface SingleSigSpendingCondition {\n  hashMode: SingleSigHashMode;\n  signer: string;\n  nonce: bigint;\n  fee: bigint;\n  keyEncoding: PubKeyEncoding;\n  signature: MessageSignature;\n}\n\nexport interface SingleSigSpendingConditionOpts\n  extends Omit<SingleSigSpendingCondition, 'nonce' | 'fee'> {\n  nonce: IntegerType;\n  fee: IntegerType;\n}\n\nexport interface MultiSigSpendingCondition {\n  hashMode: MultiSigHashMode;\n  signer: string;\n  nonce: bigint;\n  fee: bigint;\n  fields: TransactionAuthField[];\n  signaturesRequired: number;\n}\n\nexport interface MultiSigSpendingConditionOpts\n  extends Omit<MultiSigSpendingCondition, 'nonce' | 'fee'> {\n  nonce: IntegerType;\n  fee: IntegerType;\n}\n\nexport type SpendingCondition = SingleSigSpendingCondition | MultiSigSpendingCondition;\n\nexport type SpendingConditionOpts = SingleSigSpendingConditionOpts | MultiSigSpendingConditionOpts;\n\nexport function createSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  pubKey: string,\n  nonce: IntegerType,\n  fee: IntegerType\n): SingleSigSpendingCondition {\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(0, hashMode, 1, [createStacksPublicKey(pubKey)]).hash160;\n  const keyEncoding = isCompressed(createStacksPublicKey(pubKey))\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  return {\n    hashMode,\n    signer,\n    nonce: intToBigInt(nonce, false),\n    fee: intToBigInt(fee, false),\n    keyEncoding,\n    signature: emptyMessageSignature(),\n  };\n}\n\nexport function createMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  numSigs: number,\n  pubKeys: string[],\n  nonce: IntegerType,\n  fee: IntegerType\n): MultiSigSpendingCondition {\n  const stacksPublicKeys = pubKeys.map(createStacksPublicKey);\n\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(0, hashMode, numSigs, stacksPublicKeys).hash160;\n\n  return {\n    hashMode,\n    signer,\n    nonce: intToBigInt(nonce, false),\n    fee: intToBigInt(fee, false),\n    fields: [],\n    signaturesRequired: numSigs,\n  };\n}\n\nexport function isSingleSig(\n  condition: SpendingConditionOpts\n): condition is SingleSigSpendingConditionOpts {\n  return 'signature' in condition;\n}\n\nfunction clearCondition(condition: SpendingConditionOpts): SpendingCondition {\n  const cloned = cloneDeep(condition);\n  cloned.nonce = 0;\n  cloned.fee = 0;\n\n  if (isSingleSig(cloned)) {\n    cloned.signature = emptyMessageSignature();\n  } else {\n    cloned.fields = [];\n  }\n\n  return {\n    ...cloned,\n    nonce: BigInt(0),\n    fee: BigInt(0),\n  };\n}\n\nexport function serializeSingleSigSpendingCondition(\n  condition: SingleSigSpendingConditionOpts\n): Uint8Array {\n  const bytesArray = [\n    condition.hashMode,\n    hexToBytes(condition.signer),\n    intToBytes(condition.nonce, false, 8),\n    intToBytes(condition.fee, false, 8),\n    condition.keyEncoding as number,\n    serializeMessageSignature(condition.signature),\n  ];\n  return concatArray(bytesArray);\n}\n\nexport function serializeMultiSigSpendingCondition(\n  condition: MultiSigSpendingConditionOpts\n): Uint8Array {\n  const bytesArray = [\n    condition.hashMode,\n    hexToBytes(condition.signer),\n    intToBytes(condition.nonce, false, 8),\n    intToBytes(condition.fee, false, 8),\n  ];\n\n  const fields = createLPList(condition.fields);\n  bytesArray.push(serializeLPList(fields));\n\n  const numSigs = new Uint8Array(2);\n  writeUInt16BE(numSigs, condition.signaturesRequired, 0);\n  bytesArray.push(numSigs);\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializeSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  bytesReader: BytesReader\n): SingleSigSpendingCondition {\n  const signer = bytesToHex(bytesReader.readBytes(20));\n  const nonce = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n  const fee = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n\n  const keyEncoding = bytesReader.readUInt8Enum(PubKeyEncoding, n => {\n    throw new DeserializationError(`Could not parse ${n} as PubKeyEncoding`);\n  });\n  if (hashMode === AddressHashMode.SerializeP2WPKH && keyEncoding != PubKeyEncoding.Compressed) {\n    throw new DeserializationError(\n      'Failed to parse singlesig spending condition: incomaptible hash mode and key encoding'\n    );\n  }\n  const signature = deserializeMessageSignature(bytesReader);\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature,\n  };\n}\n\nexport function deserializeMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  bytesReader: BytesReader\n): MultiSigSpendingCondition {\n  const signer = bytesToHex(bytesReader.readBytes(20));\n  const nonce = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n  const fee = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n\n  const fields = deserializeLPList(bytesReader, StacksMessageType.TransactionAuthField)\n    .values as TransactionAuthField[];\n\n  let haveUncompressed = false;\n  let numSigs = 0;\n\n  for (const field of fields) {\n    switch (field.contents.type) {\n      case StacksMessageType.PublicKey:\n        if (!isCompressed(field.contents)) haveUncompressed = true;\n        break;\n      case StacksMessageType.MessageSignature:\n        if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed) haveUncompressed = true;\n        numSigs += 1;\n        if (numSigs === 65536)\n          throw new VerificationError(\n            'Failed to parse multisig spending condition: too many signatures'\n          );\n        break;\n    }\n  }\n  const signaturesRequired = bytesReader.readUInt16BE();\n\n  // Partially signed multi-sig tx can be serialized and deserialized without exception (Incorrect number of signatures)\n  // No need to check numSigs !== signaturesRequired to throw Incorrect number of signatures error\n\n  if (haveUncompressed && hashMode === AddressHashMode.SerializeP2SH)\n    throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields,\n    signaturesRequired,\n  };\n}\n\nexport function serializeSpendingCondition(condition: SpendingConditionOpts): Uint8Array {\n  if (isSingleSig(condition)) {\n    return serializeSingleSigSpendingCondition(condition);\n  }\n  return serializeMultiSigSpendingCondition(condition);\n}\n\nexport function deserializeSpendingCondition(bytesReader: BytesReader): SpendingCondition {\n  const hashMode = bytesReader.readUInt8Enum(AddressHashMode, n => {\n    throw new DeserializationError(`Could not parse ${n} as AddressHashMode`);\n  });\n\n  if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n    return deserializeSingleSigSpendingCondition(hashMode, bytesReader);\n  } else {\n    return deserializeMultiSigSpendingCondition(hashMode, bytesReader);\n  }\n}\n\nexport function makeSigHashPreSign(\n  curSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType\n): string {\n  // new hash combines the previous hash and all the new data this signature will add. This\n  // includes:\n  // * the previous hash\n  // * the auth flag\n  // * the tx fee (big-endian 8-byte number)\n  // * nonce (big-endian 8-byte number)\n  const hashLength = 32 + 1 + 8 + 8;\n\n  const sigHash =\n    curSigHash +\n    bytesToHex(new Uint8Array([authType])) +\n    bytesToHex(intToBytes(fee, false, 8)) +\n    bytesToHex(intToBytes(nonce, false, 8));\n\n  if (hexToBytes(sigHash).byteLength !== hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(hexToBytes(sigHash));\n}\n\nfunction makeSigHashPostSign(\n  curSigHash: string,\n  pubKey: StacksPublicKey,\n  signature: MessageSignature\n): string {\n  // new hash combines the previous hash and all the new data this signature will add.  This\n  // includes:\n  // * the public key compression flag\n  // * the signature\n  const hashLength = 32 + 1 + RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;\n\n  const pubKeyEncoding = isCompressed(pubKey)\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  const sigHash = curSigHash + leftPadHex(pubKeyEncoding.toString(16)) + signature.data;\n\n  const sigHashBytes = hexToBytes(sigHash);\n  if (sigHashBytes.byteLength > hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(sigHashBytes);\n}\n\nexport function nextSignature(\n  curSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType,\n  privateKey: StacksPrivateKey\n): {\n  nextSig: MessageSignature;\n  nextSigHash: string;\n} {\n  const sigHashPreSign = makeSigHashPreSign(curSigHash, authType, fee, nonce);\n\n  const signature = signWithKey(privateKey, sigHashPreSign);\n  const publicKey = getPublicKey(privateKey);\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n\n  return {\n    nextSig: signature,\n    nextSigHash,\n  };\n}\n\nexport function nextVerification(\n  initialSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType,\n  pubKeyEncoding: PubKeyEncoding,\n  signature: MessageSignature\n) {\n  const sigHashPreSign = makeSigHashPreSign(initialSigHash, authType, fee, nonce);\n\n  const publicKey = createStacksPublicKey(\n    publicKeyFromSignatureVrs(sigHashPreSign, signature, pubKeyEncoding)\n  );\n\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n\n  return {\n    pubKey: publicKey,\n    nextSigHash,\n  };\n}\n\nfunction newInitialSigHash(): SpendingCondition {\n  const spendingCondition = createSingleSigSpendingCondition(\n    AddressHashMode.SerializeP2PKH,\n    '',\n    0,\n    0\n  );\n  spendingCondition.signer = createEmptyAddress().hash160;\n  spendingCondition.keyEncoding = PubKeyEncoding.Compressed;\n  spendingCondition.signature = emptyMessageSignature();\n  return spendingCondition;\n}\n\nfunction verify(\n  condition: SpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  if (isSingleSig(condition)) {\n    return verifySingleSig(condition, initialSigHash, authType);\n  } else {\n    return verifyMultiSig(condition, initialSigHash, authType);\n  }\n}\n\nfunction verifySingleSig(\n  condition: SingleSigSpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const { pubKey, nextSigHash } = nextVerification(\n    initialSigHash,\n    authType,\n    condition.fee,\n    condition.nonce,\n    condition.keyEncoding,\n    condition.signature\n  );\n\n  // address version arg doesn't matter for signer hash generation\n  const addrBytes = addressFromPublicKeys(0, condition.hashMode, 1, [pubKey]).hash160;\n\n  if (addrBytes !== condition.signer)\n    throw new VerificationError(\n      `Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`\n    );\n\n  return nextSigHash;\n}\n\nfunction verifyMultiSig(\n  condition: MultiSigSpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const publicKeys: StacksPublicKey[] = [];\n  let curSigHash = initialSigHash;\n  let haveUncompressed = false;\n  let numSigs = 0;\n\n  for (const field of condition.fields) {\n    let foundPubKey: StacksPublicKey;\n\n    switch (field.contents.type) {\n      case StacksMessageType.PublicKey:\n        if (!isCompressed(field.contents)) haveUncompressed = true;\n        foundPubKey = field.contents;\n        break;\n      case StacksMessageType.MessageSignature:\n        if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed) haveUncompressed = true;\n        const { pubKey, nextSigHash } = nextVerification(\n          curSigHash,\n          authType,\n          condition.fee,\n          condition.nonce,\n          field.pubKeyEncoding,\n          field.contents\n        );\n        curSigHash = nextSigHash;\n        foundPubKey = pubKey;\n\n        numSigs += 1;\n        if (numSigs === 65536) throw new VerificationError('Too many signatures');\n\n        break;\n    }\n    publicKeys.push(foundPubKey);\n  }\n\n  if (numSigs !== condition.signaturesRequired)\n    throw new VerificationError('Incorrect number of signatures');\n\n  if (haveUncompressed && condition.hashMode === AddressHashMode.SerializeP2SH)\n    throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n\n  const addrBytes = addressFromPublicKeys(\n    0,\n    condition.hashMode,\n    condition.signaturesRequired,\n    publicKeys\n  ).hash160;\n  if (addrBytes !== condition.signer)\n    throw new VerificationError(\n      `Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`\n    );\n\n  return curSigHash;\n}\n\nexport type Authorization = StandardAuthorization | SponsoredAuthorization;\n\nexport interface StandardAuthorization {\n  authType: AuthType.Standard;\n  spendingCondition: SpendingCondition;\n}\n\nexport interface SponsoredAuthorization {\n  authType: AuthType.Sponsored;\n  spendingCondition: SpendingCondition;\n  sponsorSpendingCondition: SpendingCondition;\n}\n\nexport function createStandardAuth(spendingCondition: SpendingCondition): StandardAuthorization {\n  return {\n    authType: AuthType.Standard,\n    spendingCondition,\n  };\n}\n\nexport function createSponsoredAuth(\n  spendingCondition: SpendingCondition,\n  sponsorSpendingCondition?: SpendingCondition\n): Authorization {\n  return {\n    authType: AuthType.Sponsored,\n    spendingCondition,\n    sponsorSpendingCondition: sponsorSpendingCondition\n      ? sponsorSpendingCondition\n      : createSingleSigSpendingCondition(AddressHashMode.SerializeP2PKH, '0'.repeat(66), 0, 0),\n  };\n}\n\nexport function intoInitialSighashAuth(auth: Authorization): Authorization {\n  if (auth.spendingCondition) {\n    switch (auth.authType) {\n      case AuthType.Standard:\n        return createStandardAuth(clearCondition(auth.spendingCondition));\n      case AuthType.Sponsored:\n        return createSponsoredAuth(clearCondition(auth.spendingCondition), newInitialSigHash());\n      default:\n        throw new SigningError('Unexpected authorization type for signing');\n    }\n  }\n\n  throw new Error('Authorization missing SpendingCondition');\n}\n\nexport function verifyOrigin(auth: Authorization, initialSigHash: string): string {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n    case AuthType.Sponsored:\n      return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n    default:\n      throw new SigningError('Invalid origin auth type');\n  }\n}\n\nexport function setFee(auth: Authorization, amount: IntegerType): Authorization {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      const spendingCondition = {\n        ...auth.spendingCondition,\n        fee: intToBigInt(amount, false),\n      };\n      return { ...auth, spendingCondition };\n    case AuthType.Sponsored:\n      const sponsorSpendingCondition = {\n        ...auth.sponsorSpendingCondition,\n        fee: intToBigInt(amount, false),\n      };\n      return { ...auth, sponsorSpendingCondition };\n  }\n}\n\nexport function getFee(auth: Authorization): bigint {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      return auth.spendingCondition.fee;\n    case AuthType.Sponsored:\n      return auth.sponsorSpendingCondition.fee;\n  }\n}\n\nexport function setNonce(auth: Authorization, nonce: IntegerType): Authorization {\n  const spendingCondition = {\n    ...auth.spendingCondition,\n    nonce: intToBigInt(nonce, false),\n  };\n\n  return {\n    ...auth,\n    spendingCondition,\n  };\n}\n\nexport function setSponsorNonce(auth: SponsoredAuthorization, nonce: IntegerType): Authorization {\n  const sponsorSpendingCondition = {\n    ...auth.sponsorSpendingCondition,\n    nonce: intToBigInt(nonce, false),\n  };\n\n  return {\n    ...auth,\n    sponsorSpendingCondition,\n  };\n}\n\nexport function setSponsor(\n  auth: SponsoredAuthorization,\n  sponsorSpendingCondition: SpendingConditionOpts\n): Authorization {\n  const sc = {\n    ...sponsorSpendingCondition,\n    nonce: intToBigInt(sponsorSpendingCondition.nonce, false),\n    fee: intToBigInt(sponsorSpendingCondition.fee, false),\n  };\n\n  return {\n    ...auth,\n    sponsorSpendingCondition: sc,\n  };\n}\n\nexport function serializeAuthorization(auth: Authorization): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(auth.authType);\n\n  switch (auth.authType) {\n    case AuthType.Standard:\n      bytesArray.push(serializeSpendingCondition(auth.spendingCondition));\n      break;\n    case AuthType.Sponsored:\n      bytesArray.push(serializeSpendingCondition(auth.spendingCondition));\n      bytesArray.push(serializeSpendingCondition(auth.sponsorSpendingCondition));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAuthorization(bytesReader: BytesReader) {\n  const authType = bytesReader.readUInt8Enum(AuthType, n => {\n    throw new DeserializationError(`Could not parse ${n} as AuthType`);\n  });\n\n  let spendingCondition;\n  switch (authType) {\n    case AuthType.Standard:\n      spendingCondition = deserializeSpendingCondition(bytesReader);\n      return createStandardAuth(spendingCondition);\n    case AuthType.Sponsored:\n      spendingCondition = deserializeSpendingCondition(bytesReader);\n      const sponsorSpendingCondition = deserializeSpendingCondition(bytesReader);\n      return createSponsoredAuth(spendingCondition, sponsorSpendingCondition);\n  }\n}\n","import {\n  bytesToHex,\n  concatArray,\n  hexToBytes,\n  IntegerType,\n  intToBigInt,\n  writeUInt32BE,\n} from '@stacks/common';\nimport {\n  AnchorMode,\n  anchorModeFromNameOrValue,\n  AnchorModeName,\n  AuthType,\n  ChainID,\n  DEFAULT_CHAIN_ID,\n  PayloadType,\n  PostConditionMode,\n  PubKeyEncoding,\n  StacksMessageType,\n  TransactionVersion,\n} from './constants';\n\nimport {\n  Authorization,\n  deserializeAuthorization,\n  intoInitialSighashAuth,\n  isSingleSig,\n  nextSignature,\n  serializeAuthorization,\n  setFee,\n  setNonce,\n  setSponsor,\n  setSponsorNonce,\n  SpendingConditionOpts,\n  verifyOrigin,\n} from './authorization';\nimport { createTransactionAuthField } from './signature';\n\nimport { cloneDeep, txidFromData } from './utils';\n\nimport { deserializePayload, Payload, PayloadInput, serializePayload } from './payload';\n\nimport { createLPList, deserializeLPList, LengthPrefixedList, serializeLPList } from './types';\n\nimport { isCompressed, StacksPrivateKey, StacksPublicKey } from './keys';\n\nimport { BytesReader } from './bytesReader';\n\nimport { SerializationError, SigningError } from './errors';\n\nexport class StacksTransaction {\n  version: TransactionVersion;\n  chainId: ChainID;\n  auth: Authorization;\n  anchorMode: AnchorMode;\n  payload: Payload;\n  postConditionMode: PostConditionMode;\n  postConditions: LengthPrefixedList;\n\n  constructor(\n    version: TransactionVersion,\n    auth: Authorization,\n    payload: PayloadInput,\n    postConditions?: LengthPrefixedList,\n    postConditionMode?: PostConditionMode,\n    anchorMode?: AnchorModeName | AnchorMode,\n    chainId?: ChainID\n  ) {\n    this.version = version;\n    this.auth = auth;\n    if ('amount' in payload) {\n      this.payload = {\n        ...payload,\n        amount: intToBigInt(payload.amount, false),\n      };\n    } else {\n      this.payload = payload;\n    }\n    this.chainId = chainId ?? DEFAULT_CHAIN_ID;\n    this.postConditionMode = postConditionMode ?? PostConditionMode.Deny;\n    this.postConditions = postConditions ?? createLPList([]);\n\n    if (anchorMode) {\n      this.anchorMode = anchorModeFromNameOrValue(anchorMode);\n    } else {\n      switch (payload.payloadType) {\n        case PayloadType.Coinbase:\n        case PayloadType.CoinbaseToAltRecipient:\n        case PayloadType.PoisonMicroblock: {\n          this.anchorMode = AnchorMode.OnChainOnly;\n          break;\n        }\n        case PayloadType.ContractCall:\n        case PayloadType.SmartContract:\n        case PayloadType.VersionedSmartContract:\n        case PayloadType.TokenTransfer: {\n          this.anchorMode = AnchorMode.Any;\n          break;\n        }\n      }\n    }\n  }\n\n  signBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = intoInitialSighashAuth(tx.auth);\n    return tx.txid();\n  }\n\n  verifyBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = intoInitialSighashAuth(tx.auth);\n    return tx.txid();\n  }\n\n  verifyOrigin(): string {\n    return verifyOrigin(this.auth, this.verifyBegin());\n  }\n\n  signNextOrigin(sigHash: string, privateKey: StacksPrivateKey): string {\n    if (this.auth.spendingCondition === undefined) {\n      throw new Error('\"auth.spendingCondition\" is undefined');\n    }\n    if (this.auth.authType === undefined) {\n      throw new Error('\"auth.authType\" is undefined');\n    }\n    return this.signAndAppend(this.auth.spendingCondition, sigHash, AuthType.Standard, privateKey);\n  }\n\n  signNextSponsor(sigHash: string, privateKey: StacksPrivateKey): string {\n    if (this.auth.authType === AuthType.Sponsored) {\n      return this.signAndAppend(\n        this.auth.sponsorSpendingCondition,\n        sigHash,\n        AuthType.Sponsored,\n        privateKey\n      );\n    } else {\n      throw new Error('\"auth.sponsorSpendingCondition\" is undefined');\n    }\n  }\n\n  appendPubkey(publicKey: StacksPublicKey) {\n    const cond = this.auth.spendingCondition;\n    if (cond && !isSingleSig(cond)) {\n      const compressed = isCompressed(publicKey);\n      cond.fields.push(\n        createTransactionAuthField(\n          compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed,\n          publicKey\n        )\n      );\n    } else {\n      throw new Error(`Can't append public key to a singlesig condition`);\n    }\n  }\n\n  signAndAppend(\n    condition: SpendingConditionOpts,\n    curSigHash: string,\n    authType: AuthType,\n    privateKey: StacksPrivateKey\n  ): string {\n    const { nextSig, nextSigHash } = nextSignature(\n      curSigHash,\n      authType,\n      condition.fee,\n      condition.nonce,\n      privateKey\n    );\n    if (isSingleSig(condition)) {\n      condition.signature = nextSig;\n    } else {\n      const compressed = bytesToHex(privateKey.data).endsWith('01');\n      condition.fields.push(\n        createTransactionAuthField(\n          compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed,\n          nextSig\n        )\n      );\n    }\n\n    return nextSigHash;\n  }\n\n  txid(): string {\n    const serialized = this.serialize();\n    return txidFromData(serialized);\n  }\n\n  setSponsor(sponsorSpendingCondition: SpendingConditionOpts) {\n    if (this.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n    }\n\n    this.auth = setSponsor(this.auth, sponsorSpendingCondition);\n  }\n\n  /**\n   * Set the total fee to be paid for this transaction\n   *\n   * @param fee - the fee amount in microstacks\n   */\n  setFee(amount: IntegerType) {\n    this.auth = setFee(this.auth, amount);\n  }\n\n  /**\n   * Set the transaction nonce\n   *\n   * @param nonce - the nonce value\n   */\n  setNonce(nonce: IntegerType) {\n    this.auth = setNonce(this.auth, nonce);\n  }\n\n  /**\n   * Set the transaction sponsor nonce\n   *\n   * @param nonce - the sponsor nonce value\n   */\n  setSponsorNonce(nonce: IntegerType) {\n    if (this.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n    }\n\n    this.auth = setSponsorNonce(this.auth, nonce);\n  }\n\n  serialize(): Uint8Array {\n    if (this.version === undefined) {\n      throw new SerializationError('\"version\" is undefined');\n    }\n    if (this.chainId === undefined) {\n      throw new SerializationError('\"chainId\" is undefined');\n    }\n    if (this.auth === undefined) {\n      throw new SerializationError('\"auth\" is undefined');\n    }\n    if (this.anchorMode === undefined) {\n      throw new SerializationError('\"anchorMode\" is undefined');\n    }\n    if (this.payload === undefined) {\n      throw new SerializationError('\"payload\" is undefined');\n    }\n\n    const bytesArray = [];\n\n    bytesArray.push(this.version);\n    const chainIdBytes = new Uint8Array(4);\n    writeUInt32BE(chainIdBytes, this.chainId, 0);\n    bytesArray.push(chainIdBytes);\n    bytesArray.push(serializeAuthorization(this.auth));\n    bytesArray.push(this.anchorMode);\n    bytesArray.push(this.postConditionMode);\n    bytesArray.push(serializeLPList(this.postConditions));\n    bytesArray.push(serializePayload(this.payload));\n\n    return concatArray(bytesArray);\n  }\n}\n\n/**\n * @param data Uint8Array or hex string\n */\nexport function deserializeTransaction(data: BytesReader | Uint8Array | string) {\n  let bytesReader: BytesReader;\n  if (typeof data === 'string') {\n    if (data.slice(0, 2).toLowerCase() === '0x') {\n      bytesReader = new BytesReader(hexToBytes(data.slice(2)));\n    } else {\n      bytesReader = new BytesReader(hexToBytes(data));\n    }\n  } else if (data instanceof Uint8Array) {\n    bytesReader = new BytesReader(data);\n  } else {\n    bytesReader = data;\n  }\n  const version = bytesReader.readUInt8Enum(TransactionVersion, n => {\n    throw new Error(`Could not parse ${n} as TransactionVersion`);\n  });\n  const chainId = bytesReader.readUInt32BE();\n  const auth = deserializeAuthorization(bytesReader);\n  const anchorMode = bytesReader.readUInt8Enum(AnchorMode, n => {\n    throw new Error(`Could not parse ${n} as AnchorMode`);\n  });\n  const postConditionMode = bytesReader.readUInt8Enum(PostConditionMode, n => {\n    throw new Error(`Could not parse ${n} as PostConditionMode`);\n  });\n  const postConditions = deserializeLPList(bytesReader, StacksMessageType.PostCondition);\n  const payload = deserializePayload(bytesReader);\n\n  return new StacksTransaction(\n    version,\n    auth,\n    payload,\n    postConditions,\n    postConditionMode,\n    anchorMode,\n    chainId\n  );\n}\n","import { p as promiseResolve, b as bootstrapLazy } from './index-9d57a6fd.js';\nexport { s as setNonce } from './index-9d57a6fd.js';\n\n/*\n Stencil Client Patch Esm v2.22.2 | MIT Licensed | https://stenciljs.com\n */\nconst patchEsm = () => {\n    return promiseResolve();\n};\n\nconst defineCustomElements = (win, options) => {\n  if (typeof window === 'undefined') return Promise.resolve();\n  return patchEsm().then(() => {\n  return bootstrapLazy([[\"connect-modal\",[[1,\"connect-modal\",{\"authOptions\":[16],\"hasOpenedInstall\":[32],\"hasOpenedInstallXverse\":[32]}]]]], options);\n  });\n};\n\nexport { defineCustomElements };\n","\n(function(){if(\"undefined\"!==typeof window&&void 0!==window.Reflect&&void 0!==window.customElements){var a=HTMLElement;window.HTMLElement=function(){return Reflect.construct(a,[],this.constructor)};HTMLElement.prototype=a.prototype;HTMLElement.prototype.constructor=HTMLElement;Object.setPrototypeOf(HTMLElement,a)}})();\nexport * from '../dist/esm/polyfills/index.js';\nexport * from '../dist/esm/loader.js';\n","import { AppConfig, UserSession } from \"@stacks/connect\";\r\n\r\nconst appConfig = new AppConfig([\"store_write\", \"publish_data\"]);\r\nexport const userSession = new UserSession({ appConfig }); // we will use this export from other files\r\n","import { cloneDeep } from './utils';\nimport {\n  ClarityValue,\n  uintCV,\n  intCV,\n  contractPrincipalCV,\n  standardPrincipalCV,\n  noneCV,\n  bufferCV,\n  falseCV,\n  trueCV,\n  ClarityType,\n  getCVTypeString,\n  bufferCVFromString,\n} from './clarity';\nimport { ContractCallPayload } from './payload';\nimport { NotImplementedError } from './errors';\nimport { stringAsciiCV, stringUtf8CV } from './clarity/types/stringCV';\nimport { utf8ToBytes } from '@stacks/common';\n\n// From https://github.com/blockstack/stacks-blockchain-sidecar/blob/master/src/event-stream/contract-abi.ts\n\nexport type ClarityAbiTypeBuffer = { buffer: { length: number } };\nexport type ClarityAbiTypeStringAscii = { 'string-ascii': { length: number } };\nexport type ClarityAbiTypeStringUtf8 = { 'string-utf8': { length: number } };\nexport type ClarityAbiTypeResponse = { response: { ok: ClarityAbiType; error: ClarityAbiType } };\nexport type ClarityAbiTypeOptional = { optional: ClarityAbiType };\nexport type ClarityAbiTypeTuple = { tuple: { name: string; type: ClarityAbiType }[] };\nexport type ClarityAbiTypeList = { list: { type: ClarityAbiType; length: number } };\n\nexport type ClarityAbiTypeUInt128 = 'uint128';\nexport type ClarityAbiTypeInt128 = 'int128';\nexport type ClarityAbiTypeBool = 'bool';\nexport type ClarityAbiTypePrincipal = 'principal';\nexport type ClarityAbiTypeTraitReference = 'trait_reference';\nexport type ClarityAbiTypeNone = 'none';\n\nexport type ClarityAbiTypePrimitive =\n  | ClarityAbiTypeUInt128\n  | ClarityAbiTypeInt128\n  | ClarityAbiTypeBool\n  | ClarityAbiTypePrincipal\n  | ClarityAbiTypeTraitReference\n  | ClarityAbiTypeNone;\n\nexport type ClarityAbiType =\n  | ClarityAbiTypePrimitive\n  | ClarityAbiTypeBuffer\n  | ClarityAbiTypeResponse\n  | ClarityAbiTypeOptional\n  | ClarityAbiTypeTuple\n  | ClarityAbiTypeList\n  | ClarityAbiTypeStringAscii\n  | ClarityAbiTypeStringUtf8\n  | ClarityAbiTypeTraitReference;\n\nexport enum ClarityAbiTypeId {\n  ClarityAbiTypeUInt128 = 1,\n  ClarityAbiTypeInt128 = 2,\n  ClarityAbiTypeBool = 3,\n  ClarityAbiTypePrincipal = 4,\n  ClarityAbiTypeNone = 5,\n  ClarityAbiTypeBuffer = 6,\n  ClarityAbiTypeResponse = 7,\n  ClarityAbiTypeOptional = 8,\n  ClarityAbiTypeTuple = 9,\n  ClarityAbiTypeList = 10,\n  ClarityAbiTypeStringAscii = 11,\n  ClarityAbiTypeStringUtf8 = 12,\n  ClarityAbiTypeTraitReference = 13,\n}\n\nexport const isClarityAbiPrimitive = (val: ClarityAbiType): val is ClarityAbiTypePrimitive =>\n  typeof val === 'string';\nexport const isClarityAbiBuffer = (val: ClarityAbiType): val is ClarityAbiTypeBuffer =>\n  (val as ClarityAbiTypeBuffer).buffer !== undefined;\nexport const isClarityAbiStringAscii = (val: ClarityAbiType): val is ClarityAbiTypeStringAscii =>\n  (val as ClarityAbiTypeStringAscii)['string-ascii'] !== undefined;\nexport const isClarityAbiStringUtf8 = (val: ClarityAbiType): val is ClarityAbiTypeStringUtf8 =>\n  (val as ClarityAbiTypeStringUtf8)['string-utf8'] !== undefined;\nexport const isClarityAbiResponse = (val: ClarityAbiType): val is ClarityAbiTypeResponse =>\n  (val as ClarityAbiTypeResponse).response !== undefined;\nexport const isClarityAbiOptional = (val: ClarityAbiType): val is ClarityAbiTypeOptional =>\n  (val as ClarityAbiTypeOptional).optional !== undefined;\nexport const isClarityAbiTuple = (val: ClarityAbiType): val is ClarityAbiTypeTuple =>\n  (val as ClarityAbiTypeTuple).tuple !== undefined;\nexport const isClarityAbiList = (val: ClarityAbiType): val is ClarityAbiTypeList =>\n  (val as ClarityAbiTypeList).list !== undefined;\n\nexport type ClarityAbiTypeUnion =\n  | { id: ClarityAbiTypeId.ClarityAbiTypeUInt128; type: ClarityAbiTypeUInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeInt128; type: ClarityAbiTypeInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBool; type: ClarityAbiTypeBool }\n  | { id: ClarityAbiTypeId.ClarityAbiTypePrincipal; type: ClarityAbiTypePrincipal }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference; type: ClarityAbiTypeTraitReference }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeNone; type: ClarityAbiTypeNone }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBuffer; type: ClarityAbiTypeBuffer }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeResponse; type: ClarityAbiTypeResponse }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeOptional; type: ClarityAbiTypeOptional }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTuple; type: ClarityAbiTypeTuple }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeList; type: ClarityAbiTypeList }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii; type: ClarityAbiTypeStringAscii }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8; type: ClarityAbiTypeStringUtf8 };\n\nexport function getTypeUnion(val: ClarityAbiType): ClarityAbiTypeUnion {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'uint128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeUInt128, type: val };\n    } else if (val === 'int128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeInt128, type: val };\n    } else if (val === 'bool') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeBool, type: val };\n    } else if (val === 'principal') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypePrincipal, type: val };\n    } else if (val === 'trait_reference') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference, type: val };\n    } else if (val === 'none') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeNone, type: val };\n    } else {\n      throw new Error(`Unexpected Clarity ABI type primitive: ${JSON.stringify(val)}`);\n    }\n  } else if (isClarityAbiBuffer(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeBuffer, type: val };\n  } else if (isClarityAbiResponse(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeResponse, type: val };\n  } else if (isClarityAbiOptional(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeOptional, type: val };\n  } else if (isClarityAbiTuple(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeTuple, type: val };\n  } else if (isClarityAbiList(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeList, type: val };\n  } else if (isClarityAbiStringAscii(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii, type: val };\n  } else if (isClarityAbiStringUtf8(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8, type: val };\n  } else {\n    throw new Error(`Unexpected Clarity ABI type: ${JSON.stringify(val)}`);\n  }\n}\n\nfunction encodeClarityValue(type: ClarityAbiType, val: string): ClarityValue;\nfunction encodeClarityValue(type: ClarityAbiTypeUnion, val: string): ClarityValue;\nfunction encodeClarityValue(\n  input: ClarityAbiTypeUnion | ClarityAbiType,\n  val: string\n): ClarityValue {\n  let union: ClarityAbiTypeUnion;\n  if ((input as ClarityAbiTypeUnion).id !== undefined) {\n    union = input as ClarityAbiTypeUnion;\n  } else {\n    union = getTypeUnion(input as ClarityAbiType);\n  }\n  switch (union.id) {\n    case ClarityAbiTypeId.ClarityAbiTypeUInt128:\n      return uintCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeInt128:\n      return intCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeBool:\n      if (val === 'false' || val === '0') return falseCV();\n      else if (val === 'true' || val === '1') return trueCV();\n      else throw new Error(`Unexpected Clarity bool value: ${JSON.stringify(val)}`);\n    case ClarityAbiTypeId.ClarityAbiTypePrincipal:\n      if (val.includes('.')) {\n        const [addr, name] = val.split('.');\n        return contractPrincipalCV(addr, name);\n      } else {\n        return standardPrincipalCV(val);\n      }\n    case ClarityAbiTypeId.ClarityAbiTypeTraitReference:\n      const [addr, name] = val.split('.');\n      return contractPrincipalCV(addr, name);\n    case ClarityAbiTypeId.ClarityAbiTypeNone:\n      return noneCV();\n    case ClarityAbiTypeId.ClarityAbiTypeBuffer:\n      return bufferCV(utf8ToBytes(val));\n    case ClarityAbiTypeId.ClarityAbiTypeStringAscii:\n      return stringAsciiCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeStringUtf8:\n      return stringUtf8CV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeResponse:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeOptional:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeTuple:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeList:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    default:\n      throw new Error(`Unexpected Clarity type ID: ${JSON.stringify(union)}`);\n  }\n}\nexport { encodeClarityValue };\n\nexport function getTypeString(val: ClarityAbiType): string {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'int128') {\n      return 'int';\n    } else if (val === 'uint128') {\n      return 'uint';\n    }\n    return val;\n  } else if (isClarityAbiBuffer(val)) {\n    return `(buff ${val.buffer.length})`;\n  } else if (isClarityAbiStringAscii(val)) {\n    return `(string-ascii ${val['string-ascii'].length})`;\n  } else if (isClarityAbiStringUtf8(val)) {\n    return `(string-utf8 ${val['string-utf8'].length})`;\n  } else if (isClarityAbiResponse(val)) {\n    return `(response ${getTypeString(val.response.ok)} ${getTypeString(val.response.error)})`;\n  } else if (isClarityAbiOptional(val)) {\n    return `(optional ${getTypeString(val.optional)})`;\n  } else if (isClarityAbiTuple(val)) {\n    return `(tuple ${val.tuple.map(t => `(${t.name} ${getTypeString(t.type)})`).join(' ')})`;\n  } else if (isClarityAbiList(val)) {\n    return `(list ${val.list.length} ${getTypeString(val.list.type)})`;\n  } else {\n    throw new Error(`Type string unsupported for Clarity type: ${JSON.stringify(val)}`);\n  }\n}\n\nexport interface ClarityAbiFunction {\n  name: string;\n  access: 'private' | 'public' | 'read_only';\n  args: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  outputs: {\n    type: ClarityAbiType;\n  };\n}\n\nexport function abiFunctionToString(func: ClarityAbiFunction): string {\n  const access = func.access === 'read_only' ? 'read-only' : func.access;\n  return `(define-${access} (${func.name} ${func.args\n    .map(arg => `(${arg.name} ${getTypeString(arg.type)})`)\n    .join(' ')}))`;\n}\n\nexport interface ClarityAbiVariable {\n  name: string;\n  access: 'variable' | 'constant';\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbiMap {\n  name: string;\n  key: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  value: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n}\n\nexport interface ClarityAbiTypeFungibleToken {\n  name: string;\n}\n\nexport interface ClarityAbiTypeNonFungibleToken {\n  name: string;\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbi {\n  functions: ClarityAbiFunction[];\n  variables: ClarityAbiVariable[];\n  maps: ClarityAbiMap[];\n  fungible_tokens: ClarityAbiTypeFungibleToken[];\n  non_fungible_tokens: ClarityAbiTypeNonFungibleToken[];\n}\n\nfunction matchType(cv: ClarityValue, abiType: ClarityAbiType): boolean {\n  const union = getTypeUnion(abiType);\n\n  switch (cv.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeBool;\n    case ClarityType.Int:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeInt128;\n    case ClarityType.UInt:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeUInt128;\n    case ClarityType.Buffer:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer &&\n        union.type.buffer.length >= cv.buffer.length\n      );\n    case ClarityType.StringASCII:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringAscii &&\n        union.type['string-ascii'].length >= cv.data.length\n      );\n    case ClarityType.StringUTF8:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringUtf8 &&\n        union.type['string-utf8'].length >= cv.data.length\n      );\n    case ClarityType.OptionalNone:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeNone ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional\n      );\n    case ClarityType.OptionalSome:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional &&\n        matchType(cv.value, union.type.optional)\n      );\n    case ClarityType.ResponseErr:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.error)\n      );\n    case ClarityType.ResponseOk:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.ok)\n      );\n    case ClarityType.PrincipalContract:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeTraitReference\n      );\n    case ClarityType.PrincipalStandard:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal;\n    case ClarityType.List:\n      return (\n        union.id == ClarityAbiTypeId.ClarityAbiTypeList &&\n        union.type.list.length >= cv.list.length &&\n        cv.list.every(val => matchType(val, union.type.list.type))\n      );\n    case ClarityType.Tuple:\n      if (union.id == ClarityAbiTypeId.ClarityAbiTypeTuple) {\n        const tuple = cloneDeep(cv.data);\n        for (let i = 0; i < union.type.tuple.length; i++) {\n          const abiTupleEntry = union.type.tuple[i];\n          const key = abiTupleEntry.name;\n          const val = tuple[key];\n\n          // if key exists in cv tuple, check if its type matches the abi\n          // return false if key doesn't exist\n          if (val) {\n            if (!matchType(val, abiTupleEntry.type)) {\n              return false;\n            }\n            delete tuple[key];\n          } else {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    default:\n      return false;\n  }\n}\n\n/**\n * Validates a contract-call payload with a contract ABI\n *\n * @param {ContractCallPayload} payload - a contract-call payload\n * @param {ClarityAbi} abi - a contract ABI\n *\n * @returns {boolean} true if the payloads functionArgs type check against those in the ABI\n */\nexport function validateContractCall(payload: ContractCallPayload, abi: ClarityAbi): boolean {\n  const filtered = abi.functions.filter(fn => fn.name === payload.functionName.content);\n  if (filtered.length === 1) {\n    const abiFunc = filtered[0];\n    const abiArgs = abiFunc.args;\n\n    if (payload.functionArgs.length !== abiArgs.length) {\n      throw new Error(\n        `Clarity function expects ${abiArgs.length} argument(s) but received ${payload.functionArgs.length}`\n      );\n    }\n\n    for (let i = 0; i < payload.functionArgs.length; i++) {\n      const payloadArg = payload.functionArgs[i];\n      const abiArg = abiArgs[i];\n\n      if (!matchType(payloadArg, abiArg.type)) {\n        const argNum = i + 1;\n        throw new Error(\n          `Clarity function \\`${\n            payload.functionName.content\n          }\\` expects argument ${argNum} to be of type ${getTypeString(\n            abiArg.type\n          )}, not ${getCVTypeString(payloadArg)}`\n        );\n      }\n    }\n\n    return true;\n  } else if (filtered.length === 0) {\n    throw new Error(`ABI doesn't contain a function with the name ${payload.functionName.content}`);\n  } else {\n    throw new Error(\n      `Malformed ABI. Contains multiple functions with the name ${payload.functionName.content}`\n    );\n  }\n}\n\n/**\n * Convert string input to Clarity value based on contract ABI data. Only handles Clarity\n * primitives and buffers. Responses, optionals, tuples and lists are not supported.\n *\n * @param {string} input - string to be parsed into Clarity value\n * @param {ClarityAbiType} type - the contract function argument object\n *\n * @returns {ClarityValue} returns a Clarity value\n */\nexport function parseToCV(input: string, type: ClarityAbiType): ClarityValue {\n  const typeString = getTypeString(type);\n  if (isClarityAbiPrimitive(type)) {\n    if (type === 'uint128') {\n      return uintCV(input);\n    } else if (type === 'int128') {\n      return intCV(input);\n    } else if (type === 'bool') {\n      if (input.toLowerCase() === 'true') {\n        return trueCV();\n      } else if (input.toLowerCase() === 'false') {\n        return falseCV();\n      } else {\n        throw new Error(`Invalid bool value: ${input}`);\n      }\n    } else if (type === 'principal') {\n      if (input.includes('.')) {\n        const [address, contractName] = input.split('.');\n        return contractPrincipalCV(address, contractName);\n      } else {\n        return standardPrincipalCV(input);\n      }\n    } else {\n      throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n  } else if (isClarityAbiBuffer(type)) {\n    const inputLength = utf8ToBytes(input).byteLength;\n    if (inputLength > type.buffer.length) {\n      throw new Error(`Input exceeds specified buffer length limit of ${type.buffer.length}`);\n    }\n    return bufferCVFromString(input);\n  } else if (isClarityAbiResponse(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiOptional(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiTuple(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiList(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  }\n}\n","import { IntegerType, intToBigInt } from '@stacks/common';\nimport {\n  PostConditionType,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  StacksMessageType,\n} from './constants';\n\nimport {\n  AssetInfo,\n  PostConditionPrincipal,\n  parseAssetInfoString,\n  parsePrincipalString,\n  STXPostCondition,\n  FungiblePostCondition,\n  NonFungiblePostCondition,\n} from './postcondition-types';\n\nimport { ClarityValue } from './clarity';\n\nexport function createSTXPostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType\n): STXPostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.STX,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false),\n  };\n}\n\nexport function createFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.Fungible,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false),\n    assetInfo,\n  };\n}\n\nexport function createNonFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.NonFungible,\n    principal,\n    conditionCode,\n    assetInfo,\n    assetName,\n  };\n}\n","import { bytesToHex, hexToBytes, IntegerType, intToBigInt } from '@stacks/common';\nimport {\n  StacksNetwork,\n  StacksMainnet,\n  StacksNetworkName,\n  StacksTestnet,\n  FetchFn,\n  createFetchFn,\n} from '@stacks/network';\nimport { c32address } from 'c32check';\nimport {\n  Authorization,\n  createMultiSigSpendingCondition,\n  createSingleSigSpendingCondition,\n  createSponsoredAuth,\n  createStandardAuth,\n  SpendingCondition,\n  MultiSigSpendingCondition,\n} from './authorization';\nimport { ClarityValue, deserializeCV, NoneCV, PrincipalCV, serializeCV } from './clarity';\nimport {\n  AddressHashMode,\n  AddressVersion,\n  AnchorMode,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  PayloadType,\n  PostConditionMode,\n  SingleSigHashMode,\n  TransactionVersion,\n  TxRejectedReason,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  StacksMessageType,\n  ClarityVersion,\n  AnchorModeName,\n} from './constants';\nimport { ClarityAbi, validateContractCall } from './contract-abi';\nimport { NoEstimateAvailableError } from './errors';\nimport {\n  createStacksPrivateKey,\n  createStacksPublicKey,\n  getPublicKey,\n  pubKeyfromPrivKey,\n  publicKeyFromBytes,\n  publicKeyToAddress,\n  publicKeyToString,\n} from './keys';\nimport {\n  createContractCallPayload,\n  createSmartContractPayload,\n  createTokenTransferPayload,\n  Payload,\n  serializePayload,\n} from './payload';\nimport {\n  createFungiblePostCondition,\n  createNonFungiblePostCondition,\n  createSTXPostCondition,\n} from './postcondition';\nimport {\n  AssetInfo,\n  createContractPrincipal,\n  createStandardPrincipal,\n  FungiblePostCondition,\n  NonFungiblePostCondition,\n  PostCondition,\n  STXPostCondition,\n} from './postcondition-types';\nimport { TransactionSigner } from './signer';\nimport { StacksTransaction } from './transaction';\nimport { createLPList } from './types';\nimport { cvToHex, omit, parseReadOnlyResponse, validateTxId } from './utils';\n\n/**\n * Lookup the nonce for an address from a core node\n *\n * @param {string} address - the c32check address to look up\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to look up address on\n *\n * @return a promise that resolves to an integer\n */\nexport async function getNonce(\n  address: string,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<bigint> {\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? new StacksMainnet());\n  const url = derivedNetwork.getAccountApiUrl(address);\n\n  const response = await derivedNetwork.fetchFn(url);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error fetching nonce. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const responseText = await response.text();\n  const result = JSON.parse(responseText) as { nonce: string };\n  return BigInt(result.nonce);\n}\n\n/**\n * @deprecated Use the new {@link estimateTransaction} function instead.\n *\n * Estimate the total transaction fee in microstacks for a token transfer\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateTransfer(\n  transaction: StacksTransaction,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<bigint> {\n  if (transaction.payload.payloadType !== PayloadType.TokenTransfer) {\n    throw new Error(\n      `Transaction fee estimation only possible with ${\n        PayloadType[PayloadType.TokenTransfer]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  return estimateTransferUnsafe(transaction, network);\n}\n\n/**\n * @deprecated Use the new {@link estimateTransaction} function instead.\n * @internal\n */\nexport async function estimateTransferUnsafe(\n  transaction: StacksTransaction,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<bigint> {\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n  const url = derivedNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await derivedNetwork.fetchFn(url, fetchOptions);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = BigInt(transaction.serialize().byteLength);\n  const feeRate = BigInt(feeRateResult);\n  return feeRate * txBytes;\n}\n\ninterface FeeEstimation {\n  fee: number;\n  fee_rate: number;\n}\ninterface FeeEstimateResponse {\n  cost_scalar_change_by_byte: bigint;\n  estimated_cost: {\n    read_count: bigint;\n    read_length: bigint;\n    runtime: bigint;\n    write_count: bigint;\n    write_length: bigint;\n  };\n  estimated_cost_scalar: bigint;\n  estimations: [FeeEstimation, FeeEstimation, FeeEstimation];\n}\n\n/**\n * Estimate the total transaction fee in microstacks for a Stacks transaction\n *\n * @param {StacksTransaction} transaction - the transaction to estimate fees for\n * @param {number} estimatedLen - is an optional argument that provides the endpoint with an\n * estimation of the final length (in bytes) of the transaction, including any post-conditions\n * and signatures\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to estimate transaction fees for\n *\n * @return a promise that resolves to FeeEstimate\n */\nexport async function estimateTransaction(\n  transactionPayload: Payload,\n  estimatedLen?: number,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<[FeeEstimation, FeeEstimation, FeeEstimation]> {\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      transaction_payload: bytesToHex(serializePayload(transactionPayload)),\n      ...(estimatedLen ? { estimated_len: estimatedLen } : {}),\n    }),\n  };\n\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? new StacksMainnet());\n  const url = derivedNetwork.getTransactionFeeEstimateApiUrl();\n\n  const response = await derivedNetwork.fetchFn(url, options);\n\n  if (!response.ok) {\n    const body = await response.json().catch(() => ({}));\n\n    if (body?.reason === 'NoEstimateAvailable') {\n      throw new NoEstimateAvailableError(body?.reason_data?.message ?? '');\n    }\n\n    throw new Error(\n      `Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${body}\"`\n    );\n  }\n\n  const data: FeeEstimateResponse = await response.json();\n  return data.estimations;\n}\n\nexport type SerializationRejection = {\n  error: string;\n  reason: TxRejectedReason.Serialization;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type DeserializationRejection = {\n  error: string;\n  reason: TxRejectedReason.Deserialization;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type SignatureValidationRejection = {\n  error: string;\n  reason: TxRejectedReason.SignatureValidation;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type BadNonceRejection = {\n  error: string;\n  reason: TxRejectedReason.BadNonce;\n  reason_data: {\n    expected: number;\n    actual: number;\n    is_origin: boolean;\n    principal: boolean;\n  };\n  txid: string;\n};\n\nexport type FeeTooLowRejection = {\n  error: string;\n  reason: TxRejectedReason.FeeTooLow;\n  reason_data: {\n    expected: number;\n    actual: number;\n  };\n  txid: string;\n};\n\nexport type NotEnoughFundsRejection = {\n  error: string;\n  reason: TxRejectedReason.NotEnoughFunds;\n  reason_data: {\n    expected: string;\n    actual: string;\n  };\n  txid: string;\n};\n\nexport type NoSuchContractRejection = {\n  error: string;\n  reason: TxRejectedReason.NoSuchContract;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type NoSuchPublicFunctionRejection = {\n  error: string;\n  reason: TxRejectedReason.NoSuchPublicFunction;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type BadFunctionArgumentRejection = {\n  error: string;\n  reason: TxRejectedReason.BadFunctionArgument;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type ContractAlreadyExistsRejection = {\n  error: string;\n  reason: TxRejectedReason.ContractAlreadyExists;\n  reason_data: {\n    contract_identifier: string;\n  };\n  txid: string;\n};\n\nexport type PoisonMicroblocksDoNotConflictRejection = {\n  error: string;\n  reason: TxRejectedReason.PoisonMicroblocksDoNotConflict;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type PoisonMicroblockHasUnknownPubKeyHashRejection = {\n  error: string;\n  reason: TxRejectedReason.PoisonMicroblockHasUnknownPubKeyHash;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type PoisonMicroblockIsInvalidRejection = {\n  error: string;\n  reason: TxRejectedReason.PoisonMicroblockIsInvalid;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type BadAddressVersionByteRejection = {\n  error: string;\n  reason: TxRejectedReason.BadAddressVersionByte;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type NoCoinbaseViaMempoolRejection = {\n  error: string;\n  reason: TxRejectedReason.NoCoinbaseViaMempool;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type ServerFailureNoSuchChainTipRejection = {\n  error: string;\n  reason: TxRejectedReason.ServerFailureNoSuchChainTip;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type ServerFailureDatabaseRejection = {\n  error: string;\n  reason: TxRejectedReason.ServerFailureDatabase;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type ServerFailureOtherRejection = {\n  error: string;\n  reason: TxRejectedReason.ServerFailureOther;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type TxBroadcastResultOk = {\n  txid: string;\n  error?: undefined;\n  reason?: undefined;\n  reason_data?: undefined;\n};\n\nexport type TxBroadcastResultRejected =\n  | SerializationRejection\n  | DeserializationRejection\n  | SignatureValidationRejection\n  | BadNonceRejection\n  | FeeTooLowRejection\n  | NotEnoughFundsRejection\n  | NoSuchContractRejection\n  | NoSuchPublicFunctionRejection\n  | BadFunctionArgumentRejection\n  | ContractAlreadyExistsRejection\n  | PoisonMicroblocksDoNotConflictRejection\n  | PoisonMicroblockHasUnknownPubKeyHashRejection\n  | PoisonMicroblockIsInvalidRejection\n  | BadAddressVersionByteRejection\n  | NoCoinbaseViaMempoolRejection\n  | ServerFailureNoSuchChainTipRejection\n  | ServerFailureDatabaseRejection\n  | ServerFailureOtherRejection;\n\nexport type TxBroadcastResult = TxBroadcastResultOk | TxBroadcastResultRejected;\n\n/**\n * Broadcast the signed transaction to a core node\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to broadcast\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to broadcast transaction to\n *\n * @returns {Promise} that resolves to a response if the operation succeeds\n */\nexport async function broadcastTransaction(\n  transaction: StacksTransaction,\n  network?: StacksNetworkName | StacksNetwork,\n  attachment?: Uint8Array\n): Promise<TxBroadcastResult> {\n  const rawTx = transaction.serialize();\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n  const url = derivedNetwork.getBroadcastApiUrl();\n\n  return broadcastRawTransaction(rawTx, url, attachment, derivedNetwork.fetchFn);\n}\n\n/**\n * Broadcast the signed transaction to a core node\n *\n * @param {Uint8Array} rawTx - the raw serialized transaction bytes to broadcast\n * @param {string} url - the broadcast endpoint URL\n *\n * @returns {Promise} that resolves to a response if the operation succeeds\n */\nexport async function broadcastRawTransaction(\n  rawTx: Uint8Array,\n  url: string,\n  attachment?: Uint8Array,\n  fetchFn: FetchFn = createFetchFn()\n): Promise<TxBroadcastResult> {\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': attachment ? 'application/json' : 'application/octet-stream' },\n    body: attachment\n      ? JSON.stringify({\n          tx: bytesToHex(rawTx),\n          attachment: bytesToHex(attachment),\n        })\n      : rawTx,\n  };\n\n  const response = await fetchFn(url, options);\n  if (!response.ok) {\n    try {\n      return (await response.json()) as TxBroadcastResult;\n    } catch (e) {\n      throw Error(`Failed to broadcast transaction: ${(e as Error).message}`);\n    }\n  }\n\n  const text = await response.text();\n  // Replace extra quotes around txid string\n  const txid = text.replace(/[\"]+/g, '');\n  if (!validateTxId(txid)) throw new Error(text);\n  return { txid } as TxBroadcastResult;\n}\n\n/**\n * Fetch a contract's ABI\n *\n * @param {string} address - the contracts address\n * @param {string} contractName - the contracts name\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to broadcast transaction to\n *\n * @returns {Promise} that resolves to a ClarityAbi if the operation succeeds\n */\nexport async function getAbi(\n  address: string,\n  contractName: string,\n  network: StacksNetworkName | StacksNetwork\n): Promise<ClarityAbi> {\n  const options = {\n    method: 'GET',\n  };\n\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network);\n  const url = derivedNetwork.getAbiApiUrl(address, contractName);\n\n  const response = await derivedNetwork.fetchFn(url, options);\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error fetching contract ABI for contract \"${contractName}\" at address ${address}. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return JSON.parse(await response.text()) as ClarityAbi;\n}\n\nfunction deriveNetwork(transaction: StacksTransaction) {\n  switch (transaction.version) {\n    case TransactionVersion.Mainnet:\n      return new StacksMainnet();\n    case TransactionVersion.Testnet:\n      return new StacksTestnet();\n  }\n}\n\nexport interface MultiSigOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys?: string[];\n}\n\n/**\n * STX token transfer transaction options\n */\nexport interface TokenTransferOptions {\n  /** the address of the recipient of the token transfer */\n  recipient: string | PrincipalCV;\n  /** the amount to be transfered in microstacks */\n  amount: IntegerType;\n  /** the transaction fee in microstacks */\n  fee?: IntegerType;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** the network that the transaction will ultimately be broadcast to */\n  network?: StacksNetworkName | StacksNetwork;\n  /** the transaction anchorMode, which specifies whether it should be\n   * included in an anchor block or a microblock */\n  anchorMode: AnchorModeName | AnchorMode;\n  /** an arbitrary string to include in the transaction, must be less than 34 bytes */\n  memo?: string;\n  /** the post condition mode, specifying whether or not post-conditions must fully cover all\n   * transfered assets */\n  postConditionMode?: PostConditionMode;\n  /** a list of post conditions to add to the transaction */\n  postConditions?: PostCondition[];\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n}\n\nexport interface UnsignedTokenTransferOptions extends TokenTransferOptions {\n  publicKey: string;\n}\n\nexport interface SignedTokenTransferOptions extends TokenTransferOptions {\n  senderKey: string;\n}\n\nexport interface UnsignedMultiSigTokenTransferOptions extends TokenTransferOptions {\n  numSignatures: number;\n  publicKeys: string[];\n}\n\nexport interface SignedMultiSigTokenTransferOptions extends TokenTransferOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys: string[];\n}\n\n/**\n * Generates an unsigned Stacks token transfer transaction\n *\n * Returns a Stacks token transfer transaction.\n *\n * @param {UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {Promise<StacksTransaction>}\n */\nexport async function makeUnsignedSTXTokenTransfer(\n  txOptions: UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: new StacksMainnet(),\n    postConditionMode: PostConditionMode.Deny,\n    memo: '',\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createTokenTransferPayload(options.recipient, options.amount, options.memo);\n\n  let authorization: Authorization | null = null;\n  let spendingCondition: SpendingCondition | null = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.SerializeP2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    spendingCondition = createMultiSigSpendingCondition(\n      AddressHashMode.SerializeP2SH,\n      options.numSignatures,\n      options.publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  if (options.sponsored) {\n    authorization = createSponsoredAuth(spendingCondition);\n  } else {\n    authorization = createStandardAuth(spendingCondition);\n  }\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n  const lpPostConditions = createLPList(postConditions);\n\n  const transaction = new StacksTransaction(\n    network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    options.anchorMode,\n    network.chainId\n  );\n\n  if (txOptions.fee === undefined || txOptions.fee === null) {\n    const fee = await estimateTransactionFeeWithFallback(transaction, network);\n    transaction.setFee(fee);\n  }\n\n  if (txOptions.nonce === undefined || txOptions.nonce === null) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a signed Stacks token transfer transaction\n *\n * Returns a signed Stacks token transfer transaction.\n *\n * @param {SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {StacksTransaction}\n */\nexport async function makeSTXTokenTransfer(\n  txOptions: SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions\n): Promise<StacksTransaction> {\n  if ('senderKey' in txOptions) {\n    // txOptions is SignedTokenTransferOptions\n    const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedSTXTokenTransfer({ publicKey, ...options });\n\n    const privKey = createStacksPrivateKey(txOptions.senderKey);\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    // txOptions is SignedMultiSigTokenTransferOptions\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedSTXTokenTransfer(options);\n\n    const signer = new TransactionSigner(transaction);\n    let pubKeys = txOptions.publicKeys;\n    for (const key of txOptions.signerKeys) {\n      const pubKey = pubKeyfromPrivKey(key);\n      pubKeys = pubKeys.filter(pk => pk !== bytesToHex(pubKey.data));\n      signer.signOrigin(createStacksPrivateKey(key));\n    }\n\n    for (const key of pubKeys) {\n      signer.appendOrigin(publicKeyFromBytes(hexToBytes(key)));\n    }\n\n    return transaction;\n  }\n}\n\n/**\n * Contract deploy transaction options\n */\nexport interface BaseContractDeployOptions {\n  clarityVersion?: ClarityVersion;\n  contractName: string;\n  /** the Clarity code to be deployed */\n  codeBody: string;\n  /** transaction fee in microstacks */\n  fee?: IntegerType;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** the network that the transaction will ultimately be broadcast to */\n  network?: StacksNetworkName | StacksNetwork;\n  /** the transaction anchorMode, which specifies whether it should be\n   * included in an anchor block or a microblock */\n  anchorMode: AnchorModeName | AnchorMode;\n  /** the post condition mode, specifying whether or not post-conditions must fully cover all\n   * transfered assets */\n  postConditionMode?: PostConditionMode;\n  /** a list of post conditions to add to the transaction */\n  postConditions?: PostCondition[];\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n}\n\nexport interface ContractDeployOptions extends BaseContractDeployOptions {\n  /** a hex string of the private key of the transaction sender */\n  senderKey: string;\n}\n\nexport interface UnsignedContractDeployOptions extends BaseContractDeployOptions {\n  /** a hex string of the public key of the transaction sender */\n  publicKey: string;\n}\n\n/**\n * @deprecated Use the new {@link estimateTransaction} function insterad.\n *\n * Estimate the total transaction fee in microstacks for a contract deploy\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateContractDeploy(\n  transaction: StacksTransaction,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<bigint> {\n  if (\n    transaction.payload.payloadType !== PayloadType.SmartContract &&\n    transaction.payload.payloadType !== PayloadType.VersionedSmartContract\n  ) {\n    throw new Error(\n      `Contract deploy fee estimation only possible with ${\n        PayloadType[PayloadType.SmartContract]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  // Place holder estimate until contract deploy fee estimation is fully implemented on Stacks\n  // blockchain core\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n  const url = derivedNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await derivedNetwork.fetchFn(url, fetchOptions);\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error estimating contract deploy fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = intToBigInt(transaction.serialize().byteLength, false);\n  const feeRate = intToBigInt(feeRateResult, false);\n  return feeRate * txBytes;\n}\n\n/**\n * Generates a Clarity smart contract deploy transaction\n *\n * @param {ContractDeployOptions} txOptions - an options object for the contract deploy\n *\n * Returns a signed Stacks smart contract deploy transaction.\n *\n * @return {StacksTransaction}\n */\nexport async function makeContractDeploy(\n  txOptions: ContractDeployOptions\n): Promise<StacksTransaction> {\n  const privKey = createStacksPrivateKey(txOptions.senderKey);\n  const stacksPublicKey = getPublicKey(privKey);\n  const publicKey = publicKeyToString(stacksPublicKey);\n  const unsignedTxOptions: UnsignedContractDeployOptions = { ...txOptions, publicKey };\n  const transaction: StacksTransaction = await makeUnsignedContractDeploy(unsignedTxOptions);\n\n  if (txOptions.senderKey) {\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n  }\n\n  return transaction;\n}\n\nexport async function makeUnsignedContractDeploy(\n  txOptions: UnsignedContractDeployOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: new StacksMainnet(),\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n    clarityVersion: ClarityVersion.Clarity2,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createSmartContractPayload(\n    options.contractName,\n    options.codeBody,\n    options.clarityVersion\n  );\n\n  const addressHashMode = AddressHashMode.SerializeP2PKH;\n  const pubKey = createStacksPublicKey(options.publicKey);\n\n  let authorization: Authorization | null = null;\n\n  const spendingCondition = createSingleSigSpendingCondition(\n    addressHashMode,\n    publicKeyToString(pubKey),\n    options.nonce,\n    options.fee\n  );\n\n  if (options.sponsored) {\n    authorization = createSponsoredAuth(spendingCondition);\n  } else {\n    authorization = createStandardAuth(spendingCondition);\n  }\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n  const lpPostConditions = createLPList(postConditions);\n\n  const transaction = new StacksTransaction(\n    network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    options.anchorMode,\n    network.chainId\n  );\n\n  if (txOptions.fee === undefined || txOptions.fee === null) {\n    const fee = await estimateTransactionFeeWithFallback(transaction, network);\n    transaction.setFee(fee);\n  }\n\n  if (txOptions.nonce === undefined || txOptions.nonce === null) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = publicKeyToAddress(addressVersion, pubKey);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Contract function call transaction options\n */\nexport interface ContractCallOptions {\n  /** the Stacks address of the contract */\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  /** transaction fee in microstacks */\n  fee?: IntegerType;\n  feeEstimateApiUrl?: string;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** the Stacks blockchain network that will ultimately be used to broadcast this transaction */\n  network?: StacksNetworkName | StacksNetwork;\n  /** the transaction anchorMode, which specifies whether it should be\n   * included in an anchor block or a microblock */\n  anchorMode: AnchorModeName | AnchorMode;\n  /** the post condition mode, specifying whether or not post-conditions must fully cover all\n   * transfered assets */\n  postConditionMode?: PostConditionMode;\n  /** a list of post conditions to add to the transaction */\n  postConditions?: PostCondition[];\n  /** set to true to validate that the supplied function args match those specified in\n   * the published contract */\n  validateWithAbi?: boolean | ClarityAbi;\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n}\n\nexport interface UnsignedContractCallOptions extends ContractCallOptions {\n  publicKey: string;\n}\n\nexport interface SignedContractCallOptions extends ContractCallOptions {\n  senderKey: string;\n}\n\nexport interface UnsignedMultiSigContractCallOptions extends ContractCallOptions {\n  numSignatures: number;\n  publicKeys: string[];\n}\n\nexport interface SignedMultiSigContractCallOptions extends ContractCallOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys: string[];\n}\n\n/**\n * @deprecated Use the new {@link estimateTransaction} function insterad.\n *\n * Estimate the total transaction fee in microstacks for a contract function call\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateContractFunctionCall(\n  transaction: StacksTransaction,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<bigint> {\n  if (transaction.payload.payloadType !== PayloadType.ContractCall) {\n    throw new Error(\n      `Contract call fee estimation only possible with ${\n        PayloadType[PayloadType.ContractCall]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  // Place holder estimate until contract call fee estimation is fully implemented on Stacks\n  // blockchain core\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n  const url = derivedNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await derivedNetwork.fetchFn(url, fetchOptions);\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error estimating contract call fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = intToBigInt(transaction.serialize().byteLength, false);\n  const feeRate = intToBigInt(feeRateResult, false);\n  return feeRate * txBytes;\n}\n\n/**\n * Generates an unsigned Clarity smart contract function call transaction\n *\n * @param {UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions} txOptions - an options object for the contract call\n *\n * @returns {Promise<StacksTransaction>}\n */\nexport async function makeUnsignedContractCall(\n  txOptions: UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: new StacksMainnet(),\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createContractCallPayload(\n    options.contractAddress,\n    options.contractName,\n    options.functionName,\n    options.functionArgs\n  );\n\n  if (options?.validateWithAbi) {\n    let abi: ClarityAbi;\n    if (typeof options.validateWithAbi === 'boolean') {\n      if (options?.network) {\n        abi = await getAbi(options.contractAddress, options.contractName, options.network);\n      } else {\n        throw new Error('Network option must be provided in order to validate with ABI');\n      }\n    } else {\n      abi = options.validateWithAbi;\n    }\n\n    validateContractCall(payload, abi);\n  }\n\n  let spendingCondition: SpendingCondition | null = null;\n  let authorization: Authorization | null = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.SerializeP2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    spendingCondition = createMultiSigSpendingCondition(\n      AddressHashMode.SerializeP2SH,\n      options.numSignatures,\n      options.publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  if (options.sponsored) {\n    authorization = createSponsoredAuth(spendingCondition);\n  } else {\n    authorization = createStandardAuth(spendingCondition);\n  }\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n\n  const lpPostConditions = createLPList(postConditions);\n  const transaction = new StacksTransaction(\n    network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    options.anchorMode,\n    network.chainId\n  );\n\n  if (txOptions.fee === undefined || txOptions.fee === null) {\n    const fee = await estimateTransactionFeeWithFallback(transaction, network);\n    transaction.setFee(fee);\n  }\n\n  if (txOptions.nonce === undefined || txOptions.nonce === null) {\n    const addressVersion =\n      network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await getNonce(senderAddress, network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a Clarity smart contract function call transaction\n *\n * @param {SignedContractCallOptions | SignedMultiSigContractCallOptions} txOptions - an options object for the contract function call\n *\n * Returns a signed Stacks smart contract function call transaction.\n *\n * @return {StacksTransaction}\n */\nexport async function makeContractCall(\n  txOptions: SignedContractCallOptions | SignedMultiSigContractCallOptions\n): Promise<StacksTransaction> {\n  if ('senderKey' in txOptions) {\n    const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedContractCall({ publicKey, ...options });\n\n    const privKey = createStacksPrivateKey(txOptions.senderKey);\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedContractCall(options);\n\n    const signer = new TransactionSigner(transaction);\n    let pubKeys = txOptions.publicKeys;\n    for (const key of txOptions.signerKeys) {\n      const pubKey = pubKeyfromPrivKey(key);\n      pubKeys = pubKeys.filter(pk => pk !== bytesToHex(pubKey.data));\n      signer.signOrigin(createStacksPrivateKey(key));\n    }\n\n    for (const key of pubKeys) {\n      signer.appendOrigin(publicKeyFromBytes(hexToBytes(key)));\n    }\n\n    return transaction;\n  }\n}\n\n/**\n * Generates a STX post condition with a standard principal\n *\n * Returns a STX post condition object\n *\n * @param address - the c32check address\n * @param conditionCode - the condition code\n * @param amount - the amount of STX tokens (denoted in micro-STX)\n */\nexport function makeStandardSTXPostCondition(\n  address: string,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType\n): STXPostCondition {\n  return createSTXPostCondition(createStandardPrincipal(address), conditionCode, amount);\n}\n\n/**\n * Generates a STX post condition with a contract principal\n *\n * Returns a STX post condition object\n *\n * @param address - the c32check address of the contract\n * @param contractName - the name of the contract\n * @param conditionCode - the condition code\n * @param amount - the amount of STX tokens (denoted in micro-STX)\n *\n * @return {STXPostCondition}\n */\nexport function makeContractSTXPostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType\n): STXPostCondition {\n  return createSTXPostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    amount\n  );\n}\n\n/**\n * Generates a fungible token post condition with a standard principal\n *\n * Returns a fungible token post condition object\n *\n * @param address - the c32check address\n * @param conditionCode - the condition code\n * @param amount - the amount of fungible tokens (in their respective base unit)\n * @param assetInfo - asset info describing the fungible token\n */\nexport function makeStandardFungiblePostCondition(\n  address: string,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  return createFungiblePostCondition(\n    createStandardPrincipal(address),\n    conditionCode,\n    amount,\n    assetInfo\n  );\n}\n\n/**\n * Generates a fungible token post condition with a contract principal\n *\n * Returns a fungible token post condition object\n *\n * @param address - the c32check address\n * @param contractName - the name of the contract\n * @param conditionCode - the condition code\n * @param amount - the amount of fungible tokens (in their respective base unit)\n * @param assetInfo - asset info describing the fungible token\n */\nexport function makeContractFungiblePostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  return createFungiblePostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    amount,\n    assetInfo\n  );\n}\n\n/**\n * Generates a non-fungible token post condition with a standard principal\n *\n * Returns a non-fungible token post condition object\n *\n * @param {String} address - the c32check address\n * @param {FungibleConditionCode} conditionCode - the condition code\n * @param {AssetInfo} assetInfo - asset info describing the non-fungible token\n * @param {ClarityValue} assetId - asset identifier of the nft instance (typically a uint/buffer/string)\n *\n * @return {NonFungiblePostCondition}\n */\nexport function makeStandardNonFungiblePostCondition(\n  address: string,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetId: ClarityValue\n): NonFungiblePostCondition {\n  return createNonFungiblePostCondition(\n    createStandardPrincipal(address),\n    conditionCode,\n    assetInfo,\n    assetId\n  );\n}\n\n/**\n * Generates a non-fungible token post condition with a contract principal\n *\n * Returns a non-fungible token post condition object\n *\n * @param {String} address - the c32check address\n * @param {String} contractName - the name of the contract\n * @param {FungibleConditionCode} conditionCode - the condition code\n * @param {AssetInfo} assetInfo - asset info describing the non-fungible token\n * @param {ClarityValue} assetId - asset identifier of the nft instance (typically a uint/buffer/string)\n *\n * @return {NonFungiblePostCondition}\n */\nexport function makeContractNonFungiblePostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetId: ClarityValue\n): NonFungiblePostCondition {\n  return createNonFungiblePostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    assetInfo,\n    assetId\n  );\n}\n\n/**\n * Read only function options\n *\n * @param {String} contractAddress - the c32check address of the contract\n * @param {String} contractName - the contract name\n * @param {String} functionName - name of the function to be called\n * @param {[ClarityValue]} functionArgs - an array of Clarity values as arguments to the function call\n * @param {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param {String} senderAddress - the c32check address of the sender\n */\n\nexport interface ReadOnlyFunctionOptions {\n  contractName: string;\n  contractAddress: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  /** the network that the contract which contains the function is deployed to */\n  network?: StacksNetworkName | StacksNetwork;\n  /** address of the sender */\n  senderAddress: string;\n}\n\n/**\n * Calls a function as read-only from a contract interface\n * It is not necessary that the function is defined as read-only in the contract\n *\n * @param {ReadOnlyFunctionOptions} readOnlyFunctionOptions - the options object\n *\n * Returns an object with a status bool (okay) and a result string that is a serialized clarity value in hex format.\n *\n * @return {ClarityValue}\n */\nexport async function callReadOnlyFunction(\n  readOnlyFunctionOptions: ReadOnlyFunctionOptions\n): Promise<ClarityValue> {\n  const defaultOptions = {\n    network: new StacksMainnet(),\n  };\n\n  const options = Object.assign(defaultOptions, readOnlyFunctionOptions);\n\n  const { contractName, contractAddress, functionName, functionArgs, senderAddress } = options;\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n  const url = network.getReadOnlyFunctionCallApiUrl(contractAddress, contractName, functionName);\n\n  const args = functionArgs.map(arg => cvToHex(arg));\n\n  const body = JSON.stringify({\n    sender: senderAddress,\n    arguments: args,\n  });\n\n  const response = await network.fetchFn(url, {\n    method: 'POST',\n    body,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error calling read-only function. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return response.json().then(responseJson => parseReadOnlyResponse(responseJson));\n}\n\nexport interface GetContractMapEntryOptions {\n  /** the contracts address */\n  contractAddress: string;\n  /** the contracts name */\n  contractName: string;\n  /** the map name */\n  mapName: string;\n  /** key to lookup in the map */\n  mapKey: ClarityValue;\n  /** the network that has the contract */\n  network?: StacksNetworkName | StacksNetwork;\n}\n\n/**\n * Fetch data from a contract data map.\n * @param getContractMapEntryOptions - the options object\n * @returns\n * Promise that resolves to a ClarityValue if the operation succeeds.\n * Resolves to NoneCV if the map does not contain the given key, if the map does not exist, or if the contract prinicipal does not exist\n */\nexport async function getContractMapEntry<T extends ClarityValue = ClarityValue>(\n  getContractMapEntryOptions: GetContractMapEntryOptions\n): Promise<T | NoneCV> {\n  const defaultOptions = {\n    network: new StacksMainnet(),\n  };\n  const { contractAddress, contractName, mapName, mapKey, network } = Object.assign(\n    defaultOptions,\n    getContractMapEntryOptions\n  );\n\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network);\n  const url = derivedNetwork.getMapEntryUrl(contractAddress, contractName, mapName);\n\n  const serializedKeyBytes = serializeCV(mapKey);\n  const serializedKeyHex = '0x' + bytesToHex(serializedKeyBytes);\n\n  const fetchOptions: RequestInit = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n    body: JSON.stringify(serializedKeyHex), // endpoint expects a JSON string atom (quote wrapped string)\n  };\n\n  const response = await derivedNetwork.fetchFn(url, fetchOptions);\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error fetching map entry for map \"${mapName}\" in contract \"${contractName}\" at address ${contractAddress}, using map key \"${serializedKeyHex}\". Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const responseBody = await response.text();\n  const responseJson: { data?: string } = JSON.parse(responseBody);\n  if (!responseJson.data) {\n    throw new Error(\n      `Error fetching map entry for map \"${mapName}\" in contract \"${contractName}\" at address ${contractAddress}, using map key \"${serializedKeyHex}\". Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the response: \"${responseBody}\"`\n    );\n  }\n  let deserializedCv: T;\n  try {\n    deserializedCv = deserializeCV<T>(responseJson.data);\n  } catch (error) {\n    throw new Error(`Error deserializing Clarity value \"${responseJson.data}\": ${error}`);\n  }\n  return deserializedCv;\n}\n\n/**\n * Sponsored transaction options\n */\nexport interface SponsorOptionsOpts {\n  /** the origin-signed transaction */\n  transaction: StacksTransaction;\n  /** the sponsor's private key */\n  sponsorPrivateKey: string;\n  /** the transaction fee amount to sponsor */\n  fee?: IntegerType;\n  /** the nonce of the sponsor account */\n  sponsorNonce?: IntegerType;\n  /** the hashmode of the sponsor's address */\n  sponsorAddressHashmode?: AddressHashMode;\n  /** the Stacks blockchain network that this transaction will ultimately be broadcast to */\n  network?: StacksNetworkName | StacksNetwork;\n}\n\n/**\n * Constructs and signs a sponsored transaction as the sponsor\n *\n * @param {SponsorOptionsOpts} sponsorOptions - the sponsor options object\n *\n * Returns a signed sponsored transaction.\n *\n * @return {ClarityValue}\n */\nexport async function sponsorTransaction(\n  sponsorOptions: SponsorOptionsOpts\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: 0 as IntegerType,\n    sponsorNonce: 0 as IntegerType,\n    sponsorAddressHashmode: AddressHashMode.SerializeP2PKH as SingleSigHashMode,\n    network:\n      sponsorOptions.transaction.version === TransactionVersion.Mainnet\n        ? new StacksMainnet()\n        : new StacksTestnet(),\n  };\n\n  const options = Object.assign(defaultOptions, sponsorOptions);\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n  const sponsorPubKey = pubKeyfromPrivKey(options.sponsorPrivateKey);\n\n  if (sponsorOptions.fee === undefined || sponsorOptions.fee === null) {\n    let txFee = 0;\n    switch (options.transaction.payload.payloadType) {\n      case PayloadType.TokenTransfer:\n      case PayloadType.SmartContract:\n      case PayloadType.VersionedSmartContract:\n      case PayloadType.ContractCall:\n        const estimatedLen = estimateTransactionByteLength(options.transaction);\n        try {\n          txFee = (await estimateTransaction(options.transaction.payload, estimatedLen, network))[1]\n            .fee;\n        } catch (e) {\n          throw e;\n        }\n        break;\n      default:\n        throw new Error(\n          `Sponsored transactions not supported for transaction type ${\n            PayloadType[options.transaction.payload.payloadType]\n          }`\n        );\n    }\n    options.transaction.setFee(txFee);\n    options.fee = txFee;\n  }\n\n  if (sponsorOptions.sponsorNonce === undefined || sponsorOptions.sponsorNonce === null) {\n    const addressVersion =\n      network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n\n    const senderAddress = publicKeyToAddress(addressVersion, sponsorPubKey);\n    const sponsorNonce = await getNonce(senderAddress, network);\n    options.sponsorNonce = sponsorNonce;\n  }\n\n  const sponsorSpendingCondition = createSingleSigSpendingCondition(\n    options.sponsorAddressHashmode,\n    publicKeyToString(sponsorPubKey),\n    options.sponsorNonce,\n    options.fee\n  );\n\n  options.transaction.setSponsor(sponsorSpendingCondition);\n\n  const privKey = createStacksPrivateKey(options.sponsorPrivateKey);\n  const signer = TransactionSigner.createSponsorSigner(\n    options.transaction,\n    sponsorSpendingCondition\n  );\n  signer.signSponsor(privKey);\n\n  return signer.transaction;\n}\n\n/**\n * Estimates transaction byte length\n * Context:\n * 1) Multi-sig transaction byte length increases by adding signatures\n *    which causes the incorrect fee estimation because the fee value is set while creating unsigned transaction\n * 2) Single-sig transaction byte length remain same due to empty message signature which allocates the space for signature\n * @param {transaction} - StacksTransaction object to be estimated\n * @return {number} Estimated transaction byte length\n */\nexport function estimateTransactionByteLength(transaction: StacksTransaction): number {\n  const hashMode = transaction.auth.spendingCondition.hashMode;\n  // List of Multi-sig transaction hash modes\n  const multiSigHashModes = [AddressHashMode.SerializeP2SH, AddressHashMode.SerializeP2WSH];\n\n  // Check if its a Multi-sig transaction\n  if (multiSigHashModes.includes(hashMode)) {\n    const multiSigSpendingCondition: MultiSigSpendingCondition = transaction.auth\n      .spendingCondition as MultiSigSpendingCondition;\n\n    // Find number of existing signatures if the transaction is signed or partially signed\n    const existingSignatures = multiSigSpendingCondition.fields.filter(\n      field => field.contents.type === StacksMessageType.MessageSignature\n    ).length; // existingSignatures will be 0 if its a unsigned transaction\n\n    // Estimate total signature bytes size required for this multi-sig transaction\n    // Formula: totalSignatureLength = (signaturesRequired - existingSignatures) * (SIG_LEN_BYTES + 1 byte of type of signature)\n    const totalSignatureLength =\n      (multiSigSpendingCondition.signaturesRequired - existingSignatures) *\n      (RECOVERABLE_ECDSA_SIG_LENGTH_BYTES + 1);\n\n    return transaction.serialize().byteLength + totalSignatureLength;\n  } else {\n    // Single-sig transaction\n    // Signature space already allocated by empty message signature\n    return transaction.serialize().byteLength;\n  }\n}\n\n/**\n * Estimates the fee using {@link estimateTransfer} as a fallback if\n * {@link estimateTransaction} does not get an estimation due to the\n * {@link NoEstimateAvailableError} error.\n */\nexport async function estimateTransactionFeeWithFallback(\n  transaction: StacksTransaction,\n  network: StacksNetwork\n): Promise<bigint | number> {\n  try {\n    const estimatedLen = estimateTransactionByteLength(transaction);\n    return (await estimateTransaction(transaction.payload, estimatedLen, network))[1].fee;\n  } catch (error) {\n    if (error instanceof NoEstimateAvailableError) {\n      return await estimateTransferUnsafe(transaction, network);\n    }\n    throw error;\n  }\n}\n","import {\n  launchProject,\n  getBlockHeight,\n  invest,\n  mintNft,\n  downloadURI,\n  updateUri,\n  claimFunds,\n} from \"./ContractCalls.js\";\nimport { globalsObject } from \"./script.js\";\n\n//html form for new project interface:\nexport function createNewProjectForm() {\n  //create new project form:\n  const form = document.createElement(\"form\");\n  form.name = \"newProject\";\n  //label and input project name: form.elements[0]\n  const para0 = document.createElement(\"p\");\n  form.appendChild(para0);\n  const labelProjectName = document.createElement(\"label\");\n  labelProjectName.className = form.name;\n  labelProjectName.textContent = \"Project name: \";\n  labelProjectName.setAttribute(\"for\", \"inputProjectName\");\n  para0.appendChild(labelProjectName);\n\n  const inputProjectName = document.createElement(\"input\");\n  inputProjectName.className = form.name;\n  inputProjectName.type = \"text\";\n  inputProjectName.id = \"inputProjectName\";\n  inputProjectName.value = \"myNewProject\";\n  para0.appendChild(inputProjectName);\n\n  //label and input project description: form.elements[1]\n  const para1 = document.createElement(\"p\");\n  form.appendChild(para1);\n  const labelProjectDescr = document.createElement(\"label\");\n  labelProjectDescr.className = form.name;\n  labelProjectDescr.textContent = \"Description: \";\n  labelProjectDescr.setAttribute(\"for\", \"inputProjectDescr\");\n  para1.appendChild(labelProjectDescr);\n\n  const inputProjectDescr = document.createElement(\"input\");\n  inputProjectDescr.className = form.name;\n  inputProjectDescr.type = \"text\";\n  inputProjectDescr.id = \"inputProjectDescr\";\n  inputProjectDescr.value = \"this is my new project\";\n  para1.appendChild(inputProjectDescr);\n\n  //label and input project link: form.elements[2]\n  const para2 = document.createElement(\"p\");\n  form.appendChild(para2);\n  const labelProjectLink = document.createElement(\"label\");\n  labelProjectLink.className = form.name;\n  labelProjectLink.textContent = \"Website:\";\n  labelProjectLink.setAttribute(\"for\", \"inputProjectLink\");\n  para2.appendChild(labelProjectLink);\n\n  const inputProjectLink = document.createElement(\"input\");\n  inputProjectLink.className = form.name;\n  inputProjectLink.type = \"url\";\n  inputProjectLink.id = \"inputProjectLink\";\n  inputProjectLink.value = \"https://orckings.org/\";\n  para2.appendChild(inputProjectLink);\n\n  //label and input project goal: form.elements[3]\n  const para3 = document.createElement(\"p\");\n  form.appendChild(para3);\n  const labelProjectGoal = document.createElement(\"label\");\n  labelProjectGoal.className = form.name;\n  labelProjectGoal.textContent = \"Goal [STX]: \";\n  labelProjectGoal.setAttribute(\"for\", \"inputProjectGoal\");\n  para3.appendChild(labelProjectGoal);\n\n  const inputProjectGoal = document.createElement(\"input\");\n  inputProjectGoal.className = form.name;\n  inputProjectGoal.type = \"number\";\n  inputProjectGoal.id = \"inputProjectGoal\";\n  inputProjectGoal.value = 10000;\n  para3.appendChild(inputProjectGoal);\n\n  //label and input project duration: form.elements[4]\n  const para4 = document.createElement(\"p\");\n  form.appendChild(para4);\n  const labelProjectDuration = document.createElement(\"label\");\n  labelProjectDuration.className = form.name;\n  labelProjectDuration.textContent = \"Duration days: \";\n  labelProjectDuration.setAttribute(\"for\", \"inputProjectDuration\");\n  para4.appendChild(labelProjectDuration);\n\n  const inputProjectDuration = document.createElement(\"input\");\n  inputProjectDuration.className = form.name;\n  inputProjectDuration.type = \"number\";\n  inputProjectDuration.id = \"inputProjectDuration\";\n  inputProjectDuration.value = 30;\n  para4.appendChild(inputProjectDuration);\n\n  //submit form button: form.elements[5]\n  const para5 = document.createElement(\"p\");\n  form.appendChild(para5);\n  const btnNewProject = document.createElement(\"button\");\n  btnNewProject.className = form.name;\n  btnNewProject.type = \"submit\";\n  btnNewProject.textContent = \"Create project\";\n  para5.appendChild(btnNewProject);\n\n  //home form button: form.elements[6]\n  const btnHome = document.createElement(\"button\");\n  btnHome.className = form.name;\n  //btnHome.type = \"submit\";\n  btnHome.textContent = \"back\";\n  para5.appendChild(btnHome);\n\n  return form;\n}\n\n//newproject interface:\nexport function newProjectComponent() {\n  const form = createNewProjectForm();\n  document.body.appendChild(form);\n  const ipName = form.elements[0];\n  ipName.focus();\n  const ipDescr = form.elements[1];\n  const ipLink = form.elements[2];\n  const ipGoal = form.elements[3];\n  const ipDuration = form.elements[4];\n  const submitBtn = form.elements[5];\n  const homeBtn = form.elements[6];\n\n  const btnNP = document.getElementById(\"newProjectBtn\");\n\n  submitBtn.addEventListener(\"click\", async (event) => {\n    event.preventDefault();\n    let blockHeight = 0;\n    await getBlockHeight().then((res) => {\n      blockHeight = res;\n    });\n    //console.log(`blockHeight: ${blockHeight}`);\n    const start = blockHeight + BigInt(2);\n    //console.log(`startBlock: ${start}`);\n    const end = start + (BigInt(ipDuration.value)* 144);    //ipDuration in days + currently ca. 144 blocks per day\n    /*console.log(\"ipName \"+ ipName.value);\n        console.log(\"ipDescr \"+ ipDescr.value);\n        console.log(\"ipLink \"+ ipLink.value);\n        console.log(\"ipGoal \"+ ipGoal.value);\n        console.log(\"start \"+ start);\n        console.log(\"end \"+ end);\n*/\n    await launchProject(\n      ipName.value,\n      ipDescr.value,\n      ipLink.value,\n      ipGoal.value,\n      start,\n      end\n    );\n    //state change:\n    form.remove();\n    createListHeader();\n  });\n\n  homeBtn.addEventListener(\"click\", () => {\n    form.remove();\n    createListHeader();\n  });\n}\n\n//html form for invest interface:\nexport function createInvestForm() {\n  //create new project form:\n  const form = document.createElement(\"form\");\n  form.name = \"Invest\";\n\n  //label and input invest amount: form.elements[0]\n  const para0 = document.createElement(\"p\");\n  form.appendChild(para0);\n  const labelInvestAmount = document.createElement(\"label\");\n  labelInvestAmount.className = form.name;\n  labelInvestAmount.textContent = \"Amount: \";\n  labelInvestAmount.setAttribute(\"for\", \"inputInvestAmount\");\n  para0.appendChild(labelInvestAmount);\n\n  const inputInvestAmount = document.createElement(\"input\");\n  inputInvestAmount.className = form.name;\n  inputInvestAmount.type = \"number\";\n  inputInvestAmount.id = \"inputInvestAmount\";\n  inputInvestAmount.value = 10;\n  para0.appendChild(inputInvestAmount);\n\n  //submit form button: form.elements[1]\n  const para5 = document.createElement(\"p\");\n  form.appendChild(para5);\n  const btnInvestAmount = document.createElement(\"button\");\n  btnInvestAmount.className = form.name;\n  btnInvestAmount.type = \"submit\";\n  btnInvestAmount.textContent = \"invest\";\n  para5.appendChild(btnInvestAmount);\n\n  //home form button: form.elements[2]\n  const btnHome = document.createElement(\"button\");\n  btnHome.className = form.name;\n  //btnHome.type = \"submit\";\n  btnHome.textContent = \"back\";\n  para5.appendChild(btnHome);\n\n  return form;\n}\n\n//invest interface:\nexport function investComponent(projectId) {\n  //console.log('listDiv: ');\n  //console.log(listDiv);\n  const form = createInvestForm();\n  document.body.appendChild(form);\n  const ipAmount = form.elements[0];\n  ipAmount.focus();\n  const submitBtn = form.elements[1];\n  const homeBtn = form.elements[2];\n\n  submitBtn.addEventListener(\"click\", async () => {\n    event.preventDefault();\n    await invest(projectId, ipAmount.value);\n    form.remove();\n    createListHeader();\n  });\n\n  homeBtn.addEventListener(\"click\", () => {\n    form.remove();\n    createListHeader();\n  });\n}\n\n//html form for mint nft interface:\nexport function createMintNftForm() {\n  //create mint nft form:\n  const form = document.createElement(\"form\");\n  form.name = \"mint nft\";\n\n  //label and input nft name: form.elements[0]\n  const para0 = document.createElement(\"p\");\n  form.appendChild(para0);\n  const labelNftName = document.createElement(\"label\");\n  labelNftName.className = form.name;\n  labelNftName.textContent = \"nft name: \";\n  labelNftName.setAttribute(\"for\", \"inputNftName\");\n  para0.appendChild(labelNftName);\n\n  const inputNftName = document.createElement(\"input\");\n  inputNftName.className = form.name;\n  inputNftName.type = \"text\";\n  inputNftName.id = \"inputNftName\";\n  inputNftName.value = \"cool music nft\";\n  para0.appendChild(inputNftName);\n\n  //submit form button: form.elements[1]\n  const para5 = document.createElement(\"p\");\n  form.appendChild(para5);\n  const btnMintNft = document.createElement(\"button\");\n  btnMintNft.className = form.name;\n  btnMintNft.type = \"submit\";\n  btnMintNft.textContent = \"mint nft\";\n  para5.appendChild(btnMintNft);\n\n  //home form button: form.elements[2]\n  const btnHome = document.createElement(\"button\");\n  btnHome.className = form.name;\n  //btnHome.type = \"submit\";\n  btnHome.textContent = \"back\";\n  para5.appendChild(btnHome);\n\n  return form;\n}\n\n//mint nft interface:\nexport function mintNftComponent(projectId) {\n  //console.log('listDiv: ');\n  //console.log(listDiv);\n  const form = createMintNftForm();\n  document.body.appendChild(form);\n  const nftName = form.elements[0];\n  nftName.focus();\n  const submitBtn = form.elements[1];\n  const homeBtn = form.elements[2];\n\n  submitBtn.addEventListener(\"click\", async () => {\n    event.preventDefault();\n    await mintNft(projectId, nftName.value);\n    form.remove();\n    createListHeader();\n  });\n\n  homeBtn.addEventListener(\"click\", () => {\n    form.remove();\n    createListHeader();\n  });\n}\n\n//html form for update uri interface:\nexport function createUpdateUriForm() {\n  //create update uri form:\n  const form = document.createElement(\"form\");\n  form.name = \"update uri\";\n\n  //label and input new uri: form.elements[0]\n  const para0 = document.createElement(\"p\");\n  form.appendChild(para0);\n  const labelNewUri = document.createElement(\"label\");\n  labelNewUri.className = form.name;\n  labelNewUri.textContent = \"new uri: \";\n  labelNewUri.setAttribute(\"for\", \"inputNewUri\");\n  para0.appendChild(labelNewUri);\n  //debug: is manual input copied from ipfs\n  const cid = \"bafybeifzoemu4xt7sgwpzmnxjmrec2xtzxz7tqvzbf43yowmsffsu6fzqi\";\n\n  const inputNewUri = document.createElement(\"input\");\n  inputNewUri.className = form.name;\n  inputNewUri.type = \"text\";\n  inputNewUri.id = \"inputNewUri\";\n  inputNewUri.value = cid;\n  para0.appendChild(inputNewUri);\n\n  //submit form button: form.elements[1]\n  const para5 = document.createElement(\"p\");\n  form.appendChild(para5);\n  const btnUpdateUri = document.createElement(\"button\");\n  btnUpdateUri.className = form.name;\n  btnUpdateUri.type = \"submit\";\n  btnUpdateUri.textContent = \"update uri\";\n  para5.appendChild(btnUpdateUri);\n\n  //home form button: form.elements[2]\n  const btnHome = document.createElement(\"button\");\n  btnHome.className = form.name;\n  //btnHome.type = \"submit\";\n  btnHome.textContent = \"back\";\n  para5.appendChild(btnHome);\n\n  return form;\n}\n\n//update uri interface:\nexport function updateUriComponent(nftId, projectId, projectList) {\n  const form = createUpdateUriForm();\n  document.body.appendChild(form);\n  const newUri = form.elements[0];\n  newUri.focus();\n  const submitBtn = form.elements[1];\n  const homeBtn = form.elements[2];\n\n  submitBtn.addEventListener(\"click\", async () => {\n    event.preventDefault();\n    await updateUri(nftId, newUri.value);\n    form.remove();\n    showNftComponent(projectId, projectList);\n  });\n\n  homeBtn.addEventListener(\"click\", () => {\n    form.remove();\n    showNftComponent(projectId, projectList);\n  });\n}\n\n//html form for show nft interface:\nexport function createNftListPara(projectId, projectNftId, nftName) {\n  //label and input nft name\n  const para = document.createElement(\"p\");\n\n  const labelNftName = document.createElement(\"label\");\n  labelNftName.textContent = \"nft name: \";\n  labelNftName.setAttribute(\"for\", \"inputNftName\");\n  para.appendChild(labelNftName);\n\n  const inputNftName = document.createElement(\"input\");\n  inputNftName.disabled = true;\n  inputNftName.type = \"text\";\n  inputNftName.id = \"inputNftName\";\n  inputNftName.value = nftName;\n  para.appendChild(inputNftName);\n\n  const btnDownloadNft = document.createElement(\"button\");\n  btnDownloadNft.id = projectNftId;\n  btnDownloadNft.textContent = \"download\";\n  para.appendChild(btnDownloadNft);\n\n  if (\n    globalsObject.userStxAddress ===\n      globalsObject.projectList[projectId - 1][1].campaignOwner ||\n    globalsObject.userStxAddress === globalsObject.deployerStxAddress\n  ) {\n    const btnUpdateUri = document.createElement(\"button\");\n    btnUpdateUri.id = projectNftId;\n    btnUpdateUri.textContent = \"update uri\";\n    para.appendChild(btnUpdateUri);\n  }\n\n  return para;\n}\n\n//show nfts interface:\nexport function showNftComponent(projectId) {\n  const listPara = document.createElement(\"p\");\n  listPara.id = \"listPara\";\n  document.body.appendChild(listPara);\n\n  //projectNftList wird in script/updateProjectList() in [2] des projectList arrays gepusht\n  const nftList = globalsObject.projectList[projectId - 1][2];\n  console.log(`in showNftComponent: projectId ${projectId} :`);\n  console.log(nftList);\n  for (const item of nftList) {\n    const projectNftId = item.projectNftId;\n    const nftName = item.nft.name;\n    const para = createNftListPara(projectId, projectNftId, nftName);\n    listPara.appendChild(para);\n  }\n\n  async function listParaEventListener(e) {\n    console.log(\"in showNftComponent:\");\n    console.log(e.target.tagName);\n\n    if (e.target.tagName === \"BUTTON\") {\n      if (e.target.textContent === \"download\") {\n        const nftId = nftList[e.target.id - 1].nft.id;\n        const filename = `${nftList[e.target.id - 1].nft.name}`;\n        await downloadURI(nftId, projectId, filename);\n      } else if (e.target.textContent === \"update uri\") {\n        listPara.remove();\n        const nftId = nftList[e.target.id - 1].nft.id;\n        updateUriComponent(nftId, projectId, globalsObject.projectList);\n      }\n    }\n  }\n\n  listPara.addEventListener(\"click\", listParaEventListener, false);\n\n  //home button:\n  const btnHome = document.createElement(\"button\");\n  btnHome.textContent = \"back\";\n  listPara.appendChild(btnHome);\n\n  btnHome.addEventListener(\"click\", () => {\n    //listPara.removeEventListener(\"click\", listParaEventListener, false);\n    listPara.remove();\n    createListHeader();\n  });\n}\n\n// html elements to create projects list\nfunction createListItemPara(blockHeight, projectId, project) {\n  const para = document.createElement(\"p\");\n  //console.log('in createListItemPara: ');\n  //console.log(project);\n  //console.log(blockHeight);\n  //add invest button disabled if project is closed\n  const btnInvest = document.createElement(\"button\");\n  btnInvest.id = projectId;\n  btnInvest.textContent = \"Invest\";\n  if (blockHeight < project.startsAt.value) {\n    btnInvest.disabled = true;\n  }\n  if (blockHeight > project.endsAt.value-BigInt(1)) {\n    if (\n      project.targetReached &&\n      globalsObject.userStxAddress === project.campaignOwner &&\n      !project.claimed\n    ) {\n      btnInvest.textContent = \"Claim\";\n    } else if (project.claimed) {\n      btnInvest.textContent = \"Claimed\";\n      btnInvest.disabled = true;\n    } else {\n      btnInvest.disabled = true;\n    }\n  }\n  para.appendChild(btnInvest);\n  //add a hyperlink to the project site\n  const alink = document.createElement(\"a\");\n  alink.textContent = project.title.data;\n  alink.href = project.link.data;\n  alink.target = \"_blank\";\n  para.appendChild(alink);\n  //add funded to the list\n  const btnFund = document.createElement(\"button\");\n  btnFund.disabled = true;\n  btnFund.textContent = Number(project.pledgedAmount.value) / 1000000;\n  para.appendChild(btnFund);\n  //add goal to the list\n  const btnGoal = document.createElement(\"button\");\n  btnGoal.disabled = true;\n  btnGoal.textContent = project.fundGoal.value;\n  para.appendChild(btnGoal);\n\n  if (\n    globalsObject.userStxAddress === project.campaignOwner ||\n    globalsObject.userStxAddress === globalsObject.deployerStxAddress\n  ) {\n    //add a button to mint nfts for a project\n    const btnNftMint = document.createElement(\"button\");\n    btnNftMint.id = projectId;\n    btnNftMint.textContent = \"Mint Nft\";\n    para.appendChild(btnNftMint);\n  }\n\n  if (project.nftCounter.value != 0) {\n    //add a button to display the  nfts of a project\n    const btnNftList = document.createElement(\"button\");\n    btnNftList.id = projectId;\n    btnNftList.textContent = \"Show Nfts\";\n    para.appendChild(btnNftList);\n  }\n  //add the description:\n  const divDescr = document.createElement(\"div\");\n  divDescr.textContent = \"No description available\";\n  if (project.description != \"\") {\n    divDescr.textContent = project.description;\n  }\n  para.appendChild(divDescr);\n\n  return para;\n}\n\n//render the project List:\nexport async function renderProjectList() {\n  if (document.getElementById(\"listHeader\")) {\n    let blockHeight = 0;\n    await getBlockHeight().then((res) => {\n      blockHeight = res;\n    });\n\n    //make projectList copy from globals:\n    const pList = [];\n    for (const item of globalsObject.projectList) {\n      pList.push(item);\n    }\n\n    //remove old list para:\n    if (document.getElementById(\"listPara\")) {\n      const paraListRemove = document.getElementById(\"listPara\");\n      paraListRemove.remove();\n    }\n    //make new para for listentries:\n    const listDiv = document.getElementById(\"listHeader\");\n    const paraList = document.createElement(\"p\");\n    paraList.id = \"listPara\";\n    listDiv.appendChild(paraList);\n    //add updatet items to listPara\n    if (pList.length != 0) {\n      console.log(\"renderProjectList...\");\n      //console.log(`projectList.length = ${pList.length}`);\n      //console.log(pList);\n\n      for (const item of pList) {\n        const id = item[0];\n        const projectObject = item[1];\n        const itemPara = createListItemPara(blockHeight, id, projectObject);\n        paraList.appendChild(itemPara);\n      }\n    } else {\n      console.log(\"empty project list\");\n    }\n  } else {\n    console.log(\"no projectList active\");\n  }\n}\n\nexport async function createListHeader() {\n  //create list header\n  const listDiv = document.createElement(\"div\");\n  listDiv.id = \"listHeader\";\n  document.body.appendChild(listDiv);\n\n  //add newProject button\n  const navDiv = document.getElementById(\"navDiv\");\n  const btnNP = document.createElement(\"button\");\n  btnNP.id = \"newProjectBtn\";\n  btnNP.textContent = \"new Project\";\n  btnNP.addEventListener(\"click\", () => {\n    const listDiv = document.getElementById(\"listHeader\");\n    listDiv.remove();\n    btnNP.remove();\n    newProjectComponent();\n  });\n  //function to handle upbubbling clicks in list:\n  function handleListDivClicks(e) {\n    console.log(\"in handleListDivCLicks:\");\n    console.log(e.target.tagName);\n    if (e.target.tagName === \"BUTTON\") {\n      if (e.target.textContent === \"Invest\") {\n        listDiv.remove();\n        btnNP.remove();\n        investComponent(e.target.id);\n      } else if (e.target.textContent === \"Claim\") {\n        listDiv.remove();\n        btnNP.remove();\n        claimFunds(e.target.id);\n      } else if (e.target.textContent === \"Mint Nft\") {\n        listDiv.remove();\n        btnNP.remove();\n        mintNftComponent(e.target.id);\n      } else if (e.target.textContent === \"Show Nfts\") {\n        listDiv.remove();\n        btnNP.remove();\n        showNftComponent(e.target.id);\n      }\n    }\n  }\n  listDiv.addEventListener(\"click\", handleListDivClicks);\n\n  navDiv.appendChild(btnNP);\n\n  const para = document.createElement(\"p\");\n  para.id = \"headerpara\";\n\n  //add invest button disabled to the list\n  const btnInvest = document.createElement(\"button\");\n  btnInvest.textContent = \"Invest:\";\n  btnInvest.disabled = true;\n  para.appendChild(btnInvest);\n  //add a hyperlink to the list\n  const btnLink = document.createElement(\"button\");\n  btnLink.disabled = true;\n  btnLink.textContent = \"Link to project:\";\n  para.appendChild(btnLink);\n  //add funded to the list\n  const btnFund = document.createElement(\"button\");\n  btnFund.disabled = true;\n  btnFund.textContent = \"Funded:\";\n  para.appendChild(btnFund);\n  //add goal to the list\n  const btnGoal = document.createElement(\"button\");\n  btnGoal.disabled = true;\n  btnGoal.textContent = \"Goal:\";\n  para.appendChild(btnGoal);\n  //add a list of nfts if there are any\n  const btnList = document.createElement(\"button\");\n  btnList.disabled = true;\n  btnList.textContent = \" Projects nfts:\";\n  para.appendChild(btnList);\n\n  listDiv.appendChild(para);\n\n  renderProjectList();\n}\n","import {\n  trueCV,\n  falseCV,\n  noneCV,\n  someCV,\n  intCV,\n  uintCV,\n  standardPrincipalCV,\n  contractPrincipalCV,\n  responseErrorCV,\n  responseOkCV,\n  listCV,\n  tupleCV,\n  bufferCV,\n  stringUtf8CV,\n  stringAsciiCV,\n  bufferCVFromString,\n  cvToHex,\n} from \"@stacks/transactions\";\nimport { utf8ToBytes } from \"@stacks/common\";\nimport {\n  makeContractCall,\n  callReadOnlyFunction,\n  broadcastTransaction,\n  AnchorMode,\n  FungibleConditionCode,\n  BytesReader,\n  deserializeTransaction,\n  createStacksPrivateKey,\n  parseReadOnlyResponse,\n  makeStandardSTXPostCondition,\n  makeContractSTXPostCondition,\n} from \"@stacks/transactions\";\n\nimport { openContractCall } from \"@stacks/connect\";\n  \nimport { globalsObject, writeTxDataLog } from \"./script.js\";\nimport { createListHeader } from \"./Components.js\";\n\nexport async function launchProject(title, descr, link, goal, start, end) {\n  const postConditionAddress = globalsObject.userStxAddress;\n  const postConditionCode = FungibleConditionCode.LessEqual;\n  const postConditionAmount = 100000000;\n  const postConditions = [\n    makeStandardSTXPostCondition(\n      postConditionAddress,\n      postConditionCode,\n      postConditionAmount\n    ),\n  ];\n  const options = {\n    contractAddress: globalsObject.deployerStxAddress,\n    contractName: \"prt\",\n    functionName: \"launch\",\n    functionArgs: [\n      stringUtf8CV(title),\n      bufferCVFromString(descr),\n      stringUtf8CV(link),\n      uintCV(goal),\n      uintCV(start),\n      uintCV(end),\n    ],\n    network: globalsObject.network,\n    postConditions,\n    appDetails: {\n      name: \"PRT\",\n      icon: window.location.origin + \"/my-app-logo.svg\",\n    },\n    onFinish: (data) => {\n      writeTxDataLog(data);\n    },\n  };\n\n  await openContractCall(options);\n\n  //console.log('launch() txData.txId');\n  //console.log(globalsObject.txDataLog[(globalsObject.txDataLog.length -1)].txId);\n}\n\nexport async function claimFunds(projectId) {\n  const funds = globalsObject.projectList[projectId - 1][1].pledgedAmount.value;\n  console.log(\"in claimFunds funds:\");\n  console.log(globalsObject);\n  console.log(funds);\n\n  // With a contract principal\n  const postConditionAddress = globalsObject.userStxAddress;\n  const postConditionCode = FungibleConditionCode.LessEqual;\n  const postConditionAmount = funds;\n\n  const contractAddress = globalsObject.deployerStxAddress;\n  const contractName = \"prt\";\n\n  const postConditions = [\n    makeStandardSTXPostCondition(\n      postConditionAddress,\n      postConditionCode,\n      postConditionAmount\n    ),\n    makeContractSTXPostCondition(\n      contractAddress,\n      contractName,\n      postConditionCode,\n      postConditionAmount\n    ),\n  ];\n\n  const txOptions = {\n    contractAddress: globalsObject.deployerStxAddress,\n    contractName: \"prt\",\n    functionName: \"claim\",\n    functionArgs: [uintCV(projectId)],\n    validateWithAbi: true,\n    network: globalsObject.network,\n    postConditions,\n    AnchorMode: AnchorMode.Any,\n    appDetails: {\n      name: \"PRT\",\n      icon: window.location.origin + \"/my-app-logo.svg\",\n    },\n    onFinish: (data) => {\n      writeTxDataLog(data);\n    },\n  };\n\n  await openContractCall(txOptions).then(() => {\n    createListHeader();\n  });\n\n  //console.log('claim() txData.txId');\n  //console.log(globalsObject.txDataLog[(globalsObject.txDataLog.length -1)].txId);\n}\n\nexport async function invest(projectId, amount) {\n  const postConditionAddress = globalsObject.userStxAddress;\n  const postConditionCode = FungibleConditionCode.LessEqual;\n  const postConditionAmount = amount * 1000000;\n  const postConditions = [\n    makeStandardSTXPostCondition(\n      postConditionAddress,\n      postConditionCode,\n      postConditionAmount\n    ),\n  ];\n\n  const txOptions = {\n    contractAddress: globalsObject.deployerStxAddress,\n    contractName: \"prt\",\n    functionName: \"pledge\",\n    functionArgs: [uintCV(projectId), uintCV(amount * 1000000)],\n    validateWithAbi: true,\n    network: globalsObject.network,\n    postConditions,\n    AnchorMode: AnchorMode.Any,\n    appDetails: {\n      name: \"PRT\",\n      icon: window.location.origin + \"/my-app-logo.svg\",\n    },\n    onFinish: (data) => {\n      writeTxDataLog(data);\n    },\n  };\n\n  await openContractCall(txOptions);\n}\n\nexport async function mintNft(projectId, nftName) {\n  const txOptions = {\n    contractAddress: globalsObject.deployerStxAddress,\n    contractName: \"prt\",\n    functionName: \"mintNft\",\n    functionArgs: [uintCV(projectId), stringAsciiCV(nftName)],\n    validateWithAbi: true,\n    network: globalsObject.network,\n    AnchorMode: AnchorMode.Any,\n    appDetails: {\n      name: \"PRT\",\n      icon: window.location.origin + \"/my-app-logo.svg\",\n    },\n    onFinish: (data) => {\n      writeTxDataLog(data);\n    },\n  };\n\n  await openContractCall(txOptions);\n}\n\nexport async function updateUri(nftId, newUri) {\n  const txOptions = {\n    contractAddress: globalsObject.deployerStxAddress,\n    contractName: \"musicnfts\",\n    functionName: \"update-token-uri\",\n    functionArgs: [uintCV(nftId), stringAsciiCV(newUri)],\n    validateWithAbi: true,\n    network: globalsObject.network,\n    AnchorMode: AnchorMode.Any,\n    appDetails: {\n      name: \"PRT\",\n      icon: window.location.origin + \"/my-app-logo.svg\",\n    },\n    onFinish: (data) => {\n      writeTxDataLog(data);\n    },\n  };\n\n  await openContractCall(txOptions);\n\n  /*console.log('updateUri() txData.txId:');\n  console.log(txDataLog[(txDataLog.length -1)].txId);\n  console.log(txDataLog[(txDataLog.length -1)]);*/\n}\n\nexport async function downloadURI(nftId, projectId, filename) {\n  let downloadPrice;\n  await getDownloadPrice().then((res) => {\n    //console.log( `in downloadURI() res: ${res}`);\n    //console.log(res);\n    downloadPrice = 1000000 * res;\n  });\n  //console.log( `in downloadURI() downloadPrice: ${downloadPrice}`);\n  //console.log(downloadPrice);\n  const postConditionAddress = globalsObject.userStxAddress;\n  const postConditionCode = FungibleConditionCode.LessEqual;\n  const postConditionAmount = downloadPrice;\n  const postConditions = [\n    makeStandardSTXPostCondition(\n      postConditionAddress,\n      postConditionCode,\n      postConditionAmount\n    ),\n  ];\n\n  const txOptions = {\n    contractAddress: globalsObject.deployerStxAddress,\n    contractName: \"prt\",\n    functionName: \"download\",\n    functionArgs: [uintCV(nftId), uintCV(projectId)],\n    validateWithAbi: true,\n    network: globalsObject.network,\n    postConditions,\n    AnchorMode: AnchorMode.Any,\n    appDetails: {\n      name: \"PRT\",\n      icon: window.location.origin + \"/my-app-logo.svg\",\n    },\n    onFinish: (data) => {\n      writeTxDataLog(data);\n      getUri(nftId).then((uri) => {\n        //console.log('in downloadUri() uri');\n        //console.log(uri);\n        fetchData(uri, filename);\n      });\n    },\n  };\n\n  await openContractCall(txOptions);\n}\n\nexport async function getBlockHeight() {\n  const contractAddress = globalsObject.deployerStxAddress;\n  const contractName = \"prt\";\n  const functionName = \"get-blockHeight\";\n  const senderAddress = globalsObject.deployerStxAddress;\n\n  const options = {\n    contractAddress,\n    contractName,\n    functionName,\n    functionArgs: [],\n    network: globalsObject.network,\n    senderAddress,\n  };\n\n  const result = await callReadOnlyFunction(options);\n  const blockHeight = result.value.value;\n  //console.log(\"blockHeight \" + blockHeight);\n  return blockHeight;\n}\n\nexport async function getLastId() {\n  const contractAddress = globalsObject.deployerStxAddress;\n  const contractName = \"prt\";\n  const functionName = \"get-lastId\";\n  const senderAddress = globalsObject.deployerStxAddress;\n\n  const options = {\n    contractAddress,\n    contractName,\n    functionName,\n    functionArgs: [],\n    network: globalsObject.network,\n    senderAddress,\n  };\n\n  const result = await callReadOnlyFunction(options);\n  const lastId = result.value.value;\n  //console.log(\"lastID: \" +lastId);\n  return lastId;\n}\n\nexport async function getProject(projectId) {\n  const contractAddress = globalsObject.deployerStxAddress;\n  const contractName = \"prt\";\n  const functionName = \"get-campaign\";\n  const functionArgs = [uintCV(projectId)];\n  //console.log(\"functionArgs: \")\n  //console.log(functionArgs);\n  const senderAddress = globalsObject.deployerStxAddress;\n\n  const options = {\n    contractAddress,\n    contractName,\n    functionName,\n    functionArgs,\n    network: globalsObject.network,\n    senderAddress,\n  };\n\n  const result = await callReadOnlyFunction(options);\n  const campaign = result.value.data;\n\n  //console.log(campaign);\n  return campaign;\n}\n\nexport async function getProjectNft(projectId, nftId) {\n  const contractAddress = globalsObject.deployerStxAddress;\n  const contractName = \"prt\";\n  const functionName = \"get-projectNft\";\n  const functionArgs = [uintCV(projectId), uintCV(nftId)];\n  //console.log(\"functionArgs: \")\n  //console.log(functionArgs);\n  const senderAddress = globalsObject.deployerStxAddress;\n\n  const options = {\n    contractAddress,\n    contractName,\n    functionName,\n    functionArgs,\n    network: globalsObject.network,\n    senderAddress,\n  };\n\n  const result = await callReadOnlyFunction(options);\n  const nftData = result.value.value.data;\n  //console.log('nftData in getProjectNft() : ')\n  //console.log(nftData);\n  return nftData;\n}\n\nexport async function getNftOwner(nftId) {\n  const contractAddress = globalsObject.deployerStxAddress;\n  const contractName = \"musicnfts\";\n  const functionName = \"get-owner\";\n  const functionArgs = [uintCV(nftId)];\n  //console.log(\"functionArgs: \")\n  //console.log(functionArgs);\n  const senderAddress = globalsObject.deployerStxAddress;\n\n  const options = {\n    contractAddress,\n    contractName,\n    functionName,\n    functionArgs,\n    network: globalsObject.network,\n    senderAddress,\n  };\n\n  const result = await callReadOnlyFunction(options);\n  const nftOwner = result.value.data;\n  console.log(\"in getNftOwner:\");\n  console.log(nftOwner);\n  return nftOwner;\n}\n\nexport async function getDownloadPrice() {\n  const contractAddress = globalsObject.deployerStxAddress;\n  const contractName = \"prt\";\n  const functionName = \"get-price\";\n  const functionArgs = [];\n  //console.log(\"functionArgs: \")\n  //console.log(functionArgs);\n  const senderAddress = globalsObject.deployerStxAddress;\n\n  const options = {\n    contractAddress,\n    contractName,\n    functionName,\n    functionArgs,\n    network: globalsObject.network,\n    senderAddress,\n  };\n\n  const result = await callReadOnlyFunction(options);\n  const price = Number(result.value.value);\n  //console.log('in getDownloadPrice:')\n  //console.log(price);\n  return price;\n}\n\nexport async function getUri(nftId) {\n  const contractAddress = globalsObject.deployerStxAddress;\n  const contractName = \"musicnfts\";\n  const functionName = \"get-token-uri\";\n  const functionArgs = [uintCV(nftId)];\n  //console.log(\"functionArgs: \")\n  //console.log(functionArgs);\n  const senderAddress = globalsObject.deployerStxAddress;\n\n  const options = {\n    contractAddress,\n    contractName,\n    functionName,\n    functionArgs,\n    network: globalsObject.network,\n    senderAddress,\n  };\n\n  const result = await callReadOnlyFunction(options);\n  const uri = result.value.value.data;\n  //console.log('in getUri uri:')\n  //console.log(uri);\n  return uri;\n}\n\nexport async function getSTXBalance(stxAddress) {\n  let balance = 0;\n  const apiCallUri = `/extended/v1/address/${stxAddress}/stx`;\n  let baseUri = globalsObject.baseUri;\n  const uri = baseUri + apiCallUri;\n  await fetch(uri)\n    .then((result) => {\n      return result.json();\n    })\n    .then((json) => {\n      //console.log(\"function getSTXBalance: \");\n      //console.log (json.balance);\n      balance = json.balance;\n    });\n  //console.log(\"balance returned: \"+ balance);\n  return balance;\n}\n\nexport async function getTxInfo(txId) {\n  //uri: `http://localhost:3999/extended/v1/tx/${txId}`\n  //console.log('network:');\n  //console.log(network.coreApiUrl);\n  const uri = `${globalsObject.network.coreApiUrl}/extended/v1/tx/${txId}`;\n  //console.log('uri:');\n  //console.log(uri);\n  const myRequest = new Request(uri);\n  let data;\n  await fetch(myRequest)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      return response.json();\n    })\n    .then((response) => {\n      //console.log('response: ');\n      //console.log(response);\n      data = response.tx_status;\n    });\n\n  //console.log('data: ');\n  //console.log(data);\n  return data;\n}\n\nfunction fetchData(cid, filename) {\n  //spezial function to download the contents of the uri\n  const address = `https://${cid}.ipfs.dweb.link/favicon.ico`;\n  //console.log(`in fetchData(): ${address}`);\n  //console.log(address);\n\n  const myRequest = new Request(address);\n  fetch(myRequest)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      return response.blob();\n    })\n    .then((blob) => {\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"favicon.ico\"; //filename;\n      document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox\n      a.click();\n      a.remove(); //afterwards we remove the element again\n    });\n}\n","import { sha256 } from '@noble/hashes/sha256';\nimport { bytesToHex, hexToBytes } from '@noble/hashes/utils';\nimport { c32, c32decode, c32encode, c32normalize } from './encoding';\n\n/**\n * Get the c32check checksum of a hex-encoded string\n * @param {string} dataHex - the hex string\n * @returns {string} the c32 checksum, as a bin-encoded string\n */\nfunction c32checksum(dataHex: string): string {\n  const dataHash = sha256(sha256(hexToBytes(dataHex)));\n  const checksum = bytesToHex(dataHash.slice(0, 4));\n  return checksum;\n}\n\n/**\n * Encode a hex string as a c32check string.  This is a lot like how\n * base58check works in Bitcoin-land, but this algorithm uses the\n * z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * calculate the c32checksum of version + data\n * * c32encode version + data + c32checksum\n * @param {number} version - the version string (between 0 and 31)\n * @param {string} data - the data to encode\n * @returns {string} the c32check representation\n */\nexport function c32checkEncode(version: number, data: string): string {\n  if (version < 0 || version >= 32) {\n    throw new Error('Invalid version (must be between 0 and 31)');\n  }\n  if (!data.match(/^[0-9a-fA-F]*$/)) {\n    throw new Error('Invalid data (not a hex string)');\n  }\n\n  data = data.toLowerCase();\n  if (data.length % 2 !== 0) {\n    data = `0${data}`;\n  }\n\n  let versionHex = version.toString(16);\n  if (versionHex.length === 1) {\n    versionHex = `0${versionHex}`;\n  }\n\n  const checksumHex = c32checksum(`${versionHex}${data}`);\n  const c32str = c32encode(`${data}${checksumHex}`);\n  return `${c32[version]}${c32str}`;\n}\n\n/*\n * Decode a c32check string back into its version and data payload.  This is\n * a lot like how base58check works in Bitcoin-land, but this algorithm uses\n * the z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * extract the version, data, and checksum\n * * verify the checksum matches c32checksum(version + data)\n * * return data\n * @param {string} c32data - the c32check-encoded string\n * @returns {array} [version (number), data (string)].  The returned data\n * will be a hex string.  Throws an exception if the checksum does not match.\n */\nexport function c32checkDecode(c32data: string): [number, string] {\n  c32data = c32normalize(c32data);\n  const dataHex = c32decode(c32data.slice(1));\n  const versionChar = c32data[0];\n  const version = c32.indexOf(versionChar);\n  const checksum = dataHex.slice(-8);\n\n  let versionHex = version.toString(16);\n  if (versionHex.length === 1) {\n    versionHex = `0${versionHex}`;\n  }\n\n  if (c32checksum(`${versionHex}${dataHex.substring(0, dataHex.length - 8)}`) !== checksum) {\n    throw new Error('Invalid c32check string: checksum mismatch');\n  }\n\n  return [version, dataHex.substring(0, dataHex.length - 8)];\n}","import { hexToBytes } from '@noble/hashes/utils';\n\nexport const c32 = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\nconst hex = '0123456789abcdef';\n\n/**\n * Encode a hex string as a c32 string.  Note that the hex string is assumed\n * to be big-endian (and the resulting c32 string will be as well).\n * @param {string} inputHex - the input to encode\n * @param {number} minLength - the minimum length of the c32 string\n * @returns {string} the c32check-encoded representation of the data, as a string\n */\nexport function c32encode(inputHex: string, minLength?: number): string {\n  // must be hex\n  if (!inputHex.match(/^[0-9a-fA-F]*$/)) {\n    throw new Error('Not a hex-encoded string');\n  }\n\n  if (inputHex.length % 2 !== 0) {\n    inputHex = `0${inputHex}`;\n  }\n\n  inputHex = inputHex.toLowerCase();\n\n  let res = [];\n  let carry = 0;\n  for (let i = inputHex.length - 1; i >= 0; i--) {\n    if (carry < 4) {\n      const currentCode = hex.indexOf(inputHex[i]) >> carry;\n      let nextCode = 0;\n      if (i !== 0) {\n        nextCode = hex.indexOf(inputHex[i - 1]);\n      }\n      // carry = 0, nextBits is 1, carry = 1, nextBits is 2\n      const nextBits = 1 + carry;\n      const nextLowBits = nextCode % (1 << nextBits) << (5 - nextBits);\n      const curC32Digit = c32[currentCode + nextLowBits];\n      carry = nextBits;\n      res.unshift(curC32Digit);\n    } else {\n      carry = 0;\n    }\n  }\n\n  let C32leadingZeros = 0;\n  for (let i = 0; i < res.length; i++) {\n    if (res[i] !== '0') {\n      break;\n    } else {\n      C32leadingZeros++;\n    }\n  }\n\n  res = res.slice(C32leadingZeros);\n\n  const zeroPrefix = new TextDecoder().decode(hexToBytes(inputHex)).match(/^\\u0000*/);\n  const numLeadingZeroBytesInHex = zeroPrefix ? zeroPrefix[0].length : 0;\n\n  for (let i = 0; i < numLeadingZeroBytesInHex; i++) {\n    res.unshift(c32[0]);\n  }\n\n  if (minLength) {\n    const count = minLength - res.length;\n    for (let i = 0; i < count; i++) {\n      res.unshift(c32[0]);\n    }\n  }\n\n  return res.join('');\n}\n\n/*\n * Normalize a c32 string\n * @param {string} c32input - the c32-encoded input string\n * @returns {string} the canonical representation of the c32 input string\n */\nexport function c32normalize(c32input: string): string {\n  // must be upper-case\n  // replace all O's with 0's\n  // replace all I's and L's with 1's\n  return c32input.toUpperCase().replace(/O/g, '0').replace(/L|I/g, '1');\n}\n\n/*\n * Decode a c32 string back into a hex string.  Note that the c32 input\n * string is assumed to be big-endian (and the resulting hex string will\n * be as well).\n * @param {string} c32input - the c32-encoded input to decode\n * @param {number} minLength - the minimum length of the output hex string (in bytes)\n * @returns {string} the hex-encoded representation of the data, as a string\n */\nexport function c32decode(c32input: string, minLength?: number): string {\n  c32input = c32normalize(c32input);\n\n  // must result in a c32 string\n  if (!c32input.match(`^[${c32}]*$`)) {\n    throw new Error('Not a c32-encoded string');\n  }\n\n  const zeroPrefix = c32input.match(`^${c32[0]}*`);\n  const numLeadingZeroBytes = zeroPrefix ? zeroPrefix[0].length : 0;\n\n  let res = [];\n  let carry = 0;\n  let carryBits = 0;\n  for (let i = c32input.length - 1; i >= 0; i--) {\n    if (carryBits === 4) {\n      res.unshift(hex[carry]);\n      carryBits = 0;\n      carry = 0;\n    }\n    const currentCode = c32.indexOf(c32input[i]) << carryBits;\n    const currentValue = currentCode + carry;\n    const currentHexDigit = hex[currentValue % 16];\n    carryBits += 1;\n    carry = currentValue >> 4;\n    if (carry > 1 << carryBits) {\n      throw new Error('Panic error in decoding.');\n    }\n    res.unshift(currentHexDigit);\n  }\n  // one last carry\n  res.unshift(hex[carry]);\n\n  if (res.length % 2 === 1) {\n    res.unshift('0');\n  }\n\n  let hexLeadingZeros = 0;\n  for (let i = 0; i < res.length; i++) {\n    if (res[i] !== '0') {\n      break;\n    } else {\n      hexLeadingZeros++;\n    }\n  }\n\n  res = res.slice(hexLeadingZeros - (hexLeadingZeros % 2));\n\n  let hexStr = res.join('');\n  for (let i = 0; i < numLeadingZeroBytes; i++) {\n    hexStr = `00${hexStr}`;\n  }\n\n  if (minLength) {\n    const count = minLength * 2 - hexStr.length;\n    for (let i = 0; i < count; i += 2) {\n      hexStr = `00${hexStr}`;\n    }\n  }\n\n  return hexStr;\n}","/*\n * From https://github.com/wzbg/base58check\n * @Author: zyc\n * @Date:   2016-09-11 23:36:05\n */\n'use strict';\n\nimport { sha256 } from '@noble/hashes/sha256';\nimport { hexToBytes } from '@noble/hashes/utils';\nimport * as basex from 'base-x';\n\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n\nexport function encode(data: string | Uint8Array, prefix: string | Uint8Array = '00') {\n  const dataBytes = typeof data === 'string' ? hexToBytes(data) : data;\n  const prefixBytes = typeof prefix === 'string' ? hexToBytes(prefix) : data;\n\n  if (!(dataBytes instanceof Uint8Array) || !(prefixBytes instanceof Uint8Array)) {\n    throw new TypeError('Argument must be of type Uint8Array or string');\n  }\n\n  const checksum = sha256(sha256(new Uint8Array([...prefixBytes, ...dataBytes])));\n  return basex(ALPHABET).encode([...prefixBytes, ...dataBytes, ...checksum.slice(0, 4)]);\n}\n\nexport function decode(string: string) {\n  const bytes = basex(ALPHABET).decode(string);\n  const prefixBytes = bytes.slice(0, 1);\n  const dataBytes = bytes.slice(1, -4);\n\n  // todo: for better performance replace spread with `concatBytes` method\n  const checksum = sha256(sha256(new Uint8Array([...prefixBytes, ...dataBytes])));\n  bytes.slice(-4).forEach((check, index) => {\n    if (check !== checksum[index]) {\n      throw new Error('Invalid checksum');\n    }\n  });\n  return { prefix: prefixBytes, data: dataBytes };\n}\n","//https://github.com/stacks-network/c32check/blob/master/src/address.ts\n\n\nimport { c32checkEncode, c32checkDecode } from './checksum';\nimport * as base58check from './base58check';\nimport { bytesToHex } from '@noble/hashes/utils';\n\nexport const versions = {\n  mainnet: {\n    p2pkh: 22, // 'P'\n    p2sh: 20, // 'M'\n  },\n  testnet: {\n    p2pkh: 26, // 'T'\n    p2sh: 21, // 'N'\n  },\n};\n\n// address conversion : bitcoin to stacks\nconst ADDR_BITCOIN_TO_STACKS: Record<number, number> = {};\nADDR_BITCOIN_TO_STACKS[0] = versions.mainnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[5] = versions.mainnet.p2sh;\nADDR_BITCOIN_TO_STACKS[111] = versions.testnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[196] = versions.testnet.p2sh;\n\n// address conversion : stacks to bitcoin\nconst ADDR_STACKS_TO_BITCOIN: Record<number, number> = {};\nADDR_STACKS_TO_BITCOIN[versions.mainnet.p2pkh] = 0;\nADDR_STACKS_TO_BITCOIN[versions.mainnet.p2sh] = 5;\nADDR_STACKS_TO_BITCOIN[versions.testnet.p2pkh] = 111;\nADDR_STACKS_TO_BITCOIN[versions.testnet.p2sh] = 196;\n\n/**\n * Make a c32check address with the given version and hash160\n * The only difference between a c32check string and c32 address\n * is that the letter 'S' is pre-pended.\n * @param {number} version - the address version number\n * @param {string} hash160hex - the hash160 to encode (must be a hash160)\n * @returns {string} the address\n */\nexport function c32address(version: number, hash160hex: string): string {\n  if (!hash160hex.match(/^[0-9a-fA-F]{40}$/)) {\n    throw new Error('Invalid argument: not a hash160 hex string');\n  }\n\n  const c32string = c32checkEncode(version, hash160hex);\n  return `S${c32string}`;\n}\n\n/**\n * Decode a c32 address into its version and hash160\n * @param {string} c32addr - the c32check-encoded address\n * @returns {[number, string]} a tuple with the version and hash160\n */\nexport function c32addressDecode(c32addr: string): [number, string] {\n  if (c32addr.length <= 5) {\n    throw new Error('Invalid c32 address: invalid length');\n  }\n  if (c32addr[0] != 'S') {\n    throw new Error('Invalid c32 address: must start with \"S\"');\n  }\n  return c32checkDecode(c32addr.slice(1));\n}\n\n/*\n * Convert a base58check address to a c32check address.\n * Try to convert the version number if one is not given.\n * @param {string} b58check - the base58check encoded address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the c32 address with the given version number (or the\n *   semantically-equivalent c32 version number, if not given)\n */\nexport function b58ToC32(b58check: string, version: number = -1): string {\n  const addrInfo = base58check.decode(b58check);\n  const hash160String = bytesToHex(addrInfo.data);\n  const addrVersion = parseInt(bytesToHex(addrInfo.prefix), 16);\n  let stacksVersion;\n\n  if (version < 0) {\n    stacksVersion = addrVersion;\n    if (ADDR_BITCOIN_TO_STACKS[addrVersion] !== undefined) {\n      stacksVersion = ADDR_BITCOIN_TO_STACKS[addrVersion];\n    }\n  } else {\n    stacksVersion = version;\n  }\n\n  return c32address(stacksVersion, hash160String);\n}\n\n/*\n * Convert a c32check address to a base58check address.\n * @param {string} c32string - the c32check address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the base58 address with the given version number (or the\n *    semantically-equivalent bitcoin version number, if not given)\n */\nexport function c32ToB58(c32string: string, version: number = -1): string {\n  const addrInfo = c32addressDecode(c32string);\n  const stacksVersion = addrInfo[0];\n  const hash160String = addrInfo[1];\n  let bitcoinVersion;\n\n  if (version < 0) {\n    bitcoinVersion = stacksVersion;\n    if (ADDR_STACKS_TO_BITCOIN[stacksVersion] !== undefined) {\n      bitcoinVersion = ADDR_STACKS_TO_BITCOIN[stacksVersion];\n    }\n  } else {\n    bitcoinVersion = version;\n  }\n\n  let prefix = bitcoinVersion.toString(16);\n  if (prefix.length === 1) {\n    prefix = `0${prefix}`;\n  }\n\n  return base58check.encode(hash160String, prefix);\n}","import { StacksTestnet, StacksMainnet, StacksMocknet } from \"@stacks/network\";\r\nimport { bytesToUtf8 } from \"@stacks/common\";\r\nimport { connectWallet } from \"./WalletConnect.js\";\r\nimport {\r\n  getSTXBalance,\r\n  getLastId,\r\n  getProject,\r\n  getTxInfo,\r\n  getProjectNft,\r\n} from \"./ContractCalls.js\";\r\nimport { createListHeader, renderProjectList } from \"./Components.js\";\r\nimport { userSession } from \"./userSession.js\";\r\nimport { c32address } from \"./utils/address.ts\";\r\n\r\n//global Variable projectList\r\nexport const globalsObject = {\r\n  state: \"start\",\r\n  projectList: [],\r\n  txDataLog: [],\r\n  periodics: [],\r\n//debug:\r\n  //userStxAddress: \"ST1YT40RFHKSYXM69KS1Q7BGEH0RBJ7H1RKDN1WX\",\r\n//debug\r\n  userStxAddress: \"\",\r\n  deployerStxAddress: \"\",\r\n  environment: \"testnet\",\r\n  network: {},\r\n  apiBaseUri: \"\",\r\n};\r\n\r\nfunction setNetwork() {\r\n  if (globalsObject.environment === \"mainnet\") {\r\n    globalsObject.network = new StacksMainnet();\r\n    globalsObject.baseUri = \"https://api.mainnet.hiro.so\";\r\n  } else if (globalsObject.environment === \"devnet\") {\r\n    globalsObject.network = new StacksMocknet();\r\n    globalsObject.baseUri = \"http://localhost:3999\";\r\n    globalsObject.deployerStxAddress =\r\n      \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\";\r\n  } else {\r\n    //as standard and at startup\r\n    globalsObject.network = new StacksTestnet();\r\n    globalsObject.baseUri = \"https://api.testnet.hiro.so\";\r\n    globalsObject.deployerStxAddress =\r\n      \"ST1YT40RFHKSYXM69KS1Q7BGEH0RBJ7H1RKDN1WX\";\r\n    \r\n  }\r\n}\r\nsetNetwork();\r\n\r\nexport function writeTxDataLog(data) {\r\n  if (globalsObject.txDataLog.length > 10) {\r\n    globalsObject.txDataLog.shift();\r\n    globalsObject.txDataLog.push(data);\r\n  } else {\r\n    globalsObject.txDataLog.push(data);\r\n  }\r\n}\r\n\r\n//start page:\r\nexport function createStartPage() {\r\n  async function updateProjectList() {\r\n    console.log(\"updating project list...\");\r\n    //update complete projectList:\r\n    const lastProjectId = await getLastId();\r\n    //console.log(`lastId: ${lastProjectId}`);\r\n    const newProjectList = [];\r\n    //console.log('in updateProjectList():')\r\n    //console.log('projectList: ');\r\n    //console.log(projectList);\r\n    for (let id = 1; id <= Number(lastProjectId); id++) {\r\n      let projectArray = [];\r\n      await getProject(id).then((projectData) => {\r\n        //console.log(\"updateProjectList res: \");\r\n        //console.log(projectData);\r\n        //translate description from buffer to string:\r\n        //console.log(projectData.description);\r\n        projectData.description = bytesToUtf8(projectData.description.buffer);\r\n        //console.log(projectData.description);\r\n\r\n        //generate stacks address with the available data:\r\n        const campaignOwner = c32address(\r\n          projectData.campaignOwner.address.version,\r\n          projectData.campaignOwner.address.hash160\r\n        );\r\n        projectData.campaignOwner = campaignOwner;\r\n        //translate returned values to js:\r\n        //targetReached: bool type3 true, type4 false\r\n        if (projectData.targetReached.type === 3) {\r\n          projectData.targetReached = true;\r\n        } else {\r\n          projectData.targetReached = false;\r\n        }\r\n        //targetReached: bool type3 true, type4 false\r\n        if (projectData.claimed.type === 3) {\r\n          projectData.claimed = true;\r\n        } else {\r\n          projectData.claimed = false;\r\n        }\r\n\r\n        if (projectData) {\r\n          projectArray = [id, projectData, []];\r\n        }\r\n      });\r\n      //get the nftCounter of the actual project\r\n      const nftCount = projectArray[1].nftCounter.value;\r\n      //console.log(`nftCounter: ${nftCount}`);\r\n      //console.log(nftCount);\r\n      //get the nfts of the actual project\r\n      for (let i = 1; i <= Number(nftCount); i++) {\r\n        await getProjectNft(id, i).then((nftData) => {\r\n          if (nftData) {\r\n            projectArray[2].push({\r\n              projectNftId: i,\r\n              nft: { id: nftData.nftId.value, name: nftData.nftName.data },\r\n            });\r\n          }\r\n        });\r\n      }\r\n      //push the gathered data into the projectList array\r\n      newProjectList.push(projectArray);\r\n    }\r\n    globalsObject.projectList = newProjectList;\r\n    renderProjectList();\r\n    //console.log(\"in updateProjectList() globalsObject:\");\r\n    //console.log(globalsObject);\r\n  }\r\n\r\n  async function checkTxData() {\r\n    console.log(\"in checkTxData():\");\r\n    //outsort success tx\r\n    if (globalsObject.txDataLog.length > 0) {\r\n      const log = globalsObject.txDataLog;\r\n      const aMax = log.length - 1;\r\n\r\n      for (let i = 0; i <= aMax; i++) {\r\n        const tx = log.shift();\r\n        const txId = tx.txId;\r\n        await getTxInfo(txId).then((response) => {\r\n          const txInfo = response;\r\n          console.log(txInfo);\r\n          if (txInfo === \"pending\") {\r\n            log.push(tx);\r\n          } else if (txInfo === \"success\") {\r\n            //update projectList()\r\n            updateProjectList();\r\n          } else {\r\n            const url = `localhost:8000/txid/${txId}?chain=testnet&api=http://localhost:3999`;\r\n            window.alert(`transaction failed: don't panic!\r\n                                        NO funds will be lost ( except fees ), \r\n                                        please check stacks explorer for details: \r\n                                        ${url}`);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  const navDiv = document.createElement(\"div\");\r\n  navDiv.id = \"navDiv\";\r\n  document.body.appendChild(navDiv);\r\n\r\n  const btn = document.createElement(\"button\");\r\n  btn.id = \"connectBtn\";\r\n  btn.textContent = \"Connect\";\r\n  navDiv.appendChild(btn);\r\n\r\n  const connecting = function () {\r\n    //do periodically in the \"background\"\r\n    updateProjectList();\r\n    globalsObject.periodics.push({\r\n      name: \"idUpdateProjectList\",\r\n      id: setInterval(updateProjectList, 20000),\r\n    });\r\n    globalsObject.periodics.push({\r\n      name: \"idCheckTxData\",\r\n      id: setInterval(checkTxData, 5000),\r\n    });\r\n    btn.remove();\r\n    connectWallet(createPageConnected);\r\n//debug:    \r\n    //createPageConnected();\r\n//debug\r\n  };\r\n\r\n  btn.addEventListener(\"click\", connecting, false);\r\n\r\n  console.log(globalsObject.network);\r\n}\r\n//first time: start page\r\ncreateStartPage();\r\n\r\n//connected page:\r\nexport function createPageConnected() {\r\n  //add new paragraph for Balance:\r\n  const divBal = document.createElement(\"div\");\r\n\r\n  async function updateBalance() {\r\n    await getSTXBalance(globalsObject.userStxAddress).then((res) => {\r\n      console.log(\"checking user balance...\");\r\n      const userBalance = res / 1000000;\r\n      //console.log('in createPageConnected:updateBalance() globalsObject.userBalance');\r\n      //console.log(globalsObject.userBalance);\r\n      divBal.textContent = `Balance ${userBalance.toString()}STX`;\r\n    });\r\n  }\r\n  updateBalance();\r\n  //update userBalance periodically but start it only once\r\n  if (globalsObject.state === \"loggedIn\") {\r\n    globalsObject.periodics.push({\r\n      name: \"idUpdateBalance\",\r\n      id: setInterval(updateBalance, 10000),\r\n    });\r\n  }\r\n\r\n  //render projectList periodically but start only once\r\n  if (globalsObject.state === \"loggedIn\") {\r\n    globalsObject.periodics.push({\r\n      name: \"idrenderProjectList\",\r\n      id: setInterval(renderProjectList, 10000),\r\n    });\r\n  }\r\n\r\n  //create sign out button with listener to sign out and clear the page\r\n  const btnSignOut = document.createElement(\"button\");\r\n  btnSignOut.id = \"signOutBtn\";\r\n  btnSignOut.textContent = \"Sign out\";\r\n  btnSignOut.addEventListener(\"click\", () => {\r\n    //clear body:\r\n    let firstChild = document.body.firstChild;\r\n    while (firstChild) {\r\n      document.body.removeChild(document.body.firstChild);\r\n      firstChild = document.body.firstChild;\r\n    }\r\n    //halt all periodics\r\n    for (const item of globalsObject.periodics) {\r\n      clearInterval(item.id);\r\n    }\r\n    userSession.signUserOut();\r\n    if (!userSession.isUserSignedIn()) {\r\n      globalsObject.state = \"signedOut\";\r\n      console.log(\"signed out\");\r\n    }\r\n    createStartPage();\r\n  });\r\n\r\n  //html elements appended as follows:\r\n  const div = document.getElementById(\"navDiv\");\r\n  div.appendChild(btnSignOut);\r\n  div.appendChild(divBal);\r\n\r\n  //fill page\r\n  createListHeader();\r\n}\r\n","import { showConnect } from \"@stacks/connect\";\r\nimport { userSession } from \"./userSession\";\r\nimport { globalsObject, createStartPage } from \"./script.js\";\r\n\r\nexport function connectWallet(callback) {\r\n  const appDetails = {\r\n    name: \"ProjectRoundTable\", // shown in wallet pop-up\r\n    icon: \"./my_logo.png\",\r\n  };\r\n\r\n  showConnect({\r\n    userSession, // `userSession` from previous step, to access storage\r\n    appDetails,\r\n    onFinish: () => {\r\n      console.log(\"connected\"); // WHEN user confirms pop-up\r\n            \r\n      const userData = userSession.loadUserData();\r\n      //console.log(userData);\r\n      //console.log(`userStxAddress: ${userStxAddress}`);\r\n      //console.log(\"key: \" + userData.appPrivateKey);\r\n  \r\n      globalsObject.userStxAddress = userData.profile.stxAddress.testnet;\r\n      globalsObject.state = \"loggedIn\";\r\n\r\n      console.log(globalsObject.state);\r\n\r\n      callback();\r\n    },\r\n    onCancel: () => {\r\n      console.log(\"Connecting cancelled by user\"); // WHEN user cancels/closes pop-up\r\n      createStartPage();\r\n    },\r\n  });\r\n}\r\n"],"names":["$cbda22e8d8510033$export$9c2227c6799d813","ChainID","$cbda22e8d8510033$export$e3faf9c0bcc1259","TransactionVersion","$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","$ae1eba19071ebe35$var$createSigningInput","payload","header","tokenParts","encodedHeader","$791Yx","encode","JSON","stringify","push","encodedPayload","join","module","exports","createUnsecuredToken","typ","alg","TokenSigner","constructor","signingAlgorithm","rawPrivateKey","$6E2Fs","MissingParametersError","toUpperCase","$dLPMj","cryptoClients","hasOwnProperty","this","tokenType","cryptoClient","defaultHeader","algorithmName","assign","sign","expanded","customHeader","signingInput","signingInputHash","$ibZ5g","hashSha256","createWithSignedHash","signAsync","hashSha256Async","signature","signHash","$533ae7ecd1a01aaa$var$pad","base64","repeat","$533ae7ecd1a01aaa$var$escape","replace","$533ae7ecd1a01aaa$var$unescape","base64Url","pad","escape","unescape","$kuxul","fromByteArray","TextEncoder","decode","TextDecoder","toByteArray","$eeb0961446aae8e3$export$d622b2ad8d90c771","$eeb0961446aae8e3$export$6100ba28696e12de","b64","tmp","lens","$eeb0961446aae8e3$var$getLens","validLen","placeHoldersLen","arr","$eeb0961446aae8e3$var$Arr","$eeb0961446aae8e3$var$_byteLength","curByte","len","$eeb0961446aae8e3$var$revLookup","charCodeAt","uint8","extraBytes","parts","maxChunkLength","len2","$eeb0961446aae8e3$var$encodeChunk","$eeb0961446aae8e3$var$lookup","Uint8Array","Array","$eeb0961446aae8e3$var$code","$eeb0961446aae8e3$var$i","indexOf","start","end","num","output","defineProperty","enumerable","get","$euNvR","SECP256K1Client","$a067d43d9276ba57$var$cryptoClients","ES256K","$7Rh2L","utils","hmacSha256Sync","key","msgs","h","$70Xw9","hmac","create","$6XnWx","sha256","forEach","msg","update","digest","$a8da4641e286175c$var$SECP256K1Client","static","privateKey","compressed","slice","padStart","$3Bcdj","bytesToHex","getPublicKey","format","derSignature","signSync","der","canonical","$hPszO","derToJose","joseSignature","joseToDer","derSignatureBytes","publicKey","verify","strict","value","$51b6b372898f65c0$var$HMAC","Hash","hash","_key","super","finished","destroyed","$dNiq9","default","toBytes","iHash","TypeError","blockLen","outputLen","set","oHash","fill","buf","exists","digestInto","out","bytes","destroy","_cloneInto","to","getPrototypeOf","message","$a0ae23f5901291b4$var$number","n","Number","isSafeInteger","$a0ae23f5901291b4$var$bool","b","$a0ae23f5901291b4$var$bytes","lengths","includes","$a0ae23f5901291b4$var$hash","$a0ae23f5901291b4$var$exists","instance","checkFinished","$a0ae23f5901291b4$var$output","min","bool","number","$a0ae23f5901291b4$var$assert","randomBytes","wrapConstructorWithOpts","wrapConstructor","checkOpts","concatBytes","utf8ToBytes","asyncLoop","nextTick","hexToBytes","isLE","rotr","createView","u32","u8","buffer","byteOffset","byteLength","Uint32Array","Math","floor","DataView","word","shift","$29ee4d3171d9809b$var$hexes","from","v","toString","uint8a","hex","array","j","hexByte","byte","parseInt","isNaN","$29ee4d3171d9809b$var$utf8ToBytes","str","$29ee4d3171d9809b$var$toBytes","data","async","iters","tick","cb","ts","Date","now","diff","arrays","every","a","reduce","result","clone","defaults","opts","undefined","obj","prototype","call","hashConstructor","hashC","hashCons","bytesLength","$2LMAo","crypto","web","getRandomValues","node","self","sha224","$510ad3657d73a9d2$var$Maj","c","$510ad3657d73a9d2$var$SHA256_K","$510ad3657d73a9d2$var$IV","$510ad3657d73a9d2$var$SHA256_W","$510ad3657d73a9d2$var$SHA256","$g9W9K","SHA2","A","B","C","D","E","F","G","H","process","view","offset","getUint32","W15","W2","s0","s1","T1","T2","roundClean","$510ad3657d73a9d2$var$SHA224","$bc3a993d7d38a7a0$var$SHA2","padOffset","pos","take","subarray","dataView","setBigUint64","_32n","BigInt","_u32_max","wh","wl","l","setUint32","$bc3a993d7d38a7a0$var$setBigUint64","oview","outLen","state","res","$kjyEk","parcelRequire","$5b8ab42334210395$var$_0n","$5b8ab42334210395$var$_1n","$5b8ab42334210395$var$_2n","$5b8ab42334210395$var$_3n","$5b8ab42334210395$var$_8n","$5b8ab42334210395$export$8ff8607b70325343","freeze","P","Gx","Gy","beta","$5b8ab42334210395$var$divNearest","$5b8ab42334210395$var$endo","splitScalar","k","a1","b1","a2","b2","POW_2_128","c1","c2","k1","$5b8ab42334210395$var$mod","k2","k1neg","k2neg","$5b8ab42334210395$var$fieldLen","$5b8ab42334210395$var$groupLen","$5b8ab42334210395$var$hashLen","$5b8ab42334210395$var$compressedLen","$5b8ab42334210395$var$uncompressedLen","$5b8ab42334210395$var$weierstrass","x","x2","x3","$5b8ab42334210395$var$USE_ENDOMORPHISM","$5b8ab42334210395$var$ShaError","$5b8ab42334210395$var$assertJacPoint","other","$5b8ab42334210395$var$JacobianPoint","y","z","p","$5b8ab42334210395$export$baf26146a414f24a","equals","ZERO","points","toInv","nums","scratch","inverted","$5b8ab42334210395$var$invert","acc","reduceRight","$5b8ab42334210395$var$invertBatch","map","toAffine","toAffineBatch","fromAffine","X1","Y1","Z1","X2","Y2","Z2","Z1Z1","Z2Z2","U1","U2","S1","S2","negate","double","x1b","X3","Y3","Z3","add","r","HH","HHH","V","subtract","multiplyUnsafe","scalar","P0","$5b8ab42334210395$var$normalizeScalar","d","k1p","k2p","precomputeWindow","W","windows","base","window","wNAF","affinePoint","BASE","_WINDOW_SIZE","precomputes","$5b8ab42334210395$var$pointPrecomputes","normalizeZ","f","windowSize","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","$5b8ab42334210395$var$constTimeNegate","multiply","point","fake","f1p","f2p","invZ","is0","iz1","iz2","iz3","ax","ay","zz","condition","item","neg","WeakMap","_setWindowSize","delete","hasEvenY","isShort","$5b8ab42334210395$var$bytesToNumber","$5b8ab42334210395$var$isValidFieldElement","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","$5b8ab42334210395$var$pow2","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","rt","$5b8ab42334210395$var$sqrtMod","isYOdd","assertValidity","$5b8ab42334210395$var$ensureBytes","fromCompressedHex","fromUncompressedHex","$5b8ab42334210395$var$normalizePrivateKey","msgHash","recovery","s","$5b8ab42334210395$var$normalizeSignature","$5b8ab42334210395$var$truncateHash","radj","rinv","u1","u2","prefix","R","fromHex","$5b8ab42334210395$var$numTo32bStr","Q","multiplyAndAddUnsafe","toRawBytes","isCompressed","$5b8ab42334210395$var$hexToBytes","toHex","toHexX","toRawX","left","aP","bQ","sum","$5b8ab42334210395$var$sliceDER","$5b8ab42334210395$var$parseDERInt","$5b8ab42334210395$var$bytesToHex","$5b8ab42334210395$export$848620f5f2f26e86","name","$5b8ab42334210395$var$hexToNumber","sBytes","rBytesLeft","$5b8ab42334210395$var$parseDERSignature","fromDER","$5b8ab42334210395$var$isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","$5b8ab42334210395$var$numberToHexUnpadded","rHex","sHexL","rHexL","sLen","rLen","toCompactRawBytes","toCompactHex","$5b8ab42334210395$var$concatBytes","$5b8ab42334210395$var$hexes","$5b8ab42334210395$var$POW_2_256","$5b8ab42334210395$var$numTo32b","power","modulo","u","q","m","truncateOnly","delta","$5b8ab42334210395$var$bits2int_2","$5b8ab42334210395$var$_sha256Sync","$5b8ab42334210395$var$_hmacSha256Sync","$5b8ab42334210395$var$HmacDrbg","hashLen","qByteLen","counter","values","$5b8ab42334210395$export$eab97d15b1788b8d","hmacSha256","hmacSync","checkSync","incr","seed","reseedSync","sl","generateSync","$5b8ab42334210395$var$kmdToSig","kBytes","lowS","kinv","sig","$5b8ab42334210395$var$normalizePublicKey","error","fromCompact","$5b8ab42334210395$export$889def73691f9837","fromPrivateKey","$5b8ab42334210395$var$isProbPub","$5b8ab42334210395$export$151f26f9d84a2c64","privateA","publicB","$5b8ab42334210395$var$bits2int","$5b8ab42334210395$var$bits2octets","z1","z2","$5b8ab42334210395$var$int2octets","$5b8ab42334210395$var$initSigArgs","extraEntropy","h1","seedArgs","e","$5b8ab42334210395$var$finalizeSig","recSig","recovered","hashed","$5b8ab42334210395$export$6ff6692656050317","privKey","drbg","$5b8ab42334210395$var$vopts","$5b8ab42334210395$export$532244b5b8b0b4b6","sinv","$5b8ab42334210395$var$crypto","$5b8ab42334210395$var$TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","minLen","randomPrivateKey","precompute","cached","messages","subtle","createHash","ckey","importKey","createHmac","sha256Sync","taggedHash","tag","tagP","tagH","taggedHashSync","_JacobianPoint","defineProperties","configurable","val","$cfad5dc979c8c4b2$var$getParamSize","keySize","$cfad5dc979c8c4b2$var$paramBytesForAlg","ES256","ES384","ES512","$cfad5dc979c8c4b2$var$getParamBytesForAlg","paramBytes","$cfad5dc979c8c4b2$var$MAX_OCTET","$cfad5dc979c8c4b2$var$ENCODED_TAG_SEQ","$cfad5dc979c8c4b2$var$TAG_SEQ","$cfad5dc979c8c4b2$var$ENCODED_TAG_INT","$cfad5dc979c8c4b2$var$TAG_INT","$cfad5dc979c8c4b2$var$signatureAsBytes","$cfad5dc979c8c4b2$var$countPadding","stop","padding","signatureBytes","maxEncodedParamLength","inputLength","seqLength","rLength","rOffset","sLength","sOffset","rPadding","sPadding","dst","max","o","rsBytes","shortLength","$4d688c445e2fab25$var$MissingParametersError","$4d688c445e2fab25$var$InvalidTokenError","InvalidTokenError","$d3e8a3118f71842b$var$hashSha256","input","nodeCrypto","Promise","resolve","console","log","TokenVerifier","rawPublicKey","token","verifyCompact","verifyExpanded","verifyAsync","split","performVerify","loadSignature","verifyHash","then","verified","decodeToken","parse","allHeaders","headerValue","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","$parcel$global","freeSelf","root","Function","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","index","isHostObject","mapToArray","size","overArg","func","transform","arg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","Buffer","Symbol","getPrototype","objectCreate","propertyIsEnumerable","splice","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","getNative","Map","Set","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","entries","clear","entry","ListCache","MapCache","Stack","__data__","arrayLikeKeys","inherited","isArray","isObjectLike","isArrayLike","isArrayLikeObject","isArguments","baseTimes","String","skipIndexes","isIndex","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","stack","isObject","isArr","initCloneArray","source","copyArray","getTag","isFunc","copy","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","Ctor","cloneArrayBuffer","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","symbol","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","baseIsNative","isFunction","test","arrayBuffer","newValue","getMapData","type","getValue","has","pop","string","cache","LARGE_ARRAY_SIZE","ArrayBuffer","ctorString","isLength","baseKeys","import","$5cee906e2e606b16$var$scopeId","$5cee906e2e606b16$var$hostTagName","$5cee906e2e606b16$var$queuePending","$5cee906e2e606b16$var$EMPTY_OBJ","$5cee906e2e606b16$var$isComplexType","$5cee906e2e606b16$var$queryNonceMetaTagContent","doc","_a","_b","_c","head","querySelector","getAttribute","$5cee906e2e606b16$export$dda1d9f60106f0e9","nodeName","vnodeData","children","child","simple","lastSimple","vNodeChildren","walk","$text$","$5cee906e2e606b16$var$newVNode","classData","className","class","filter","vnode","$attrs$","$children$","text","$flags$","$tag$","$elm$","$5cee906e2e606b16$var$Host","$5cee906e2e606b16$export$39b482c5e57630a8","ref","$5cee906e2e606b16$var$getHostRef","$hostElement$","$5cee906e2e606b16$var$rootAppliedStyles","$5cee906e2e606b16$var$attachStyles","hostRef","cmpMeta","$cmpMeta$","elm","flags","endAttachStyles","$tagName$","scopeId","styleContainerNode","mode","hostElm","$5cee906e2e606b16$var$getScopeId","style","$5cee906e2e606b16$var$styles","$5cee906e2e606b16$var$doc","styleElm","appliedStyles","createElement","innerHTML","nonce","$5cee906e2e606b16$var$plt","$nonce$","setAttribute","insertBefore","adoptedStyleSheets","$5cee906e2e606b16$var$addStyle","shadowRoot","getRootNode","classList","cmp","$5cee906e2e606b16$var$setAccessor","memberName","oldValue","isSvg","isProp","$5cee906e2e606b16$var$isMemberInElement","ln","toLowerCase","oldClasses","$5cee906e2e606b16$var$parseClassList","newClasses","remove","isComplex","tagName","removeAttribute","$5cee906e2e606b16$var$win","rel","ael","$5cee906e2e606b16$var$parseClassListRegex","$5cee906e2e606b16$var$updateElement","oldVnode","newVnode","isSvgMode","host","oldVnodeAttrs","newVnodeAttrs","$5cee906e2e606b16$var$createElm","oldParentVNode","newParentVNode","childIndex","parentElm","newVNode","childNode","createTextNode","appendChild","$5cee906e2e606b16$var$addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","$5cee906e2e606b16$var$removeVnodes","$5cee906e2e606b16$var$isSameVnode","leftVNode","rightVNode","$5cee906e2e606b16$var$patch","oldVNode","oldChildren","newChildren","oldCh","newCh","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","nextSibling","parentNode","$5cee906e2e606b16$var$updateChildren","textContent","$5cee906e2e606b16$var$renderVdom","renderFnResults","$vnode$","rootVnode","$5cee906e2e606b16$var$attachToAncestor","ancestorComponent","$onRenderResolve$","$5cee906e2e606b16$var$scheduleUpdate","isInitialLoad","$ancestorComponent$","$5cee906e2e606b16$var$writeTask","$5cee906e2e606b16$var$dispatchHooks","endSchedule","$lazyInstance$","$5cee906e2e606b16$var$then","promise","$5cee906e2e606b16$var$updateComponent","endUpdate","rc","endRender","$5cee906e2e606b16$var$callRender","childrenPromises","postUpdate","$5cee906e2e606b16$var$postUpdateComponent","all","render","$5cee906e2e606b16$var$consoleError","endPostUpdate","$5cee906e2e606b16$var$addHydratedFlag","$onReadyResolve$","$5cee906e2e606b16$var$appDidLoad","$5cee906e2e606b16$var$nextTick","who","documentElement","ev","ce","dispatchEvent","$5cee906e2e606b16$var$emitEvent","detail","namespace","thenFn","$5cee906e2e606b16$var$setValue","propName","newVal","oldVal","$instanceValues$","propValue","areBothNaN","$5cee906e2e606b16$var$proxyComponent","Cstr","$members$","members","memberFlags","$5cee906e2e606b16$var$initializeComponent","hmrVersionId","$5cee906e2e606b16$var$loadModule","endLoad","isProxied","endNewInstance","endRegisterStyles","cssText","allowCS","$5cee906e2e606b16$var$supportsConstructableStylesheets","CSSStyleSheet","replaceSync","$5cee906e2e606b16$var$registerStyle","schedule","$5cee906e2e606b16$export$8b22cf2602fb60ce","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","$resourcesUrl$","URL","resourcesUrl","baseURI","href","lazyBundle","compactMeta","$listeners$","HostElement","HTMLElement","$5cee906e2e606b16$var$registerHost","attachShadow","connectedCallback","clearTimeout","jmp","endConnected","$5cee906e2e606b16$var$connectedCallback","disconnectedCallback","$5cee906e2e606b16$var$disconnectedCallback","componentOnReady","$onReadyPromise$","$lazyBundleId$","define","firstChild","setTimeout","$5cee906e2e606b16$var$hostRefs","$5cee906e2e606b16$export$43caf9889c228507","lazyInstance","el","$5cee906e2e606b16$var$cmpModules","exportName","bundleId","BUILD","hotModuleReplacement","processMod","importedModule","document","raf","requestAnimationFrame","eventName","listener","addEventListener","removeEventListener","CustomEvent","$5cee906e2e606b16$export$ffb5f4729a158638","$5cee906e2e606b16$var$queueDomReads","$5cee906e2e606b16$var$queueDomWrites","$5cee906e2e606b16$var$queueTask","queue","write","$5cee906e2e606b16$var$flush","$5cee906e2e606b16$var$consume","performance","register","$cbda22e8d8510033$export$20112419a583a30e","self1","support","searchParams","iterable","blob","Blob","formData","viewClasses","isArrayBufferView","isView","normalizeName","normalizeValue","iteratorFor","items","iterator","next","done","Headers","headers","append","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","FileReader","readAsArrayBuffer","bufferClone","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","rejected","readAsText","chars","fromCharCode","readArrayBufferAsText","json","callback","thisArg","methods","Request","method","upcased","url","credentials","signal","referrer","form","trim","decodeURIComponent","Response","bodyInit","status","ok","statusText","response","redirectStatuses","redirect","RangeError","location","DOMException","err","fetch","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","rawHeaders","getAllResponseHeaders","line","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","onreadystatechange","readyState","send","polyfill","$81fa6bc99ca3df1d$var$defaultFetchOpts","referrerPolicy","$81fa6bc99ca3df1d$export$482ff399fd242da7","fetchOpts","$81fa6bc99ca3df1d$export$35ffadd870723b4c","args","fetchLib","middlewares","$81fa6bc99ca3df1d$var$argsForCreateFetchFn","fetchParams","middleware","pre","post","$bbc7ef472c1a76cf$export$5919cfb8ef366167","$bbc7ef472c1a76cf$export$172bd5632e695401","networkConfig","version","Mainnet","chainId","bnsLookupUrl","broadcastEndpoint","transferFeeEstimateEndpoint","transactionFeeEstimateEndpoint","accountEndpoint","contractAbiEndpoint","readOnlyFunctionCallEndpoint","isMainnet","getBroadcastApiUrl","coreApiUrl","getTransferFeeEstimateApiUrl","getTransactionFeeEstimateApiUrl","getAccountApiUrl","address","getAccountExtendedBalancesApiUrl","getAbiApiUrl","contract","getReadOnlyFunctionCallApiUrl","contractAddress","contractName","functionName","encodeURIComponent","getInfoUrl","getBlockTimeInfoUrl","getPoxInfoUrl","getRewardsUrl","limit","getRewardsTotalUrl","getRewardHoldersUrl","getStackerInfoUrl","getDataVarUrl","dataVarName","getMapEntryUrl","mapName","fetchFn","getNameInfo","fullyQualifiedName","nameLookupURL","resp","nameInfo","fromName","networkName","$bbc7ef472c1a76cf$export$3912899d1a430049","$bbc7ef472c1a76cf$export$57eabb7f1a16a0c0","$bbc7ef472c1a76cf$export$b335513c1a077ecb","$bbc7ef472c1a76cf$export$127c347b8641272","fromNameOrNetwork","network","Testnet","$22cc99c697f9cb8a$export$e506a1d27d1eaa20","layer1","logLevel","$a8b39ebdf208df74$var$levels","$a8b39ebdf208df74$var$levelToInt","$a8b39ebdf208df74$var$intToLevel","level","$a8b39ebdf208df74$export$efa9a398d6368992","shouldLog","logMessage","warn","$04507d9ebd1f965b$export$387da49966d7e375","setMonth","getMonth","$04507d9ebd1f965b$export$222de567847e9926","setHours","getHours","$04507d9ebd1f965b$export$b2dafef925942955","v1","v2","v1tuple","v2tuple","$04507d9ebd1f965b$export$d5f936d4f4f69b03","getTime","random","$04507d9ebd1f965b$export$aa55d5ab8e05984f","$04507d9ebd1f965b$var$getAPIUsageErrorMessage","scopeObject","apiName","usageDesc","$04507d9ebd1f965b$export$256479dc0cea61c4","throwIfUnavailable","returnEmptyObject","globalScope","errMsg","$04507d9ebd1f965b$export$7f883c9b3dcb5103","signed","$04507d9ebd1f965b$export$c0f6630717bc20c7","$04507d9ebd1f965b$export$4c617117d99b73f","parsedValue","isInteger","startsWith","$04507d9ebd1f965b$export$31c96b9df38bc8d4","SyntaxError","bn","width","$04507d9ebd1f965b$var$nthBit","$04507d9ebd1f965b$export$92182edcfa20e5bc","$04507d9ebd1f965b$export$58b867e287a802c8","$04507d9ebd1f965b$export$92a44656ec81b584","$04507d9ebd1f965b$export$4f46a9d88f410b45","integer","lengthBytes","$04507d9ebd1f965b$export$ec43ae5519403643","$04507d9ebd1f965b$export$7101cd4e6275351c","$04507d9ebd1f965b$var$hexes","_","paddedHex","$04507d9ebd1f965b$export$3df70a15530b5e81","$04507d9ebd1f965b$export$5f46301b4a1d43db","$04507d9ebd1f965b$export$e151636497a65339","byteArray","$04507d9ebd1f965b$export$59bf225c238d31ed","apply","$04507d9ebd1f965b$var$isNotOctet","octet","$04507d9ebd1f965b$export$39adde141343feb5","numbers","some","$04507d9ebd1f965b$export$287dd7971339c972","$04507d9ebd1f965b$export$4fd8af2c48c43416","elements","$1c36addc111ead14$export$c29ad08aa332a964","$1c36addc111ead14$export$a3cb48935a08bcd3","$020daddb1023d507$export$d67e1898834e3885","scopes","appDomain","origin","redirectPath","manifestPath","coreNode","authenticatorURL","redirectURI","manifestURI","$9d9f197f9c41a718$export$28ba0a5263dd89b0","MISSING_PARAMETER","REMOTE_SERVICE_ERROR","INVALID_STATE","NO_SESSION_DATA","DOES_NOT_EXIST","FAILED_DECRYPTION_ERROR","INVALID_DID_ERROR","NOT_ENOUGH_FUNDS_ERROR","INVALID_AMOUNT_ERROR","LOGIN_FAILED_ERROR","SIGNATURE_VERIFICATION_ERROR","CONFLICT_ERROR","NOT_ENOUGH_PROOF_ERROR","BAD_PATH_ERROR","VALIDATION_ERROR","PAYLOAD_TOO_LARGE_ERROR","PRECONDITION_FAILED_ERROR","UNKNOWN","$9d9f197f9c41a718$export$d52f61b0bbb28d3a","bugDetails","code","parameter","$9d9f197f9c41a718$export$d55c3ffa4ce1bcb3","$9d9f197f9c41a718$export$9e45a1286b60eaea","$9d9f197f9c41a718$export$d6294529675c0c87","reason","$9d9f197f9c41a718$export$f98131c354a7f2cc","$9d9f197f9c41a718$export$b251fc1661a3152d","$9d9f197f9c41a718$export$1a382e17526d26dc","$9a8992fe89048b32$var$SESSION_VERSION","$9a8992fe89048b32$export$14dde3d2ec7dfd8f","userData","transitKey","etags","$5aaf410aac6a2643$export$76880adf2d429b4b","sessionOptions","newSessionData","setSessionData","getSessionData","_session","deleteSessionData","$5aaf410aac6a2643$export$40e3bb3fe998aa73","sessionData","session","$5aaf410aac6a2643$export$ea89c7eea6336445","storeOptions","localStorageKey","localStorage","getItem","dataJSON","fromJSON","setItem","removeItem","$d46219890e3547db$var$__exportStar","$d46219890e3547db$exports","$6083f4d963d203c0$export$32674c298e921e40","privateKeyBuffer","$7ef97c018330f7ad$export$a91b4a1eede2f230","$7ef97c018330f7ad$export$a80c7deaea7cbd80","destination","$8b756b3b8ee97947$exports","$001e77b0dfd1bf3d$exports","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","pbegin","pend","b58","it1","it2","$de58877bbb165fd5$exports","ripemd160","RIPEMD160","$de58877bbb165fd5$var$Rho","$de58877bbb165fd5$var$Id","$de58877bbb165fd5$var$Pi","$de58877bbb165fd5$var$idxL","$de58877bbb165fd5$var$idxR","$de58877bbb165fd5$var$shifts","$de58877bbb165fd5$var$shiftsL","idx","$de58877bbb165fd5$var$shiftsR","$de58877bbb165fd5$var$Kl","$de58877bbb165fd5$var$Kr","$de58877bbb165fd5$var$rotl","$de58877bbb165fd5$var$f","group","$de58877bbb165fd5$var$BUF","$de58877bbb165fd5$var$RIPEMD160","h0","h2","h3","h4","al","ar","bl","br","cl","cr","dl","dr","er","rGroup","hbl","hbr","rl","rr","sr","tl","tr","$2579977b4e52adba$exports","sha384","sha512_256","sha512_224","sha512","SHA512","$aa71b30d36adb919$exports","toBig","fromBig","$aa71b30d36adb919$var$U32_MASK64","$aa71b30d36adb919$var$_32n","$aa71b30d36adb919$var$fromBig","le","$aa71b30d36adb919$var$split","lst","Ah","Al","$aa71b30d36adb919$var$add","Bh","Bl","$aa71b30d36adb919$var$u64","Cl","low","Ch","Dl","Dh","Eh","El","$2579977b4e52adba$var$SHA512_Kh","$2579977b4e52adba$var$SHA512_Kl","$2579977b4e52adba$var$SHA512_W_H","$2579977b4e52adba$var$SHA512_W_L","$2579977b4e52adba$var$SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","rotrSH","shrSH","s0l","rotrSL","shrSL","W2h","W2l","s1h","rotrBH","s1l","rotrBL","SUMl","add4L","SUMh","add4H","sigma1h","sigma1l","CHIh","CHIl","T1ll","add5L","T1h","add5H","T1l","sigma0h","sigma0l","MAJh","MAJl","All","add3L","add3H","$2579977b4e52adba$var$SHA512_224","$2579977b4e52adba$var$SHA512_256","$2579977b4e52adba$var$SHA384","$078af83015f0785f$export$580fb9198e27a4a1","$078af83015f0785f$export$6adb7da48f7dd3f6","lib","$8e1e3d2425e32bad$export$deb01efad1e1ff3","$8e1e3d2425e32bad$export$955e29e20520d75f","$d26f7e274c5ac97f$var$BITCOIN_PUBKEYHASH","$d26f7e274c5ac97f$export$2af4024631fabe25","checksum","$parcel$interopDefault","$d26f7e274c5ac97f$export$a025eb30fde2c140","$d26f7e274c5ac97f$export$674e9c98bfc50da9","publicKeyBytes","$d26f7e274c5ac97f$export$d3a452db993066c6","privateKeyBytes","$93d3c4eb538ea514$export$8da93c46442dbac9","$93d3c4eb538ea514$export$a2c1c14aa0a26853","decentralizedID","didType","didParts","$93d3c4eb538ea514$export$e2734925bbbceebc","$36582a2f26263e34$export$578c47e0c339a771","publicKeys","public_keys","$36582a2f26263e34$export$d157571e7bfc4384","addressFromIssuer","iss","$36582a2f26263e34$export$c7541fca08b9ecc4","iat","issuedAt","$36582a2f26263e34$export$edf8bd8a10d67fd0","exp","expiresAt","$36582a2f26263e34$export$b89d696b993efa1e","$ed8dfc69497b6314$var$COORDINATE_BYTES","$ed8dfc69497b6314$export$494143511e680374","recoveryIdHex","recoveryId","$117ca9e04109c271$export$6fce01b5ac4ea442","createCipher","createDecipher","algorithm","iv","cipher","final","$117ca9e04109c271$export$ea85d9b11e1b1128","subtleCrypto","algo","cryptoKey","encrypt","decrypt","$117ca9e04109c271$export$bdd223f16383713e","cryptoLib","createCipheriv","createDecipheriv","$83ef389f5146a0a6$export$2338598507df2d27","InvalidPublicKeyReason","$83ef389f5146a0a6$export$8cb906c207500861","content","$83ef389f5146a0a6$var$sharedSecretToKeys","sharedSecret","hashedSecret","encryptionKey","hmacKey","$83ef389f5146a0a6$export$560ba05b3509a48b","wasString","cipherTextEncoding","validity","pub","invalidFormat","reason_data","InvalidFormat","invalidPoint","IsNotPoint","firstByte","match","Point","$83ef389f5146a0a6$var$isValidPublicKey","ephemeralPrivateKey","ephemeralPublicKey","getSharedSecret","sharedKeys","initializationVector","cipherText","plaintext","$83ef389f5146a0a6$export$a6e4588aa782ece0","macData","mac","cipherTextString","ephemeralPK","$83ef389f5146a0a6$export$b7b97ae0a1f16bb0","cipherObject","ivBytes","cipherTextBytes","actualMac","$83ef389f5146a0a6$var$equalsConstTime","plainText","ciphertext","$83ef389f5146a0a6$var$aes256CbcDecrypt","$83ef389f5146a0a6$export$3a90c64852e6faa4","contentBytes","contentHash","$46ef43ec33502e6b$var$VERSION","$46ef43ec33502e6b$export$63315e105751552f","$46ef43ec33502e6b$export$135181924b9d45cb","transitPrivateKey","extraParams","getWindowOrigin","paramName","jti","domain_name","manifest_uri","redirect_uri","do_not_include_profile","supports_hub_url","derivePublicKey","$46ef43ec33502e6b$export$c97f585acdba2853","hexedEncrypted","unhexedString","encryptedObj","decrypted","$ce42700cd0268274$export$f7e3284783ba406","cipherPayload","signatureObject","signedCipherObject","$ce42700cd0268274$export$5d2baf1126c0485e","$a8865a1d622f918c$exports","b58ToC32","c32ToB58","versions","c32normalize","c32addressDecode","c32address","c32checkDecode","c32checkEncode","c32decode","c32encode","$966bfb207ba29f55$exports","c32","$966bfb207ba29f55$var$hex","$966bfb207ba29f55$var$c32normalize","c32input","inputHex","minLength","currentCode","nextCode","nextBits","nextLowBits","curC32Digit","unshift","C32leadingZeros","zeroPrefix","numLeadingZeroBytesInHex","count","numLeadingZeroBytes","carryBits","currentValue","currentHexDigit","hexLeadingZeros","hexStr","$81a7ec922b5a21a0$exports","$81a7ec922b5a21a0$var$c32checksum","dataHex","dataHash","versionHex","checksumHex","c32str","c32data","versionChar","substring","$8cdb66f88edc8065$exports","$42b69d5793696c44$exports","$42b69d5793696c44$var$ALPHABET","dataBytes","prefixBytes","check","mainnet","p2pkh","p2sh","testnet","$8cdb66f88edc8065$var$ADDR_BITCOIN_TO_STACKS","$8cdb66f88edc8065$var$ADDR_STACKS_TO_BITCOIN","$8cdb66f88edc8065$var$c32address","hash160hex","$8cdb66f88edc8065$var$c32addressDecode","c32addr","$0bd37ea9ca225691$export$9c2227c6799d813","b58check","addrInfo","hash160String","addrVersion","stacksVersion","c32string","bitcoinVersion","$0bd37ea9ca225691$export$a2848f7c8bf44f79","$0bd37ea9ca225691$export$911713d24970c2bb","$0bd37ea9ca225691$export$76b92fe58cb30d96","$0bd37ea9ca225691$export$aacdb4bb8debdac3","$0bd37ea9ca225691$export$52095b8ab468b700","$0bd37ea9ca225691$export$3cfea7d29b5d839b","$0bd37ea9ca225691$export$3c026605e491b5f1","$0bd37ea9ca225691$export$76c1b176198fd88e","$0bd37ea9ca225691$export$bf24ba94f4f405b5","$0bd37ea9ca225691$export$1a295cfe82a619fe","StacksMessageType","$0bd37ea9ca225691$export$3a0d79760672f45c","PayloadType","$0bd37ea9ca225691$export$b882c4a9c88d475e","ClarityVersion","$0bd37ea9ca225691$export$559952f7f9a4552a","AnchorMode","$0bd37ea9ca225691$export$9b81e51e7b22b4d5","$0bd37ea9ca225691$var$AnchorModeMap","OnChainOnly","OffChainOnly","Any","$0bd37ea9ca225691$export$5a151ec6f77640b2","$0bd37ea9ca225691$export$e3faf9c0bcc1259","$0bd37ea9ca225691$export$ca832c3c49b15881","PostConditionMode","$0bd37ea9ca225691$export$45df0f2ec25e3b8d","PostConditionType","$0bd37ea9ca225691$export$e04cb10fd7e39267","AuthType","$0bd37ea9ca225691$export$fb8703667c9e9dfb","AddressHashMode","$0bd37ea9ca225691$export$ba3a8fa6e6bf8e42","AddressVersion","$0bd37ea9ca225691$export$40e41d1c6c119fdf","PubKeyEncoding","$0bd37ea9ca225691$export$edcc904f2349a7cc","FungibleConditionCode","$0bd37ea9ca225691$export$4b3ef2036809448a","NonFungibleConditionCode","$0bd37ea9ca225691$export$dc848e33f0fe1986","PostConditionPrincipalID","$0bd37ea9ca225691$export$e57062a38354425e","AssetType","$0bd37ea9ca225691$export$34dcf1073e0834f3","TxRejectedReason","$0933b02b31577272$export$a601481fd03c7845","MessageSignature","$0933b02b31577272$export$e90a93da6e9196c9","hashMode","txVersion","SerializeP2PKH","MainnetSingleSig","TestnetSingleSig","SerializeP2SH","SerializeP2WPKH","SerializeP2WSH","MainnetMultiSig","TestnetMultiSig","$0933b02b31577272$export$f7eff4111d830bb","Address","hash160","$0933b02b31577272$export$13e398dd474163dd","$46545f7edf759d2e$export$25d14d8409a9b1bd","ClarityType","$6b075ce79460c699$export$93cc1dbb871c9c3c","$6b075ce79460c699$export$b515a68c974747d3","$2adb27f862e10fc1$export$eacee6a37a67adcb","lengthPrefixBytes","maxLengthBytes","prefixLength","maxLength","$d3eb479bd0edac87$export$3bed7deb0e19a366","LengthPrefixedString","$2adb27f862e10fc1$export$1cf57537d18bdefc","c32AddressString","addressData","$2adb27f862e10fc1$export$fdd88e8fdb3f5104","principalString","$2adb27f862e10fc1$export$e81c88b1b60e23c6","$2adb27f862e10fc1$export$21e34a2087de479","addressString","addr","Principal","Contract","Standard","$f9f5fbab09c57066$export$1d449655fafdf26c","principal","$f9f5fbab09c57066$export$4dd41ef56f43569","$f9f5fbab09c57066$export$892e1b187e66fd5e","PrincipalStandard","$f9f5fbab09c57066$export$38b3c9804a5e710a","PrincipalContract","$af560d15fe349601$export$dd4a3c6ee34ee063","BoolTrue","$af560d15fe349601$export$2cf8352a2232c296","BoolFalse","$3c794740b8fd9691$var$MAX_U128","$3c794740b8fd9691$var$MIN_U128","$3c794740b8fd9691$var$MAX_I128","$3c794740b8fd9691$var$MIN_I128","$3c794740b8fd9691$export$815805b02ebbdd99","bigInt","Int","$3c794740b8fd9691$export$d2ecde31112934b7","UInt","$378745134872dbc8$export$bbc421cfdf42de80","OptionalNone","$378745134872dbc8$export$4b94ec6bdf93a428","OptionalSome","$34205ba8da38b9ec$export$a489c0aa8b6f2f5f","ResponseErr","$7811388586b181a0$export$23ebb23c420d0c42","$d3eb479bd0edac87$export$64f41b5610cb58d1","Tuple","$f1eb7944966cadb5$var$enumCheckFunctions","$f1eb7944966cadb5$export$9fc8c979231a883","enumVariable","checker","newChecker","enumValues","enumValueSet","$f1eb7944966cadb5$var$createEnumChecker","$f1eb7944966cadb5$export$db218befe941a406","readBytes","readUInt32BE","readUInt8","readUInt16BE","readBigUIntLE","reverse","readBigUIntBE","readOffset","internalBytes","readUInt8Enum","invalidEnumErrorFormatter","$e4b460a9029b725e$var$TransactionError","captureStackTrace","$e4b460a9029b725e$export$e830e9e06ec7261d","$e4b460a9029b725e$export$e711248598da7854","$e4b460a9029b725e$export$65d88bb9788e221d","$e4b460a9029b725e$export$bba808db88f96979","$d7324c61831aa53c$var$bytesWithTypeID","typeId","$d7324c61831aa53c$var$serializeIntCV","cv","$d7324c61831aa53c$var$serializeStringCV","encoding","bytesArray","$d7324c61831aa53c$export$166a670116cbd5d6","$d7324c61831aa53c$var$serializeBoolCV","$d7324c61831aa53c$var$serializeBufferCV","$d7324c61831aa53c$var$serializeUIntCV","$ded8d08627b41789$export$c3e07d471c0c5048","$d7324c61831aa53c$var$serializeStandardPrincipalCV","$ded8d08627b41789$export$9de8a718e7a860af","$d7324c61831aa53c$var$serializeContractPrincipalCV","ResponseOk","$d7324c61831aa53c$var$serializeResponseCV","List","list","serializedValue","$d7324c61831aa53c$var$serializeListCV","lexicographicOrder","sort","localeCompare","nameWithLength","$d7324c61831aa53c$var$serializeTupleCV","StringASCII","$d7324c61831aa53c$var$serializeStringAsciiCV","StringUTF8","$d7324c61831aa53c$var$serializeStringUtf8CV","$e4b9c1ab3e25f3ec$export$75fa47e3f1fcb35","recipient","amount","memo","$ded8d08627b41789$export$37ef29647b97beba","Payload","payloadType","TokenTransfer","$e4b9c1ab3e25f3ec$export$95a6e01cc9a7874e","functionArgs","ContractCall","$e4b9c1ab3e25f3ec$export$5998ee2c12d83aaf","codeBody","clarityVersion","VersionedSmartContract","SmartContract","$e4b9c1ab3e25f3ec$export$adc952adf24089dd","coinbaseBytes","altRecipient","CoinbaseToAltRecipient","Coinbase","$e4b9c1ab3e25f3ec$export$44b4521aa38272f2","$ded8d08627b41789$export$49cd3f1975cd71fa","numArgs","PoisonMicroblock","$e4b9c1ab3e25f3ec$export$706ea24b0964bee9","bytesReader","$5c8d9c4042da9f0f$export$2e2bcd8739ae039","$ded8d08627b41789$export$3195edf5574c2d2a","$ded8d08627b41789$export$76530b88485d8750","contractCallName","$ded8d08627b41789$export$8a0a9dc2e895b356","numberOfArgs","clarityValue","$9118de79b5b60d70$export$8cfe159a21c0e48d","AuthFieldType","$9118de79b5b60d70$export$d87f78f43670893","$9118de79b5b60d70$export$d11770a3786f2ea3","pubKeyEncoding","contents","TransactionAuthField","$9118de79b5b60d70$export$4093aa704f882a25","authFieldType","PublicKeyCompressed","Compressed","$f747e602b3422a46$export$42def267ce6cbd48","PublicKeyUncompressed","Uncompressed","SignatureCompressed","SignatureUncompressed","$9118de79b5b60d70$export$8a073ad7e8a50118","messageSignature","$9118de79b5b60d70$export$aef5950ae3389db1","field","PublicKey","$f747e602b3422a46$export$49262cfcfa35f741","$f747e602b3422a46$export$a490116043767aa7","$ded8d08627b41789$export$583e883e4c5b2935","MemoString","memoString","paddedContent","$d3eb479bd0edac87$export$aabad910bfc07daa","$ded8d08627b41789$export$77d1f73aa89f061a","AssetInfo","$ded8d08627b41789$export$43d1474169b1590a","PostCondition","$ded8d08627b41789$export$e70106e90c668cb3","LengthPrefixedList","$ded8d08627b41789$export$1c2b4d990e4ada3a","$ded8d08627b41789$export$d711d536fb9ff65c","numSigs","$f747e602b3422a46$export$5f53d3d563a4cef6","$d3eb479bd0edac87$export$b68d9528748ade96","$d3eb479bd0edac87$export$cdd45fe0c2b7a30e","$d3eb479bd0edac87$export$e7373aa85d0423f0","$d3eb479bd0edac87$export$cd69db8448b810d3","$ded8d08627b41789$export$9b6843f275bbba95","lps","info","assetName","$ded8d08627b41789$export$1f835bfdafcb402a","$ded8d08627b41789$export$664bc72c94094721","lpList","$ded8d08627b41789$export$2f706e35d2b87864","$ded8d08627b41789$export$f29c5d8399b8b9b4","postCondition","conditionType","Fungible","NonFungible","assetInfo","conditionCode","STX","postConditionType","$75021764ce92ad48$export$8efd001a4f77ccd1","$75021764ce92ad48$export$d02e8831c9e23451","serializedClarityValue","hasHexPrefix","bufferLength","sAddress","listLength","listContents","tupleLength","tupleContents","clarityName","asciiStrLen","asciiStr","utf8StrLen","utf8Str","$d3eb479bd0edac87$export$5232f5461a684c50","hexString","padEnd","$d3eb479bd0edac87$export$629a2bd3f5a49ecc","$lnboJ","$d3eb479bd0edac87$export$ba216759fc63ac6","$d3eb479bd0edac87$export$ab79aa8286712108","keyHash","redeemScript","pubKeys","pubKey","scriptArray","script","$d3eb479bd0edac87$export$e0f04bb38181daca","okay","cause","$f747e602b3422a46$export$a28ea21350b9dd16","transactionVersion","$f747e602b3422a46$export$8cca13103cd480ff","$f747e602b3422a46$export$8494a510e7f5c94e","messageHash","parsedSignature","Signature","fromSignature","$f747e602b3422a46$export$dc39c16264470caf","$f747e602b3422a46$export$6c674e32392741b0","$f747e602b3422a46$export$e01fc158fab33a8f","fieldId","keyLength","$f747e602b3422a46$export$a0e90d3556691f3e","rawSignature","$f747e602b3422a46$export$889def73691f9837","$61e4ae5d7b2e1ddd$export$d503ed335a4c0734","publicKeyOrAddress","decodedToken","subject","issuer","issuerPublicKey","tokenVerifier","$61e4ae5d7b2e1ddd$export$506faf1243b664aa","profile","claim","$43f42dbe99681032$var$GLOBAL_DETECTION_CACHE_KEY","$43f42dbe99681032$export$1814a74a9ccdbd7b","existingDetection","query","search","params","param","echoReplyParam","echoReplyKey","authContinuationParam","$419d08753480d2db$export$b812e6da33808cc6","runningInBrowser","appConfig","sessionStore","store","makeAuthRequestToken","generateAndStoreTransitKey","getAuthResponseToken","isSignInPending","isUserSignedIn","authResponseToken","tokenPayload","appPrivateKey","private_key","coreSessionToken","core_token","gaiaAssociationToken","hubUrl","associationToken","email","identityAddress","appPrivateKeyFromWalletSalt","blockstackAPIUrl","profileURL","profile_url","wrappedProfile","loadUserData","encryptContent","decryptContent","signUserOut","redirectURL","$952b8f2a697cf3e6$export$8e709d6384ddfdcd","$952b8f2a697cf3e6$export$7bef3121de59e41a","fee","signer","keyEncoding","$952b8f2a697cf3e6$export$56095ef9f39e0b98","$952b8f2a697cf3e6$var$clearCondition","cloned","fields","$952b8f2a697cf3e6$export$f61b1950e97e0f2e","$952b8f2a697cf3e6$export$cb94608c89ae0eaf","signaturesRequired","$952b8f2a697cf3e6$export$5dac2f833cbbf83d","$952b8f2a697cf3e6$export$6c859934ff979671","$952b8f2a697cf3e6$export$5b9cc537816e30fb","haveUncompressed","$952b8f2a697cf3e6$export$8c6c84f3fa516cb9","$952b8f2a697cf3e6$export$8c31c57a9ca8e871","curSigHash","authType","sigHash","$952b8f2a697cf3e6$var$makeSigHashPostSign","hashLength","sigHashBytes","$952b8f2a697cf3e6$export$433dfe04e9870a53","sigHashPreSign","nextSig","$952b8f2a697cf3e6$export$eee9028cae8c8177","initialSigHash","$952b8f2a697cf3e6$var$newInitialSigHash","spendingCondition","$952b8f2a697cf3e6$var$verify","nextSigHash","addrBytes","$952b8f2a697cf3e6$var$verifySingleSig","foundPubKey","$952b8f2a697cf3e6$var$verifyMultiSig","$952b8f2a697cf3e6$export$cea0d5fbb38424bf","$952b8f2a697cf3e6$export$d7c4eb8dd71b624","sponsorSpendingCondition","Sponsored","$952b8f2a697cf3e6$export$482925636dc49ab1","auth","$952b8f2a697cf3e6$export$93a20ada3eb4c8de","$952b8f2a697cf3e6$export$545f6d45faab6639","$952b8f2a697cf3e6$export$c5f670b24c0ae95a","$952b8f2a697cf3e6$export$1015ed086ee5c9f","$952b8f2a697cf3e6$export$92c6fd528c1bb30","$952b8f2a697cf3e6$export$9f19b16a48d52e54","$952b8f2a697cf3e6$export$d90cd8748038be5b","makeAuthRequest","$16963b24fa9332e7$export$e34357c163d5f3ea","postConditions","postConditionMode","anchorMode","Deny","signBegin","tx","txid","verifyBegin","verifyOrigin","signNextOrigin","signAndAppend","signNextSponsor","appendPubkey","cond","endsWith","serialized","serialize","setSponsor","setFee","setNonce","setSponsorNonce","chainIdBytes","$16963b24fa9332e7$export$b8b582b25aa7be35","$7YFNV","$0d4551512a8db649$export$3c5e7827dfe4ae20","win","authOptions","hasOpenedInstall","hasOpenedInstallXverse","Reflect","construct","setPrototypeOf","$168c2832f30ff1a7$var$appConfig","$168c2832f30ff1a7$export$964abe9dcfc143e8","$f0dd36cdb1d24b6c$export$4173a482fd6ab34d","ClarityAbiTypeId","$3500e82292e68a91$export$1add4d1f79650ec3","$5fca3e68b728adc8$export$ca1808ac682810d4","$5fca3e68b728adc8$export$462eaba0ea3c2086","$5fca3e68b728adc8$export$4be6b7080eaee45d","readOnlyFunctionOptions","defaultOptions","senderAddress","sender","arguments","catch","responseJson","$469e26a6acaa79a4$export$e5a897c97bfef262","para0","labelProjectName","inputProjectName","para1","labelProjectDescr","inputProjectDescr","para2","labelProjectLink","inputProjectLink","para3","labelProjectGoal","inputProjectGoal","para4","labelProjectDuration","inputProjectDuration","para5","btnNewProject","btnHome","$469e26a6acaa79a4$export$f5fb65c61ff053b4","ipName","focus","ipDescr","ipLink","ipGoal","ipDuration","submitBtn","homeBtn","getElementById","event1","preventDefault","blockHeight","$f7195056dc934f0a$export$f9045ef5b76f55d6","$f7195056dc934f0a$export$70e94665dfb8b65e","$469e26a6acaa79a4$export$7ea7d061adbbae3b","$469e26a6acaa79a4$export$7feaa9fa162f5f20","projectId","labelInvestAmount","inputInvestAmount","btnInvestAmount","$469e26a6acaa79a4$export$ec9cacd44364dddd","ipAmount","event","$f7195056dc934f0a$export$4fa0adbee016d694","$469e26a6acaa79a4$export$aa7deb20f5576680","labelNftName","inputNftName","btnMintNft","$469e26a6acaa79a4$export$f6cc575fdabc96f0","nftName","$f7195056dc934f0a$export$b0f9aa9353cc8cd","$469e26a6acaa79a4$export$643716f3b2f2b5e9","nftId","projectList","labelNewUri","inputNewUri","btnUpdateUri","$469e26a6acaa79a4$export$20ea718ce688b4b5","newUri","$f7195056dc934f0a$export$56cd63cddb11ed1","$469e26a6acaa79a4$export$a1070b8f40f1bc2b","$469e26a6acaa79a4$export$4a5a9e9e8c230fe","projectNftId","para","disabled","btnDownloadNft","$c1ce9d969bfa6909$export$70821cad8ff0d78","userStxAddress","campaignOwner","deployerStxAddress","listPara","nftList","nft","target","filename","$f7195056dc934f0a$export$323ee3623ae13966","$469e26a6acaa79a4$var$createListItemPara","project","btnInvest","startsAt","endsAt","targetReached","claimed","alink","title","link","btnFund","pledgedAmount","btnGoal","fundGoal","btnNftMint","nftCounter","btnNftList","divDescr","description","$469e26a6acaa79a4$export$100fd81b9e6b72f5","pList","listDiv","paraList","projectObject","itemPara","navDiv","btnNP","$f7195056dc934f0a$export$b9493127fa738bd0","btnLink","btnList","descr","goal","LessEqual","appDetails","icon","onFinish","$c1ce9d969bfa6909$export$19583cfa3b6f083c","$04700a0d875ec948$export$ee7ca48d5b25a954","funds","postConditionAddress","postConditionCode","postConditionAmount","txOptions","validateWithAbi","downloadPrice","$f7195056dc934f0a$export$c1c78accedb96fec","$f7195056dc934f0a$export$3e03971d40fbc62","uri","cid","myRequest","createObjectURL","download","click","$f7195056dc934f0a$var$fetchData","$f7195056dc934f0a$export$a5ee5ffa13980d3c","$f7195056dc934f0a$export$637b60a42bb03f06","$f7195056dc934f0a$export$a2d2707d206560e9","$f7195056dc934f0a$export$540b8fc81db2ca91","stxAddress","balance","apiCallUri","baseUri","$f7195056dc934f0a$export$2012acaa271c8fdd","txId","tx_status","$9173841eb61ab7cc$export$2a4dde0beb235d92","$9173841eb61ab7cc$var$hex","$9173841eb61ab7cc$export$b22c20ae665acecd","$9255a04423c02935$var$c32checksum","$9255a04423c02935$export$bc80266ae913bf10","$728dec25d6740a37$export$3acacdf112fc9c85","$728dec25d6740a37$var$ADDR_BITCOIN_TO_STACKS","$728dec25d6740a37$var$ADDR_STACKS_TO_BITCOIN","$728dec25d6740a37$export$66a43a2039e8f740","txDataLog","periodics","environment","apiBaseUri","$c1ce9d969bfa6909$export$2d4f24d840a2cf4","updateProjectList","lastProjectId","newProjectList","projectArray","projectData","nftCount","nftData","checkTxData","aMax","txInfo","alert","btn","setInterval","$c1ce9d969bfa6909$export$31883993389c8ae6","$04700a0d875ec948$export$f53786bfb41f1523","onCancel","divBal","updateBalance","userBalance","btnSignOut","removeChild","clearInterval","div"],"version":3,"file":"index.d09ca3a0.js.map"}