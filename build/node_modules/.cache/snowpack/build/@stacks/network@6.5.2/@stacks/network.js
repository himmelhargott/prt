import '../../../../../../../_snowpack/pkg/cross-fetch/polyfill.js';
import { TransactionVersion, ChainID } from '../../../../../../../_snowpack/pkg/@stacks/common.js';

const defaultFetchOpts = {
    referrerPolicy: 'origin',
};
const getFetchOptions = () => {
    return defaultFetchOpts;
};
const setFetchOptions = (ops) => {
    return Object.assign(defaultFetchOpts, ops);
};
async function fetchWrapper(input, init) {
    const fetchOpts = {};
    Object.assign(fetchOpts, init, defaultFetchOpts);
    const fetchResult = await fetch(input, fetchOpts);
    return fetchResult;
}
function hostMatches(host, pattern) {
    if (typeof pattern === 'string')
        return pattern === host;
    return pattern.exec(host);
}
function createApiKeyMiddleware({ apiKey, host = /(.*)api(.*)\.stacks\.co$/i, httpHeader = 'x-api-key', }) {
    return {
        pre: context => {
            const reqUrl = new URL(context.url);
            if (!hostMatches(reqUrl.host, host))
                return;
            const headers = new Headers(context.init.headers);
            headers.set(httpHeader, apiKey);
            context.init.headers = headers;
        },
    };
}
function argsForCreateFetchFn(args) {
    let fetchLib = fetchWrapper;
    let middlewares = [];
    if (args.length > 0 && typeof args[0] === 'function') {
        fetchLib = args.shift();
    }
    if (args.length > 0) {
        middlewares = args;
    }
    return { fetchLib, middlewares };
}
function createFetchFn(...args) {
    const { fetchLib, middlewares } = argsForCreateFetchFn(args);
    const fetchFn = async (url, init) => {
        let fetchParams = { url, init: init ?? {} };
        for (const middleware of middlewares) {
            if (typeof middleware.pre === 'function') {
                const result = await Promise.resolve(middleware.pre({
                    fetch: fetchLib,
                    ...fetchParams,
                }));
                fetchParams = result ?? fetchParams;
            }
        }
        let response = await fetchLib(fetchParams.url, fetchParams.init);
        for (const middleware of middlewares) {
            if (typeof middleware.post === 'function') {
                const result = await Promise.resolve(middleware.post({
                    fetch: fetchLib,
                    url: fetchParams.url,
                    init: fetchParams.init,
                    response: response?.clone() ?? response,
                }));
                response = result ?? response;
            }
        }
        return response;
    };
    return fetchFn;
}

const HIRO_MAINNET_DEFAULT = 'https://stacks-node-api.mainnet.stacks.co';
const HIRO_TESTNET_DEFAULT = 'https://stacks-node-api.testnet.stacks.co';
const HIRO_MOCKNET_DEFAULT = 'http://localhost:3999';
const StacksNetworks = ['mainnet', 'testnet', 'devnet', 'mocknet'];
class StacksNetwork {
    constructor(networkConfig) {
        this.version = TransactionVersion.Mainnet;
        this.chainId = ChainID.Mainnet;
        this.bnsLookupUrl = 'https://stacks-node-api.mainnet.stacks.co';
        this.broadcastEndpoint = '/v2/transactions';
        this.transferFeeEstimateEndpoint = '/v2/fees/transfer';
        this.transactionFeeEstimateEndpoint = '/v2/fees/transaction';
        this.accountEndpoint = '/v2/accounts';
        this.contractAbiEndpoint = '/v2/contracts/interface';
        this.readOnlyFunctionCallEndpoint = '/v2/contracts/call-read';
        this.isMainnet = () => this.version === TransactionVersion.Mainnet;
        this.getBroadcastApiUrl = () => `${this.coreApiUrl}${this.broadcastEndpoint}`;
        this.getTransferFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transferFeeEstimateEndpoint}`;
        this.getTransactionFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transactionFeeEstimateEndpoint}`;
        this.getAccountApiUrl = (address) => `${this.coreApiUrl}${this.accountEndpoint}/${address}?proof=0`;
        this.getAccountExtendedBalancesApiUrl = (address) => `${this.coreApiUrl}/extended/v1/address/${address}/balances`;
        this.getAbiApiUrl = (address, contract) => `${this.coreApiUrl}${this.contractAbiEndpoint}/${address}/${contract}`;
        this.getReadOnlyFunctionCallApiUrl = (contractAddress, contractName, functionName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}/${contractAddress}/${contractName}/${encodeURIComponent(functionName)}`;
        this.getInfoUrl = () => `${this.coreApiUrl}/v2/info`;
        this.getBlockTimeInfoUrl = () => `${this.coreApiUrl}/extended/v1/info/network_block_times`;
        this.getPoxInfoUrl = () => `${this.coreApiUrl}/v2/pox`;
        this.getRewardsUrl = (address, options) => {
            let url = `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}`;
            if (options) {
                url = `${url}?limit=${options.limit}&offset=${options.offset}`;
            }
            return url;
        };
        this.getRewardsTotalUrl = (address) => `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}/total`;
        this.getRewardHoldersUrl = (address, options) => {
            let url = `${this.coreApiUrl}/extended/v1/burnchain/reward_slot_holders/${address}`;
            if (options) {
                url = `${url}?limit=${options.limit}&offset=${options.offset}`;
            }
            return url;
        };
        this.getStackerInfoUrl = (contractAddress, contractName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}
    ${contractAddress}/${contractName}/get-stacker-info`;
        this.getDataVarUrl = (contractAddress, contractName, dataVarName) => `${this.coreApiUrl}/v2/data_var/${contractAddress}/${contractName}/${dataVarName}?proof=0`;
        this.getMapEntryUrl = (contractAddress, contractName, mapName) => `${this.coreApiUrl}/v2/map_entry/${contractAddress}/${contractName}/${mapName}?proof=0`;
        this.coreApiUrl = networkConfig.url;
        this.fetchFn = networkConfig.fetchFn ?? createFetchFn();
    }
    getNameInfo(fullyQualifiedName) {
        const nameLookupURL = `${this.bnsLookupUrl}/v1/names/${fullyQualifiedName}`;
        return this.fetchFn(nameLookupURL)
            .then(resp => {
            if (resp.status === 404) {
                throw new Error('Name not found');
            }
            else if (resp.status !== 200) {
                throw new Error(`Bad response status: ${resp.status}`);
            }
            else {
                return resp.json();
            }
        })
            .then(nameInfo => {
            if (nameInfo.address) {
                return Object.assign({}, nameInfo, { address: nameInfo.address });
            }
            else {
                return nameInfo;
            }
        });
    }
}
StacksNetwork.fromName = (networkName) => {
    switch (networkName) {
        case 'mainnet':
            return new StacksMainnet();
        case 'testnet':
            return new StacksTestnet();
        case 'devnet':
            return new StacksDevnet();
        case 'mocknet':
            return new StacksMocknet();
        default:
            throw new Error(`Invalid network name provided. Must be one of the following: ${StacksNetworks.join(', ')}`);
    }
};
StacksNetwork.fromNameOrNetwork = (network) => {
    if (typeof network !== 'string' && 'version' in network) {
        return network;
    }
    return StacksNetwork.fromName(network);
};
class StacksMainnet extends StacksNetwork {
    constructor(opts) {
        super({
            url: opts?.url ?? HIRO_MAINNET_DEFAULT,
            fetchFn: opts?.fetchFn,
        });
        this.version = TransactionVersion.Mainnet;
        this.chainId = ChainID.Mainnet;
    }
}
class StacksTestnet extends StacksNetwork {
    constructor(opts) {
        super({
            url: opts?.url ?? HIRO_TESTNET_DEFAULT,
            fetchFn: opts?.fetchFn,
        });
        this.version = TransactionVersion.Testnet;
        this.chainId = ChainID.Testnet;
    }
}
class StacksMocknet extends StacksNetwork {
    constructor(opts) {
        super({
            url: opts?.url ?? HIRO_MOCKNET_DEFAULT,
            fetchFn: opts?.fetchFn,
        });
        this.version = TransactionVersion.Testnet;
        this.chainId = ChainID.Testnet;
    }
}
const StacksDevnet = StacksMocknet;

export { HIRO_MAINNET_DEFAULT, HIRO_MOCKNET_DEFAULT, HIRO_TESTNET_DEFAULT, StacksDevnet, StacksMainnet, StacksMocknet, StacksNetwork, StacksNetworks, StacksTestnet, createApiKeyMiddleware, createFetchFn, fetchWrapper, getFetchOptions, hostMatches, setFetchOptions };
