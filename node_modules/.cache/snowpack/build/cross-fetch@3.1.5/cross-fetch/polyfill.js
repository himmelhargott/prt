var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
		}
	}, fn(module, module.exports), module.exports;
}

function getDefaultExportFromNamespaceIfNotNamed (n) {
	return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

// native patch for: node-fetch, whatwg-fetch
// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
  if (typeof self !== 'undefined') { return self; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global$1 !== 'undefined') { return global$1; }
  throw new Error('unable to locate global object');
};
var global$1 = getGlobal();
var nodeFetch = global$1.fetch.bind(global$1);
const Headers = global$1.Headers;
const Request = global$1.Request;
const Response = global$1.Response;

var nodeFetch$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': nodeFetch,
	Headers: Headers,
	Request: Request,
	Response: Response
});

var nodeFetch$2 = /*@__PURE__*/getDefaultExportFromNamespaceIfNotNamed(nodeFetch$1);

var nodePonyfill = createCommonjsModule(function (module, exports) {
const realFetch = nodeFetch$2.default || nodeFetch$2;

const fetch = function (url, options) {
  // Support schemaless URIs on the server for parity with the browser.
  // Ex: //github.com/ -> https://github.com/
  if (/^\/\//.test(url)) {
    url = 'https:' + url;
  }
  return realFetch.call(this, url, options)
};

fetch.ponyfill = true;

module.exports = exports = fetch;
exports.fetch = fetch;
exports.Headers = nodeFetch$2.Headers;
exports.Request = nodeFetch$2.Request;
exports.Response = nodeFetch$2.Response;

// Needed for TypeScript consumers without esModuleInterop.
exports.default = fetch;
});

const fetch = nodePonyfill.fetch.bind({});

fetch.polyfill = true;

if (!commonjsGlobal.fetch) {
  commonjsGlobal.fetch = fetch;
  commonjsGlobal.Response = nodePonyfill.Response;
  commonjsGlobal.Headers = nodePonyfill.Headers;
  commonjsGlobal.Request = nodePonyfill.Request;
}

var nodePolyfill = {

};

export default nodePolyfill;
